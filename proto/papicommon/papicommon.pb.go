// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: papicommon.proto

package papicommon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	pcommon "vertesan/campus/proto/pcommon"
	penum "vertesan/campus/proto/penum"
	pmaster "vertesan/campus/proto/pmaster"
	ptransaction "vertesan/campus/proto/ptransaction"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DearnessStoryUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	StoryId     string `protobuf:"bytes,2,opt,name=storyId,proto3" json:"storyId,omitempty"`
}

func (x *DearnessStoryUnlock) Reset() {
	*x = DearnessStoryUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papicommon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DearnessStoryUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DearnessStoryUnlock) ProtoMessage() {}

func (x *DearnessStoryUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_papicommon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DearnessStoryUnlock.ProtoReflect.Descriptor instead.
func (*DearnessStoryUnlock) Descriptor() ([]byte, []int) {
	return file_papicommon_proto_rawDescGZIP(), []int{0}
}

func (x *DearnessStoryUnlock) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *DearnessStoryUnlock) GetStoryId() string {
	if x != nil {
		return x.StoryId
	}
	return ""
}

type Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId string `protobuf:"bytes,1,opt,name=missionId,proto3" json:"missionId,omitempty"`
	Threshold int32  `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Mission) Reset() {
	*x = Mission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papicommon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mission) ProtoMessage() {}

func (x *Mission) ProtoReflect() protoreflect.Message {
	mi := &file_papicommon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mission.ProtoReflect.Descriptor instead.
func (*Mission) Descriptor() ([]byte, []int) {
	return file_papicommon_proto_rawDescGZIP(), []int{1}
}

func (x *Mission) GetMissionId() string {
	if x != nil {
		return x.MissionId
	}
	return ""
}

func (x *Mission) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type PvpRateSeasonTop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusType              penum.PvpRateSeasonStatusType `protobuf:"varint,1,opt,name=statusType,proto3,enum=penum.PvpRateSeasonStatusType" json:"statusType,omitempty"`
	Rate                    int32                         `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Rank                    int32                         `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	MaxDailyPlayCount       int32                         `protobuf:"varint,4,opt,name=maxDailyPlayCount,proto3" json:"maxDailyPlayCount,omitempty"`
	RemainingDailyPlayCount int32                         `protobuf:"varint,5,opt,name=remainingDailyPlayCount,proto3" json:"remainingDailyPlayCount,omitempty"`
	CurrentSeasonStartTime  int64                         `protobuf:"varint,6,opt,name=currentSeasonStartTime,proto3" json:"currentSeasonStartTime,omitempty"`
	CurrentSeasonEndTime    int64                         `protobuf:"varint,7,opt,name=currentSeasonEndTime,proto3" json:"currentSeasonEndTime,omitempty"`
}

func (x *PvpRateSeasonTop) Reset() {
	*x = PvpRateSeasonTop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papicommon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateSeasonTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateSeasonTop) ProtoMessage() {}

func (x *PvpRateSeasonTop) ProtoReflect() protoreflect.Message {
	mi := &file_papicommon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateSeasonTop.ProtoReflect.Descriptor instead.
func (*PvpRateSeasonTop) Descriptor() ([]byte, []int) {
	return file_papicommon_proto_rawDescGZIP(), []int{2}
}

func (x *PvpRateSeasonTop) GetStatusType() penum.PvpRateSeasonStatusType {
	if x != nil {
		return x.StatusType
	}
	return penum.PvpRateSeasonStatusType(0)
}

func (x *PvpRateSeasonTop) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *PvpRateSeasonTop) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PvpRateSeasonTop) GetMaxDailyPlayCount() int32 {
	if x != nil {
		return x.MaxDailyPlayCount
	}
	return 0
}

func (x *PvpRateSeasonTop) GetRemainingDailyPlayCount() int32 {
	if x != nil {
		return x.RemainingDailyPlayCount
	}
	return 0
}

func (x *PvpRateSeasonTop) GetCurrentSeasonStartTime() int64 {
	if x != nil {
		return x.CurrentSeasonStartTime
	}
	return 0
}

func (x *PvpRateSeasonTop) GetCurrentSeasonEndTime() int64 {
	if x != nil {
		return x.CurrentSeasonEndTime
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedData           *UserData                      `protobuf:"bytes,1,opt,name=updatedData,proto3" json:"updatedData,omitempty"`
	DeletedData           *UserData                      `protobuf:"bytes,2,opt,name=deletedData,proto3" json:"deletedData,omitempty"`
	ClearMissions         []*pmaster.Mission             `protobuf:"bytes,3,rep,name=clearMissions,proto3" json:"clearMissions,omitempty"`
	ProducerLevelUnlocks  []*pcommon.ProducerLevelUnlock `protobuf:"bytes,4,rep,name=producerLevelUnlocks,proto3" json:"producerLevelUnlocks,omitempty"`
	DearnessStoryUnlocks  []*DearnessStoryUnlock         `protobuf:"bytes,5,rep,name=dearnessStoryUnlocks,proto3" json:"dearnessStoryUnlocks,omitempty"`
	AnotherCostumeIds     []string                       `protobuf:"bytes,6,rep,name=anotherCostumeIds,proto3" json:"anotherCostumeIds,omitempty"`
	AnotherCostumeHeadIds []string                       `protobuf:"bytes,7,rep,name=anotherCostumeHeadIds,proto3" json:"anotherCostumeHeadIds,omitempty"`
	StoryEventRewards     []*StoryEventReward            `protobuf:"bytes,8,rep,name=storyEventRewards,proto3" json:"storyEventRewards,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papicommon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_papicommon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_papicommon_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetUpdatedData() *UserData {
	if x != nil {
		return x.UpdatedData
	}
	return nil
}

func (x *Response) GetDeletedData() *UserData {
	if x != nil {
		return x.DeletedData
	}
	return nil
}

func (x *Response) GetClearMissions() []*pmaster.Mission {
	if x != nil {
		return x.ClearMissions
	}
	return nil
}

func (x *Response) GetProducerLevelUnlocks() []*pcommon.ProducerLevelUnlock {
	if x != nil {
		return x.ProducerLevelUnlocks
	}
	return nil
}

func (x *Response) GetDearnessStoryUnlocks() []*DearnessStoryUnlock {
	if x != nil {
		return x.DearnessStoryUnlocks
	}
	return nil
}

func (x *Response) GetAnotherCostumeIds() []string {
	if x != nil {
		return x.AnotherCostumeIds
	}
	return nil
}

func (x *Response) GetAnotherCostumeHeadIds() []string {
	if x != nil {
		return x.AnotherCostumeHeadIds
	}
	return nil
}

func (x *Response) GetStoryEventRewards() []*StoryEventReward {
	if x != nil {
		return x.StoryEventRewards
	}
	return nil
}

type StoryEventReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoryEventId string                           `protobuf:"bytes,1,opt,name=storyEventId,proto3" json:"storyEventId,omitempty"`
	PointRewards []*pcommon.StoryEventPointReward `protobuf:"bytes,2,rep,name=pointRewards,proto3" json:"pointRewards,omitempty"`
}

func (x *StoryEventReward) Reset() {
	*x = StoryEventReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papicommon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryEventReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryEventReward) ProtoMessage() {}

func (x *StoryEventReward) ProtoReflect() protoreflect.Message {
	mi := &file_papicommon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryEventReward.ProtoReflect.Descriptor instead.
func (*StoryEventReward) Descriptor() ([]byte, []int) {
	return file_papicommon_proto_rawDescGZIP(), []int{4}
}

func (x *StoryEventReward) GetStoryEventId() string {
	if x != nil {
		return x.StoryEventId
	}
	return ""
}

func (x *StoryEventReward) GetPointRewards() []*pcommon.StoryEventPointReward {
	if x != nil {
		return x.PointRewards
	}
	return nil
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                               *ptransaction.User                             `protobuf:"bytes,342861366,opt,name=user,proto3" json:"user,omitempty"`
	UserActionPoint                    *ptransaction.UserActionPoint                  `protobuf:"bytes,238317234,opt,name=userActionPoint,proto3" json:"userActionPoint,omitempty"`
	UserAuthProviderList               []*ptransaction.UserAuthProvider               `protobuf:"bytes,151341701,rep,name=userAuthProviderList,proto3" json:"userAuthProviderList,omitempty"`
	UserBalance                        *ptransaction.UserBalance                      `protobuf:"bytes,164091159,opt,name=userBalance,proto3" json:"userBalance,omitempty"`
	UserBanWarning                     *ptransaction.UserBanWarning                   `protobuf:"bytes,531719871,opt,name=userBanWarning,proto3" json:"userBanWarning,omitempty"`
	UserCharacterList                  []*ptransaction.UserCharacter                  `protobuf:"bytes,370704040,rep,name=userCharacterList,proto3" json:"userCharacterList,omitempty"`
	UserCharacterCostumeList           []*ptransaction.UserCharacterCostume           `protobuf:"bytes,314243425,rep,name=userCharacterCostumeList,proto3" json:"userCharacterCostumeList,omitempty"`
	UserCharacterRosterList            []*ptransaction.UserCharacterRoster            `protobuf:"bytes,449008014,rep,name=userCharacterRosterList,proto3" json:"userCharacterRosterList,omitempty"`
	UserComebackList                   []*ptransaction.UserComeback                   `protobuf:"bytes,440873335,rep,name=userComebackList,proto3" json:"userComebackList,omitempty"`
	UserCostumeList                    []*ptransaction.UserCostume                    `protobuf:"bytes,469968532,rep,name=userCostumeList,proto3" json:"userCostumeList,omitempty"`
	UserCostumeHeadList                []*ptransaction.UserCostumeHead                `protobuf:"bytes,374617052,rep,name=userCostumeHeadList,proto3" json:"userCostumeHeadList,omitempty"`
	UserCountList                      []*ptransaction.UserCount                      `protobuf:"bytes,431111247,rep,name=userCountList,proto3" json:"userCountList,omitempty"`
	UserDearnessStoryList              []*ptransaction.UserDearnessStory              `protobuf:"bytes,133642946,rep,name=userDearnessStoryList,proto3" json:"userDearnessStoryList,omitempty"`
	UserGashaButtonList                []*ptransaction.UserGashaButton                `protobuf:"bytes,319381230,rep,name=userGashaButtonList,proto3" json:"userGashaButtonList,omitempty"`
	UserGuild                          *ptransaction.UserGuild                        `protobuf:"bytes,33667889,opt,name=userGuild,proto3" json:"userGuild,omitempty"`
	UserHomeCharacterList              []*ptransaction.UserHomeCharacter              `protobuf:"bytes,88325184,rep,name=userHomeCharacterList,proto3" json:"userHomeCharacterList,omitempty"`
	UserIdolCardList                   []*ptransaction.UserIdolCard                   `protobuf:"bytes,119514127,rep,name=userIdolCardList,proto3" json:"userIdolCardList,omitempty"`
	UserIdolCardSkinList               []*ptransaction.UserIdolCardSkin               `protobuf:"bytes,77005383,rep,name=userIdolCardSkinList,proto3" json:"userIdolCardSkinList,omitempty"`
	UserInvitation                     *ptransaction.UserInvitation                   `protobuf:"bytes,11952121,opt,name=userInvitation,proto3" json:"userInvitation,omitempty"`
	UserItemList                       []*ptransaction.UserItem                       `protobuf:"bytes,208896283,rep,name=userItemList,proto3" json:"userItemList,omitempty"`
	UserMeishiList                     []*ptransaction.UserMeishi                     `protobuf:"bytes,392438043,rep,name=userMeishiList,proto3" json:"userMeishiList,omitempty"`
	UserMeishiBaseAssetList            []*ptransaction.UserMeishiBaseAsset            `protobuf:"bytes,10530785,rep,name=userMeishiBaseAssetList,proto3" json:"userMeishiBaseAssetList,omitempty"`
	UserMeishiIllustrationAssetList    []*ptransaction.UserMeishiIllustrationAsset    `protobuf:"bytes,100237367,rep,name=userMeishiIllustrationAssetList,proto3" json:"userMeishiIllustrationAssetList,omitempty"`
	UserMemoryList                     []*ptransaction.UserMemory                     `protobuf:"bytes,163783316,rep,name=userMemoryList,proto3" json:"userMemoryList,omitempty"`
	UserMemoryInherit                  *ptransaction.UserMemoryInherit                `protobuf:"bytes,312197620,opt,name=userMemoryInherit,proto3" json:"userMemoryInherit,omitempty"`
	UserMissionList                    []*ptransaction.UserMission                    `protobuf:"bytes,176225192,rep,name=userMissionList,proto3" json:"userMissionList,omitempty"`
	UserMissionDailyReleaseGroupList   []*ptransaction.UserMissionDailyReleaseGroup   `protobuf:"bytes,104872908,rep,name=userMissionDailyReleaseGroupList,proto3" json:"userMissionDailyReleaseGroupList,omitempty"`
	UserMissionGroupList               []*ptransaction.UserMissionGroup               `protobuf:"bytes,350034430,rep,name=userMissionGroupList,proto3" json:"userMissionGroupList,omitempty"`
	UserMissionPassList                []*ptransaction.UserMissionPass                `protobuf:"bytes,143481512,rep,name=userMissionPassList,proto3" json:"userMissionPassList,omitempty"`
	UserMissionPassPointList           []*ptransaction.UserMissionPassPoint           `protobuf:"bytes,358937978,rep,name=userMissionPassPointList,proto3" json:"userMissionPassPointList,omitempty"`
	UserMissionPointList               []*ptransaction.UserMissionPoint               `protobuf:"bytes,124548488,rep,name=userMissionPointList,proto3" json:"userMissionPointList,omitempty"`
	UserMoney                          *ptransaction.UserMoney                        `protobuf:"bytes,170538259,opt,name=userMoney,proto3" json:"userMoney,omitempty"`
	UserMovieList                      []*ptransaction.UserMovie                      `protobuf:"bytes,389419008,rep,name=userMovieList,proto3" json:"userMovieList,omitempty"`
	UserMusicList                      []*ptransaction.UserMusic                      `protobuf:"bytes,430828780,rep,name=userMusicList,proto3" json:"userMusicList,omitempty"`
	UserPhotoList                      []*ptransaction.UserPhoto                      `protobuf:"bytes,288232532,rep,name=userPhotoList,proto3" json:"userPhotoList,omitempty"`
	UserPhotoBackgroundList            []*ptransaction.UserPhotoBackground            `protobuf:"bytes,99273345,rep,name=userPhotoBackgroundList,proto3" json:"userPhotoBackgroundList,omitempty"`
	UserPhotoPoseList                  []*ptransaction.UserPhotoPose                  `protobuf:"bytes,439296203,rep,name=userPhotoPoseList,proto3" json:"userPhotoPoseList,omitempty"`
	UserPreference                     *ptransaction.UserPreference                   `protobuf:"bytes,296399830,opt,name=userPreference,proto3" json:"userPreference,omitempty"`
	UserProduceList                    []*ptransaction.UserProduce                    `protobuf:"bytes,170637697,rep,name=userProduceList,proto3" json:"userProduceList,omitempty"`
	UserProduceAdvList                 []*ptransaction.UserProduceAdv                 `protobuf:"bytes,280248182,rep,name=userProduceAdvList,proto3" json:"userProduceAdvList,omitempty"`
	UserProduceCardList                []*ptransaction.UserProduceCard                `protobuf:"bytes,230550472,rep,name=userProduceCardList,proto3" json:"userProduceCardList,omitempty"`
	UserProduceCardRewardList          []*ptransaction.UserProduceCardReward          `protobuf:"bytes,364806182,rep,name=userProduceCardRewardList,proto3" json:"userProduceCardRewardList,omitempty"`
	UserProduceCharacterList           []*ptransaction.UserProduceCharacter           `protobuf:"bytes,494627662,rep,name=userProduceCharacterList,proto3" json:"userProduceCharacterList,omitempty"`
	UserProduceDrinkList               []*ptransaction.UserProduceDrink               `protobuf:"bytes,65968245,rep,name=userProduceDrinkList,proto3" json:"userProduceDrinkList,omitempty"`
	UserProduceGroupCharacterList      []*ptransaction.UserProduceGroupCharacter      `protobuf:"bytes,149373425,rep,name=userProduceGroupCharacterList,proto3" json:"userProduceGroupCharacterList,omitempty"`
	UserProduceIdolCardList            []*ptransaction.UserProduceIdolCard            `protobuf:"bytes,110043881,rep,name=userProduceIdolCardList,proto3" json:"userProduceIdolCardList,omitempty"`
	UserProduceItemList                []*ptransaction.UserProduceItem                `protobuf:"bytes,99080460,rep,name=userProduceItemList,proto3" json:"userProduceItemList,omitempty"`
	UserProduceLiveList                []*ptransaction.UserProduceLive                `protobuf:"bytes,317020496,rep,name=userProduceLiveList,proto3" json:"userProduceLiveList,omitempty"`
	UserProduceMemoryDeckList          []*ptransaction.UserProduceMemoryDeck          `protobuf:"bytes,162217088,rep,name=userProduceMemoryDeckList,proto3" json:"userProduceMemoryDeckList,omitempty"`
	UserProduceProgress                *ptransaction.UserProduceProgress              `protobuf:"bytes,374217157,opt,name=userProduceProgress,proto3" json:"userProduceProgress,omitempty"`
	UserProduceProgressAudition        *ptransaction.UserProduceProgressAudition      `protobuf:"bytes,532050964,opt,name=userProduceProgressAudition,proto3" json:"userProduceProgressAudition,omitempty"`
	UserProduceProgressBusinessList    []*ptransaction.UserProduceProgressBusiness    `protobuf:"bytes,84290276,rep,name=userProduceProgressBusinessList,proto3" json:"userProduceProgressBusinessList,omitempty"`
	UserProduceProgressEffectList      []*ptransaction.UserProduceProgressEffect      `protobuf:"bytes,315942447,rep,name=userProduceProgressEffectList,proto3" json:"userProduceProgressEffectList,omitempty"`
	UserProduceProgressEventList       []*ptransaction.UserProduceProgressEvent       `protobuf:"bytes,40225152,rep,name=userProduceProgressEventList,proto3" json:"userProduceProgressEventList,omitempty"`
	UserProduceProgressMemoryList      []*ptransaction.UserProduceProgressMemory      `protobuf:"bytes,215423357,rep,name=userProduceProgressMemoryList,proto3" json:"userProduceProgressMemoryList,omitempty"`
	UserProduceProgressPresentList     []*ptransaction.UserProduceProgressPresent     `protobuf:"bytes,349962730,rep,name=userProduceProgressPresentList,proto3" json:"userProduceProgressPresentList,omitempty"`
	UserProduceProgressProduceCardList []*ptransaction.UserProduceProgressProduceCard `protobuf:"bytes,309641228,rep,name=userProduceProgressProduceCardList,proto3" json:"userProduceProgressProduceCardList,omitempty"`
	UserProduceProgressScheduleList    []*ptransaction.UserProduceProgressSchedule    `protobuf:"bytes,22482116,rep,name=userProduceProgressScheduleList,proto3" json:"userProduceProgressScheduleList,omitempty"`
	UserProduceProgressShopList        []*ptransaction.UserProduceProgressShop        `protobuf:"bytes,498183736,rep,name=userProduceProgressShopList,proto3" json:"userProduceProgressShopList,omitempty"`
	UserProduceProgressSupportCardList []*ptransaction.UserProduceProgressSupportCard `protobuf:"bytes,256246388,rep,name=userProduceProgressSupportCardList,proto3" json:"userProduceProgressSupportCardList,omitempty"`
	UserProduceRerollMemoryList        []*ptransaction.UserProduceRerollMemory        `protobuf:"bytes,440818481,rep,name=userProduceRerollMemoryList,proto3" json:"userProduceRerollMemoryList,omitempty"`
	UserProduceStartAchievementList    []*ptransaction.UserProduceStartAchievement    `protobuf:"bytes,259880526,rep,name=userProduceStartAchievementList,proto3" json:"userProduceStartAchievementList,omitempty"`
	UserProduceStoryList               []*ptransaction.UserProduceStory               `protobuf:"bytes,117364693,rep,name=userProduceStoryList,proto3" json:"userProduceStoryList,omitempty"`
	UserProduceSupportCardDeckList     []*ptransaction.UserProduceSupportCardDeck     `protobuf:"bytes,286307933,rep,name=userProduceSupportCardDeckList,proto3" json:"userProduceSupportCardDeckList,omitempty"`
	UserProfile                        *ptransaction.UserProfile                      `protobuf:"bytes,49977942,opt,name=userProfile,proto3" json:"userProfile,omitempty"`
	UserPvpRate                        *ptransaction.UserPvpRate                      `protobuf:"bytes,226209413,opt,name=userPvpRate,proto3" json:"userPvpRate,omitempty"`
	UserPvpRateUnit                    *ptransaction.UserPvpRateUnit                  `protobuf:"bytes,286467793,opt,name=userPvpRateUnit,proto3" json:"userPvpRateUnit,omitempty"`
	UserShopItemList                   []*ptransaction.UserShopItem                   `protobuf:"bytes,455613547,rep,name=userShopItemList,proto3" json:"userShopItemList,omitempty"`
	UserStoryList                      []*ptransaction.UserStory                      `protobuf:"bytes,376356693,rep,name=userStoryList,proto3" json:"userStoryList,omitempty"`
	UserSupportCardList                []*ptransaction.UserSupportCard                `protobuf:"bytes,2234692,rep,name=userSupportCardList,proto3" json:"userSupportCardList,omitempty"`
	UserTimeList                       []*ptransaction.UserTime                       `protobuf:"bytes,68970636,rep,name=userTimeList,proto3" json:"userTimeList,omitempty"`
	UserTowerList                      []*ptransaction.UserTower                      `protobuf:"bytes,268691409,rep,name=userTowerList,proto3" json:"userTowerList,omitempty"`
	UserTutorialList                   []*ptransaction.UserTutorial                   `protobuf:"bytes,201375606,rep,name=userTutorialList,proto3" json:"userTutorialList,omitempty"`
	UserWorkList                       []*ptransaction.UserWork                       `protobuf:"bytes,225189857,rep,name=userWorkList,proto3" json:"userWorkList,omitempty"`
	UserWorkCharacterList              []*ptransaction.UserWorkCharacter              `protobuf:"bytes,192688899,rep,name=userWorkCharacterList,proto3" json:"userWorkCharacterList,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_papicommon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_papicommon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_papicommon_proto_rawDescGZIP(), []int{5}
}

func (x *UserData) GetUser() *ptransaction.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserData) GetUserActionPoint() *ptransaction.UserActionPoint {
	if x != nil {
		return x.UserActionPoint
	}
	return nil
}

func (x *UserData) GetUserAuthProviderList() []*ptransaction.UserAuthProvider {
	if x != nil {
		return x.UserAuthProviderList
	}
	return nil
}

func (x *UserData) GetUserBalance() *ptransaction.UserBalance {
	if x != nil {
		return x.UserBalance
	}
	return nil
}

func (x *UserData) GetUserBanWarning() *ptransaction.UserBanWarning {
	if x != nil {
		return x.UserBanWarning
	}
	return nil
}

func (x *UserData) GetUserCharacterList() []*ptransaction.UserCharacter {
	if x != nil {
		return x.UserCharacterList
	}
	return nil
}

func (x *UserData) GetUserCharacterCostumeList() []*ptransaction.UserCharacterCostume {
	if x != nil {
		return x.UserCharacterCostumeList
	}
	return nil
}

func (x *UserData) GetUserCharacterRosterList() []*ptransaction.UserCharacterRoster {
	if x != nil {
		return x.UserCharacterRosterList
	}
	return nil
}

func (x *UserData) GetUserComebackList() []*ptransaction.UserComeback {
	if x != nil {
		return x.UserComebackList
	}
	return nil
}

func (x *UserData) GetUserCostumeList() []*ptransaction.UserCostume {
	if x != nil {
		return x.UserCostumeList
	}
	return nil
}

func (x *UserData) GetUserCostumeHeadList() []*ptransaction.UserCostumeHead {
	if x != nil {
		return x.UserCostumeHeadList
	}
	return nil
}

func (x *UserData) GetUserCountList() []*ptransaction.UserCount {
	if x != nil {
		return x.UserCountList
	}
	return nil
}

func (x *UserData) GetUserDearnessStoryList() []*ptransaction.UserDearnessStory {
	if x != nil {
		return x.UserDearnessStoryList
	}
	return nil
}

func (x *UserData) GetUserGashaButtonList() []*ptransaction.UserGashaButton {
	if x != nil {
		return x.UserGashaButtonList
	}
	return nil
}

func (x *UserData) GetUserGuild() *ptransaction.UserGuild {
	if x != nil {
		return x.UserGuild
	}
	return nil
}

func (x *UserData) GetUserHomeCharacterList() []*ptransaction.UserHomeCharacter {
	if x != nil {
		return x.UserHomeCharacterList
	}
	return nil
}

func (x *UserData) GetUserIdolCardList() []*ptransaction.UserIdolCard {
	if x != nil {
		return x.UserIdolCardList
	}
	return nil
}

func (x *UserData) GetUserIdolCardSkinList() []*ptransaction.UserIdolCardSkin {
	if x != nil {
		return x.UserIdolCardSkinList
	}
	return nil
}

func (x *UserData) GetUserInvitation() *ptransaction.UserInvitation {
	if x != nil {
		return x.UserInvitation
	}
	return nil
}

func (x *UserData) GetUserItemList() []*ptransaction.UserItem {
	if x != nil {
		return x.UserItemList
	}
	return nil
}

func (x *UserData) GetUserMeishiList() []*ptransaction.UserMeishi {
	if x != nil {
		return x.UserMeishiList
	}
	return nil
}

func (x *UserData) GetUserMeishiBaseAssetList() []*ptransaction.UserMeishiBaseAsset {
	if x != nil {
		return x.UserMeishiBaseAssetList
	}
	return nil
}

func (x *UserData) GetUserMeishiIllustrationAssetList() []*ptransaction.UserMeishiIllustrationAsset {
	if x != nil {
		return x.UserMeishiIllustrationAssetList
	}
	return nil
}

func (x *UserData) GetUserMemoryList() []*ptransaction.UserMemory {
	if x != nil {
		return x.UserMemoryList
	}
	return nil
}

func (x *UserData) GetUserMemoryInherit() *ptransaction.UserMemoryInherit {
	if x != nil {
		return x.UserMemoryInherit
	}
	return nil
}

func (x *UserData) GetUserMissionList() []*ptransaction.UserMission {
	if x != nil {
		return x.UserMissionList
	}
	return nil
}

func (x *UserData) GetUserMissionDailyReleaseGroupList() []*ptransaction.UserMissionDailyReleaseGroup {
	if x != nil {
		return x.UserMissionDailyReleaseGroupList
	}
	return nil
}

func (x *UserData) GetUserMissionGroupList() []*ptransaction.UserMissionGroup {
	if x != nil {
		return x.UserMissionGroupList
	}
	return nil
}

func (x *UserData) GetUserMissionPassList() []*ptransaction.UserMissionPass {
	if x != nil {
		return x.UserMissionPassList
	}
	return nil
}

func (x *UserData) GetUserMissionPassPointList() []*ptransaction.UserMissionPassPoint {
	if x != nil {
		return x.UserMissionPassPointList
	}
	return nil
}

func (x *UserData) GetUserMissionPointList() []*ptransaction.UserMissionPoint {
	if x != nil {
		return x.UserMissionPointList
	}
	return nil
}

func (x *UserData) GetUserMoney() *ptransaction.UserMoney {
	if x != nil {
		return x.UserMoney
	}
	return nil
}

func (x *UserData) GetUserMovieList() []*ptransaction.UserMovie {
	if x != nil {
		return x.UserMovieList
	}
	return nil
}

func (x *UserData) GetUserMusicList() []*ptransaction.UserMusic {
	if x != nil {
		return x.UserMusicList
	}
	return nil
}

func (x *UserData) GetUserPhotoList() []*ptransaction.UserPhoto {
	if x != nil {
		return x.UserPhotoList
	}
	return nil
}

func (x *UserData) GetUserPhotoBackgroundList() []*ptransaction.UserPhotoBackground {
	if x != nil {
		return x.UserPhotoBackgroundList
	}
	return nil
}

func (x *UserData) GetUserPhotoPoseList() []*ptransaction.UserPhotoPose {
	if x != nil {
		return x.UserPhotoPoseList
	}
	return nil
}

func (x *UserData) GetUserPreference() *ptransaction.UserPreference {
	if x != nil {
		return x.UserPreference
	}
	return nil
}

func (x *UserData) GetUserProduceList() []*ptransaction.UserProduce {
	if x != nil {
		return x.UserProduceList
	}
	return nil
}

func (x *UserData) GetUserProduceAdvList() []*ptransaction.UserProduceAdv {
	if x != nil {
		return x.UserProduceAdvList
	}
	return nil
}

func (x *UserData) GetUserProduceCardList() []*ptransaction.UserProduceCard {
	if x != nil {
		return x.UserProduceCardList
	}
	return nil
}

func (x *UserData) GetUserProduceCardRewardList() []*ptransaction.UserProduceCardReward {
	if x != nil {
		return x.UserProduceCardRewardList
	}
	return nil
}

func (x *UserData) GetUserProduceCharacterList() []*ptransaction.UserProduceCharacter {
	if x != nil {
		return x.UserProduceCharacterList
	}
	return nil
}

func (x *UserData) GetUserProduceDrinkList() []*ptransaction.UserProduceDrink {
	if x != nil {
		return x.UserProduceDrinkList
	}
	return nil
}

func (x *UserData) GetUserProduceGroupCharacterList() []*ptransaction.UserProduceGroupCharacter {
	if x != nil {
		return x.UserProduceGroupCharacterList
	}
	return nil
}

func (x *UserData) GetUserProduceIdolCardList() []*ptransaction.UserProduceIdolCard {
	if x != nil {
		return x.UserProduceIdolCardList
	}
	return nil
}

func (x *UserData) GetUserProduceItemList() []*ptransaction.UserProduceItem {
	if x != nil {
		return x.UserProduceItemList
	}
	return nil
}

func (x *UserData) GetUserProduceLiveList() []*ptransaction.UserProduceLive {
	if x != nil {
		return x.UserProduceLiveList
	}
	return nil
}

func (x *UserData) GetUserProduceMemoryDeckList() []*ptransaction.UserProduceMemoryDeck {
	if x != nil {
		return x.UserProduceMemoryDeckList
	}
	return nil
}

func (x *UserData) GetUserProduceProgress() *ptransaction.UserProduceProgress {
	if x != nil {
		return x.UserProduceProgress
	}
	return nil
}

func (x *UserData) GetUserProduceProgressAudition() *ptransaction.UserProduceProgressAudition {
	if x != nil {
		return x.UserProduceProgressAudition
	}
	return nil
}

func (x *UserData) GetUserProduceProgressBusinessList() []*ptransaction.UserProduceProgressBusiness {
	if x != nil {
		return x.UserProduceProgressBusinessList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressEffectList() []*ptransaction.UserProduceProgressEffect {
	if x != nil {
		return x.UserProduceProgressEffectList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressEventList() []*ptransaction.UserProduceProgressEvent {
	if x != nil {
		return x.UserProduceProgressEventList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressMemoryList() []*ptransaction.UserProduceProgressMemory {
	if x != nil {
		return x.UserProduceProgressMemoryList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressPresentList() []*ptransaction.UserProduceProgressPresent {
	if x != nil {
		return x.UserProduceProgressPresentList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressProduceCardList() []*ptransaction.UserProduceProgressProduceCard {
	if x != nil {
		return x.UserProduceProgressProduceCardList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressScheduleList() []*ptransaction.UserProduceProgressSchedule {
	if x != nil {
		return x.UserProduceProgressScheduleList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressShopList() []*ptransaction.UserProduceProgressShop {
	if x != nil {
		return x.UserProduceProgressShopList
	}
	return nil
}

func (x *UserData) GetUserProduceProgressSupportCardList() []*ptransaction.UserProduceProgressSupportCard {
	if x != nil {
		return x.UserProduceProgressSupportCardList
	}
	return nil
}

func (x *UserData) GetUserProduceRerollMemoryList() []*ptransaction.UserProduceRerollMemory {
	if x != nil {
		return x.UserProduceRerollMemoryList
	}
	return nil
}

func (x *UserData) GetUserProduceStartAchievementList() []*ptransaction.UserProduceStartAchievement {
	if x != nil {
		return x.UserProduceStartAchievementList
	}
	return nil
}

func (x *UserData) GetUserProduceStoryList() []*ptransaction.UserProduceStory {
	if x != nil {
		return x.UserProduceStoryList
	}
	return nil
}

func (x *UserData) GetUserProduceSupportCardDeckList() []*ptransaction.UserProduceSupportCardDeck {
	if x != nil {
		return x.UserProduceSupportCardDeckList
	}
	return nil
}

func (x *UserData) GetUserProfile() *ptransaction.UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

func (x *UserData) GetUserPvpRate() *ptransaction.UserPvpRate {
	if x != nil {
		return x.UserPvpRate
	}
	return nil
}

func (x *UserData) GetUserPvpRateUnit() *ptransaction.UserPvpRateUnit {
	if x != nil {
		return x.UserPvpRateUnit
	}
	return nil
}

func (x *UserData) GetUserShopItemList() []*ptransaction.UserShopItem {
	if x != nil {
		return x.UserShopItemList
	}
	return nil
}

func (x *UserData) GetUserStoryList() []*ptransaction.UserStory {
	if x != nil {
		return x.UserStoryList
	}
	return nil
}

func (x *UserData) GetUserSupportCardList() []*ptransaction.UserSupportCard {
	if x != nil {
		return x.UserSupportCardList
	}
	return nil
}

func (x *UserData) GetUserTimeList() []*ptransaction.UserTime {
	if x != nil {
		return x.UserTimeList
	}
	return nil
}

func (x *UserData) GetUserTowerList() []*ptransaction.UserTower {
	if x != nil {
		return x.UserTowerList
	}
	return nil
}

func (x *UserData) GetUserTutorialList() []*ptransaction.UserTutorial {
	if x != nil {
		return x.UserTutorialList
	}
	return nil
}

func (x *UserData) GetUserWorkList() []*ptransaction.UserWork {
	if x != nil {
		return x.UserWorkList
	}
	return nil
}

func (x *UserData) GetUserWorkCharacterList() []*ptransaction.UserWorkCharacter {
	if x != nil {
		return x.UserWorkCharacterList
	}
	return nil
}

var File_papicommon_proto protoreflect.FileDescriptor

var file_papicommon_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x70, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x0b,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a,
	0x13, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x45, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x10, 0x50, 0x76, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x12, 0x3e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x70,
	0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x53, 0x0a, 0x14, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x14,
	0x64, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x22, 0x7a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x9b, 0x33, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0xb6, 0xcc, 0xbe, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xb2, 0xdd, 0xd1,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x85, 0x95,
	0x95, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x97, 0xaa, 0x9f, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xbf,
	0xcd, 0xc5, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xa8, 0xfd, 0xe1, 0xb0,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0xe1, 0xf2, 0xeb, 0x95, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x52,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x17, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x8e, 0xa3, 0x8d, 0xd6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xf7,
	0xe2, 0x9c, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x65,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x94, 0xcd, 0x8c, 0xe0, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xdc, 0xe7, 0xd0, 0xb2, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xcf, 0xf8, 0xc8, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0xc2, 0xf5, 0xdc, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xee, 0xbd, 0xa5, 0x98, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0xb1, 0xf6, 0x86, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x58, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xc0, 0xf8, 0x8e, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x8f,
	0xc8, 0xfe, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xc7, 0x84,
	0xdc, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf9,
	0xbf, 0xd9, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x9b, 0x82, 0xce, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73,
	0x68, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x9b, 0xc2, 0x90, 0xbb, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xe1, 0xdf, 0x82, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x1f, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xb7, 0x80,
	0xe6, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69,
	0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x94, 0xc5, 0x8c, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0xf4, 0x83, 0xef,
	0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xa8, 0xf7,
	0x83, 0x54, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x79, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xcc, 0xf7, 0x80, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xfe, 0xb3, 0xf4, 0xa6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xa8, 0xb5, 0xb5,
	0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xfa, 0xea, 0x93, 0xab, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x88, 0xeb, 0xb1, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x93, 0xea, 0xa8, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x41,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x80, 0xa0, 0xd8, 0xb9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0xec, 0xd9, 0xb7, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xd4, 0xa8, 0xb8, 0x89, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x81, 0x95, 0xab, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x17,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xcb, 0xc1, 0xbc,
	0xd1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50,
	0x6f, 0x73, 0x65, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0xd6, 0xe7, 0xaa, 0x8d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x46, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x81, 0xf3, 0xae, 0x51, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x64, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xf6,
	0xfe, 0xd0, 0x85, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x41, 0x64, 0x76, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x41, 0x64, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0xc8, 0xd7, 0xf7, 0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65,
	0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xa6, 0x80, 0xfa, 0xad,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x19, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0xce, 0xd6, 0xed, 0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0xf5, 0xb0, 0xba, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x70, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0xf1, 0x83, 0x9d, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x52, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xe9, 0xc5,
	0xbc, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x8c, 0xb2, 0x9f, 0x2f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xd0, 0xb2,
	0x95, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x19, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x80, 0xf9, 0xac, 0x4d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x19, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xc5, 0xb3, 0xb8, 0xb2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6f, 0x0a, 0x1b, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x94, 0xe8, 0xd9, 0xfd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1f, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xe4,
	0xd5, 0x98, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0xaf, 0xcc, 0xd3, 0x96, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x80, 0x93, 0x97, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xfd, 0xb2, 0xdc, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xea, 0x83, 0xf0, 0xa6, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x1e, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x80, 0x01,
	0x0a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x8c, 0x80, 0xd3, 0x93, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x22, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x76, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0xc4, 0x99, 0xdc, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xb8, 0xdc, 0xc6, 0xed, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x68, 0x6f,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xf4, 0x84, 0x98, 0x7a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x22, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xb1, 0xb6, 0x99, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xce, 0xec, 0xf5, 0x7b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1f, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0xd5, 0xaf, 0xfb, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x74, 0x0a, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0xdd, 0xec, 0xc2, 0x88, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x1e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xd6, 0xb4, 0xea, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x85, 0xdd, 0xee, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xd1, 0xcd, 0xcc, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xeb, 0xb8, 0xa0, 0xd9, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0xd5, 0xfe, 0xba, 0xb3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xc4, 0xb2, 0x88, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x8c, 0xd1, 0xf1, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xd1, 0xcf, 0x8f, 0x80, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xf6,
	0xfe, 0x82, 0x60, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xe1, 0xbf, 0xb0, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x83, 0xe6,
	0xf0, 0x5b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x22,
	0x5a, 0x20, 0x76, 0x65, 0x72, 0x74, 0x65, 0x73, 0x61, 0x6e, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x75,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_papicommon_proto_rawDescOnce sync.Once
	file_papicommon_proto_rawDescData = file_papicommon_proto_rawDesc
)

func file_papicommon_proto_rawDescGZIP() []byte {
	file_papicommon_proto_rawDescOnce.Do(func() {
		file_papicommon_proto_rawDescData = protoimpl.X.CompressGZIP(file_papicommon_proto_rawDescData)
	})
	return file_papicommon_proto_rawDescData
}

var file_papicommon_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_papicommon_proto_goTypes = []interface{}{
	(*DearnessStoryUnlock)(nil),                         // 0: papicommon.DearnessStoryUnlock
	(*Mission)(nil),                                     // 1: papicommon.Mission
	(*PvpRateSeasonTop)(nil),                            // 2: papicommon.PvpRateSeasonTop
	(*Response)(nil),                                    // 3: papicommon.Response
	(*StoryEventReward)(nil),                            // 4: papicommon.StoryEventReward
	(*UserData)(nil),                                    // 5: papicommon.UserData
	(penum.PvpRateSeasonStatusType)(0),                  // 6: penum.PvpRateSeasonStatusType
	(*pmaster.Mission)(nil),                             // 7: pmaster.Mission
	(*pcommon.ProducerLevelUnlock)(nil),                 // 8: pcommon.ProducerLevelUnlock
	(*pcommon.StoryEventPointReward)(nil),               // 9: pcommon.StoryEventPointReward
	(*ptransaction.User)(nil),                           // 10: ptransaction.User
	(*ptransaction.UserActionPoint)(nil),                // 11: ptransaction.UserActionPoint
	(*ptransaction.UserAuthProvider)(nil),               // 12: ptransaction.UserAuthProvider
	(*ptransaction.UserBalance)(nil),                    // 13: ptransaction.UserBalance
	(*ptransaction.UserBanWarning)(nil),                 // 14: ptransaction.UserBanWarning
	(*ptransaction.UserCharacter)(nil),                  // 15: ptransaction.UserCharacter
	(*ptransaction.UserCharacterCostume)(nil),           // 16: ptransaction.UserCharacterCostume
	(*ptransaction.UserCharacterRoster)(nil),            // 17: ptransaction.UserCharacterRoster
	(*ptransaction.UserComeback)(nil),                   // 18: ptransaction.UserComeback
	(*ptransaction.UserCostume)(nil),                    // 19: ptransaction.UserCostume
	(*ptransaction.UserCostumeHead)(nil),                // 20: ptransaction.UserCostumeHead
	(*ptransaction.UserCount)(nil),                      // 21: ptransaction.UserCount
	(*ptransaction.UserDearnessStory)(nil),              // 22: ptransaction.UserDearnessStory
	(*ptransaction.UserGashaButton)(nil),                // 23: ptransaction.UserGashaButton
	(*ptransaction.UserGuild)(nil),                      // 24: ptransaction.UserGuild
	(*ptransaction.UserHomeCharacter)(nil),              // 25: ptransaction.UserHomeCharacter
	(*ptransaction.UserIdolCard)(nil),                   // 26: ptransaction.UserIdolCard
	(*ptransaction.UserIdolCardSkin)(nil),               // 27: ptransaction.UserIdolCardSkin
	(*ptransaction.UserInvitation)(nil),                 // 28: ptransaction.UserInvitation
	(*ptransaction.UserItem)(nil),                       // 29: ptransaction.UserItem
	(*ptransaction.UserMeishi)(nil),                     // 30: ptransaction.UserMeishi
	(*ptransaction.UserMeishiBaseAsset)(nil),            // 31: ptransaction.UserMeishiBaseAsset
	(*ptransaction.UserMeishiIllustrationAsset)(nil),    // 32: ptransaction.UserMeishiIllustrationAsset
	(*ptransaction.UserMemory)(nil),                     // 33: ptransaction.UserMemory
	(*ptransaction.UserMemoryInherit)(nil),              // 34: ptransaction.UserMemoryInherit
	(*ptransaction.UserMission)(nil),                    // 35: ptransaction.UserMission
	(*ptransaction.UserMissionDailyReleaseGroup)(nil),   // 36: ptransaction.UserMissionDailyReleaseGroup
	(*ptransaction.UserMissionGroup)(nil),               // 37: ptransaction.UserMissionGroup
	(*ptransaction.UserMissionPass)(nil),                // 38: ptransaction.UserMissionPass
	(*ptransaction.UserMissionPassPoint)(nil),           // 39: ptransaction.UserMissionPassPoint
	(*ptransaction.UserMissionPoint)(nil),               // 40: ptransaction.UserMissionPoint
	(*ptransaction.UserMoney)(nil),                      // 41: ptransaction.UserMoney
	(*ptransaction.UserMovie)(nil),                      // 42: ptransaction.UserMovie
	(*ptransaction.UserMusic)(nil),                      // 43: ptransaction.UserMusic
	(*ptransaction.UserPhoto)(nil),                      // 44: ptransaction.UserPhoto
	(*ptransaction.UserPhotoBackground)(nil),            // 45: ptransaction.UserPhotoBackground
	(*ptransaction.UserPhotoPose)(nil),                  // 46: ptransaction.UserPhotoPose
	(*ptransaction.UserPreference)(nil),                 // 47: ptransaction.UserPreference
	(*ptransaction.UserProduce)(nil),                    // 48: ptransaction.UserProduce
	(*ptransaction.UserProduceAdv)(nil),                 // 49: ptransaction.UserProduceAdv
	(*ptransaction.UserProduceCard)(nil),                // 50: ptransaction.UserProduceCard
	(*ptransaction.UserProduceCardReward)(nil),          // 51: ptransaction.UserProduceCardReward
	(*ptransaction.UserProduceCharacter)(nil),           // 52: ptransaction.UserProduceCharacter
	(*ptransaction.UserProduceDrink)(nil),               // 53: ptransaction.UserProduceDrink
	(*ptransaction.UserProduceGroupCharacter)(nil),      // 54: ptransaction.UserProduceGroupCharacter
	(*ptransaction.UserProduceIdolCard)(nil),            // 55: ptransaction.UserProduceIdolCard
	(*ptransaction.UserProduceItem)(nil),                // 56: ptransaction.UserProduceItem
	(*ptransaction.UserProduceLive)(nil),                // 57: ptransaction.UserProduceLive
	(*ptransaction.UserProduceMemoryDeck)(nil),          // 58: ptransaction.UserProduceMemoryDeck
	(*ptransaction.UserProduceProgress)(nil),            // 59: ptransaction.UserProduceProgress
	(*ptransaction.UserProduceProgressAudition)(nil),    // 60: ptransaction.UserProduceProgressAudition
	(*ptransaction.UserProduceProgressBusiness)(nil),    // 61: ptransaction.UserProduceProgressBusiness
	(*ptransaction.UserProduceProgressEffect)(nil),      // 62: ptransaction.UserProduceProgressEffect
	(*ptransaction.UserProduceProgressEvent)(nil),       // 63: ptransaction.UserProduceProgressEvent
	(*ptransaction.UserProduceProgressMemory)(nil),      // 64: ptransaction.UserProduceProgressMemory
	(*ptransaction.UserProduceProgressPresent)(nil),     // 65: ptransaction.UserProduceProgressPresent
	(*ptransaction.UserProduceProgressProduceCard)(nil), // 66: ptransaction.UserProduceProgressProduceCard
	(*ptransaction.UserProduceProgressSchedule)(nil),    // 67: ptransaction.UserProduceProgressSchedule
	(*ptransaction.UserProduceProgressShop)(nil),        // 68: ptransaction.UserProduceProgressShop
	(*ptransaction.UserProduceProgressSupportCard)(nil), // 69: ptransaction.UserProduceProgressSupportCard
	(*ptransaction.UserProduceRerollMemory)(nil),        // 70: ptransaction.UserProduceRerollMemory
	(*ptransaction.UserProduceStartAchievement)(nil),    // 71: ptransaction.UserProduceStartAchievement
	(*ptransaction.UserProduceStory)(nil),               // 72: ptransaction.UserProduceStory
	(*ptransaction.UserProduceSupportCardDeck)(nil),     // 73: ptransaction.UserProduceSupportCardDeck
	(*ptransaction.UserProfile)(nil),                    // 74: ptransaction.UserProfile
	(*ptransaction.UserPvpRate)(nil),                    // 75: ptransaction.UserPvpRate
	(*ptransaction.UserPvpRateUnit)(nil),                // 76: ptransaction.UserPvpRateUnit
	(*ptransaction.UserShopItem)(nil),                   // 77: ptransaction.UserShopItem
	(*ptransaction.UserStory)(nil),                      // 78: ptransaction.UserStory
	(*ptransaction.UserSupportCard)(nil),                // 79: ptransaction.UserSupportCard
	(*ptransaction.UserTime)(nil),                       // 80: ptransaction.UserTime
	(*ptransaction.UserTower)(nil),                      // 81: ptransaction.UserTower
	(*ptransaction.UserTutorial)(nil),                   // 82: ptransaction.UserTutorial
	(*ptransaction.UserWork)(nil),                       // 83: ptransaction.UserWork
	(*ptransaction.UserWorkCharacter)(nil),              // 84: ptransaction.UserWorkCharacter
}
var file_papicommon_proto_depIdxs = []int32{
	6,  // 0: papicommon.PvpRateSeasonTop.statusType:type_name -> penum.PvpRateSeasonStatusType
	5,  // 1: papicommon.Response.updatedData:type_name -> papicommon.UserData
	5,  // 2: papicommon.Response.deletedData:type_name -> papicommon.UserData
	7,  // 3: papicommon.Response.clearMissions:type_name -> pmaster.Mission
	8,  // 4: papicommon.Response.producerLevelUnlocks:type_name -> pcommon.ProducerLevelUnlock
	0,  // 5: papicommon.Response.dearnessStoryUnlocks:type_name -> papicommon.DearnessStoryUnlock
	4,  // 6: papicommon.Response.storyEventRewards:type_name -> papicommon.StoryEventReward
	9,  // 7: papicommon.StoryEventReward.pointRewards:type_name -> pcommon.StoryEventPointReward
	10, // 8: papicommon.UserData.user:type_name -> ptransaction.User
	11, // 9: papicommon.UserData.userActionPoint:type_name -> ptransaction.UserActionPoint
	12, // 10: papicommon.UserData.userAuthProviderList:type_name -> ptransaction.UserAuthProvider
	13, // 11: papicommon.UserData.userBalance:type_name -> ptransaction.UserBalance
	14, // 12: papicommon.UserData.userBanWarning:type_name -> ptransaction.UserBanWarning
	15, // 13: papicommon.UserData.userCharacterList:type_name -> ptransaction.UserCharacter
	16, // 14: papicommon.UserData.userCharacterCostumeList:type_name -> ptransaction.UserCharacterCostume
	17, // 15: papicommon.UserData.userCharacterRosterList:type_name -> ptransaction.UserCharacterRoster
	18, // 16: papicommon.UserData.userComebackList:type_name -> ptransaction.UserComeback
	19, // 17: papicommon.UserData.userCostumeList:type_name -> ptransaction.UserCostume
	20, // 18: papicommon.UserData.userCostumeHeadList:type_name -> ptransaction.UserCostumeHead
	21, // 19: papicommon.UserData.userCountList:type_name -> ptransaction.UserCount
	22, // 20: papicommon.UserData.userDearnessStoryList:type_name -> ptransaction.UserDearnessStory
	23, // 21: papicommon.UserData.userGashaButtonList:type_name -> ptransaction.UserGashaButton
	24, // 22: papicommon.UserData.userGuild:type_name -> ptransaction.UserGuild
	25, // 23: papicommon.UserData.userHomeCharacterList:type_name -> ptransaction.UserHomeCharacter
	26, // 24: papicommon.UserData.userIdolCardList:type_name -> ptransaction.UserIdolCard
	27, // 25: papicommon.UserData.userIdolCardSkinList:type_name -> ptransaction.UserIdolCardSkin
	28, // 26: papicommon.UserData.userInvitation:type_name -> ptransaction.UserInvitation
	29, // 27: papicommon.UserData.userItemList:type_name -> ptransaction.UserItem
	30, // 28: papicommon.UserData.userMeishiList:type_name -> ptransaction.UserMeishi
	31, // 29: papicommon.UserData.userMeishiBaseAssetList:type_name -> ptransaction.UserMeishiBaseAsset
	32, // 30: papicommon.UserData.userMeishiIllustrationAssetList:type_name -> ptransaction.UserMeishiIllustrationAsset
	33, // 31: papicommon.UserData.userMemoryList:type_name -> ptransaction.UserMemory
	34, // 32: papicommon.UserData.userMemoryInherit:type_name -> ptransaction.UserMemoryInherit
	35, // 33: papicommon.UserData.userMissionList:type_name -> ptransaction.UserMission
	36, // 34: papicommon.UserData.userMissionDailyReleaseGroupList:type_name -> ptransaction.UserMissionDailyReleaseGroup
	37, // 35: papicommon.UserData.userMissionGroupList:type_name -> ptransaction.UserMissionGroup
	38, // 36: papicommon.UserData.userMissionPassList:type_name -> ptransaction.UserMissionPass
	39, // 37: papicommon.UserData.userMissionPassPointList:type_name -> ptransaction.UserMissionPassPoint
	40, // 38: papicommon.UserData.userMissionPointList:type_name -> ptransaction.UserMissionPoint
	41, // 39: papicommon.UserData.userMoney:type_name -> ptransaction.UserMoney
	42, // 40: papicommon.UserData.userMovieList:type_name -> ptransaction.UserMovie
	43, // 41: papicommon.UserData.userMusicList:type_name -> ptransaction.UserMusic
	44, // 42: papicommon.UserData.userPhotoList:type_name -> ptransaction.UserPhoto
	45, // 43: papicommon.UserData.userPhotoBackgroundList:type_name -> ptransaction.UserPhotoBackground
	46, // 44: papicommon.UserData.userPhotoPoseList:type_name -> ptransaction.UserPhotoPose
	47, // 45: papicommon.UserData.userPreference:type_name -> ptransaction.UserPreference
	48, // 46: papicommon.UserData.userProduceList:type_name -> ptransaction.UserProduce
	49, // 47: papicommon.UserData.userProduceAdvList:type_name -> ptransaction.UserProduceAdv
	50, // 48: papicommon.UserData.userProduceCardList:type_name -> ptransaction.UserProduceCard
	51, // 49: papicommon.UserData.userProduceCardRewardList:type_name -> ptransaction.UserProduceCardReward
	52, // 50: papicommon.UserData.userProduceCharacterList:type_name -> ptransaction.UserProduceCharacter
	53, // 51: papicommon.UserData.userProduceDrinkList:type_name -> ptransaction.UserProduceDrink
	54, // 52: papicommon.UserData.userProduceGroupCharacterList:type_name -> ptransaction.UserProduceGroupCharacter
	55, // 53: papicommon.UserData.userProduceIdolCardList:type_name -> ptransaction.UserProduceIdolCard
	56, // 54: papicommon.UserData.userProduceItemList:type_name -> ptransaction.UserProduceItem
	57, // 55: papicommon.UserData.userProduceLiveList:type_name -> ptransaction.UserProduceLive
	58, // 56: papicommon.UserData.userProduceMemoryDeckList:type_name -> ptransaction.UserProduceMemoryDeck
	59, // 57: papicommon.UserData.userProduceProgress:type_name -> ptransaction.UserProduceProgress
	60, // 58: papicommon.UserData.userProduceProgressAudition:type_name -> ptransaction.UserProduceProgressAudition
	61, // 59: papicommon.UserData.userProduceProgressBusinessList:type_name -> ptransaction.UserProduceProgressBusiness
	62, // 60: papicommon.UserData.userProduceProgressEffectList:type_name -> ptransaction.UserProduceProgressEffect
	63, // 61: papicommon.UserData.userProduceProgressEventList:type_name -> ptransaction.UserProduceProgressEvent
	64, // 62: papicommon.UserData.userProduceProgressMemoryList:type_name -> ptransaction.UserProduceProgressMemory
	65, // 63: papicommon.UserData.userProduceProgressPresentList:type_name -> ptransaction.UserProduceProgressPresent
	66, // 64: papicommon.UserData.userProduceProgressProduceCardList:type_name -> ptransaction.UserProduceProgressProduceCard
	67, // 65: papicommon.UserData.userProduceProgressScheduleList:type_name -> ptransaction.UserProduceProgressSchedule
	68, // 66: papicommon.UserData.userProduceProgressShopList:type_name -> ptransaction.UserProduceProgressShop
	69, // 67: papicommon.UserData.userProduceProgressSupportCardList:type_name -> ptransaction.UserProduceProgressSupportCard
	70, // 68: papicommon.UserData.userProduceRerollMemoryList:type_name -> ptransaction.UserProduceRerollMemory
	71, // 69: papicommon.UserData.userProduceStartAchievementList:type_name -> ptransaction.UserProduceStartAchievement
	72, // 70: papicommon.UserData.userProduceStoryList:type_name -> ptransaction.UserProduceStory
	73, // 71: papicommon.UserData.userProduceSupportCardDeckList:type_name -> ptransaction.UserProduceSupportCardDeck
	74, // 72: papicommon.UserData.userProfile:type_name -> ptransaction.UserProfile
	75, // 73: papicommon.UserData.userPvpRate:type_name -> ptransaction.UserPvpRate
	76, // 74: papicommon.UserData.userPvpRateUnit:type_name -> ptransaction.UserPvpRateUnit
	77, // 75: papicommon.UserData.userShopItemList:type_name -> ptransaction.UserShopItem
	78, // 76: papicommon.UserData.userStoryList:type_name -> ptransaction.UserStory
	79, // 77: papicommon.UserData.userSupportCardList:type_name -> ptransaction.UserSupportCard
	80, // 78: papicommon.UserData.userTimeList:type_name -> ptransaction.UserTime
	81, // 79: papicommon.UserData.userTowerList:type_name -> ptransaction.UserTower
	82, // 80: papicommon.UserData.userTutorialList:type_name -> ptransaction.UserTutorial
	83, // 81: papicommon.UserData.userWorkList:type_name -> ptransaction.UserWork
	84, // 82: papicommon.UserData.userWorkCharacterList:type_name -> ptransaction.UserWorkCharacter
	83, // [83:83] is the sub-list for method output_type
	83, // [83:83] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_papicommon_proto_init() }
func file_papicommon_proto_init() {
	if File_papicommon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_papicommon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DearnessStoryUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papicommon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papicommon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateSeasonTop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papicommon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papicommon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryEventReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_papicommon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_papicommon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_papicommon_proto_goTypes,
		DependencyIndexes: file_papicommon_proto_depIdxs,
		MessageInfos:      file_papicommon_proto_msgTypes,
	}.Build()
	File_papicommon_proto = out.File
	file_papicommon_proto_rawDesc = nil
	file_papicommon_proto_goTypes = nil
	file_papicommon_proto_depIdxs = nil
}
