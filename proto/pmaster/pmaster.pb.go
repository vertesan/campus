// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: pmaster.proto

package pmaster

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	pcommon "vertesan/campus/proto/pcommon"
	penum "vertesan/campus/proto/penum"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Category                     penum.AchievementCategory `protobuf:"varint,2,opt,name=category,proto3,enum=penum.AchievementCategory" json:"category,omitempty"`
	Name                         string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description                  string                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MissionType                  penum.MissionType         `protobuf:"varint,6,opt,name=missionType,proto3,enum=penum.MissionType" json:"missionType,omitempty"`
	TargetIds1                   []string                  `protobuf:"bytes,7,rep,name=targetIds1,proto3" json:"targetIds1,omitempty"`
	TargetIds2                   []string                  `protobuf:"bytes,8,rep,name=targetIds2,proto3" json:"targetIds2,omitempty"`
	TargetIds3                   []string                  `protobuf:"bytes,9,rep,name=targetIds3,proto3" json:"targetIds3,omitempty"`
	TargetValue                  int32                     `protobuf:"varint,10,opt,name=targetValue,proto3" json:"targetValue,omitempty"`
	ViewConditionSetId           string                    `protobuf:"bytes,11,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId         string                    `protobuf:"bytes,12,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	MasterAchievementInitialRank int32                     `protobuf:"varint,13,opt,name=masterAchievementInitialRank,proto3" json:"masterAchievementInitialRank,omitempty"`
	IsTrueEndAchievement         bool                      `protobuf:"varint,15,opt,name=isTrueEndAchievement,proto3" json:"isTrueEndAchievement,omitempty"`
	IsMasterAchievement          bool                      `protobuf:"varint,16,opt,name=isMasterAchievement,proto3" json:"isMasterAchievement,omitempty"`
	CharacterId                  string                    `protobuf:"bytes,17,opt,name=characterId,proto3" json:"characterId,omitempty"`
	ViewProduceResult            bool                      `protobuf:"varint,18,opt,name=viewProduceResult,proto3" json:"viewProduceResult,omitempty"`
	Order                        int32                     `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{0}
}

func (x *Achievement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Achievement) GetCategory() penum.AchievementCategory {
	if x != nil {
		return x.Category
	}
	return penum.AchievementCategory(0)
}

func (x *Achievement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Achievement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Achievement) GetMissionType() penum.MissionType {
	if x != nil {
		return x.MissionType
	}
	return penum.MissionType(0)
}

func (x *Achievement) GetTargetIds1() []string {
	if x != nil {
		return x.TargetIds1
	}
	return nil
}

func (x *Achievement) GetTargetIds2() []string {
	if x != nil {
		return x.TargetIds2
	}
	return nil
}

func (x *Achievement) GetTargetIds3() []string {
	if x != nil {
		return x.TargetIds3
	}
	return nil
}

func (x *Achievement) GetTargetValue() int32 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *Achievement) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Achievement) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Achievement) GetMasterAchievementInitialRank() int32 {
	if x != nil {
		return x.MasterAchievementInitialRank
	}
	return 0
}

func (x *Achievement) GetIsTrueEndAchievement() bool {
	if x != nil {
		return x.IsTrueEndAchievement
	}
	return false
}

func (x *Achievement) GetIsMasterAchievement() bool {
	if x != nil {
		return x.IsMasterAchievement
	}
	return false
}

func (x *Achievement) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *Achievement) GetViewProduceResult() bool {
	if x != nil {
		return x.ViewProduceResult
	}
	return false
}

func (x *Achievement) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AchievementList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*pcommon.Achievement `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AchievementList) Reset() {
	*x = AchievementList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementList) ProtoMessage() {}

func (x *AchievementList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementList.ProtoReflect.Descriptor instead.
func (*AchievementList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{1}
}

func (x *AchievementList) GetList() []*pcommon.Achievement {
	if x != nil {
		return x.List
	}
	return nil
}

type AchievementProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId string            `protobuf:"bytes,1,opt,name=achievementId,proto3" json:"achievementId,omitempty"`
	Threshold     int32             `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	AssetId       string            `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Rewards       []*pcommon.Reward `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Index         int32             `protobuf:"varint,99,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *AchievementProgress) Reset() {
	*x = AchievementProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementProgress) ProtoMessage() {}

func (x *AchievementProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementProgress.ProtoReflect.Descriptor instead.
func (*AchievementProgress) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{2}
}

func (x *AchievementProgress) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *AchievementProgress) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AchievementProgress) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *AchievementProgress) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *AchievementProgress) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AchievementProgressList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AchievementProgress `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AchievementProgressList) Reset() {
	*x = AchievementProgressList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementProgressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementProgressList) ProtoMessage() {}

func (x *AchievementProgressList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementProgressList.ProtoReflect.Descriptor instead.
func (*AchievementProgressList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{3}
}

func (x *AchievementProgressList) GetList() []*AchievementProgress {
	if x != nil {
		return x.List
	}
	return nil
}

type AppReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                         penum.AppReviewType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.AppReviewType" json:"type,omitempty"`
	ConditionSetId               string              `protobuf:"bytes,2,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
	GashaId                      string              `protobuf:"bytes,3,opt,name=gashaId,proto3" json:"gashaId,omitempty"`
	MainTaskGroupId              string              `protobuf:"bytes,4,opt,name=mainTaskGroupId,proto3" json:"mainTaskGroupId,omitempty"`
	MainTaskNumber               int32               `protobuf:"varint,5,opt,name=mainTaskNumber,proto3" json:"mainTaskNumber,omitempty"`
	AchievementId                string              `protobuf:"bytes,6,opt,name=achievementId,proto3" json:"achievementId,omitempty"`
	AchievementProgressThreshold int32               `protobuf:"varint,7,opt,name=achievementProgressThreshold,proto3" json:"achievementProgressThreshold,omitempty"`
	ProduceId                    string              `protobuf:"bytes,8,opt,name=produceId,proto3" json:"produceId,omitempty"`
}

func (x *AppReview) Reset() {
	*x = AppReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppReview) ProtoMessage() {}

func (x *AppReview) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppReview.ProtoReflect.Descriptor instead.
func (*AppReview) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{4}
}

func (x *AppReview) GetType() penum.AppReviewType {
	if x != nil {
		return x.Type
	}
	return penum.AppReviewType(0)
}

func (x *AppReview) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

func (x *AppReview) GetGashaId() string {
	if x != nil {
		return x.GashaId
	}
	return ""
}

func (x *AppReview) GetMainTaskGroupId() string {
	if x != nil {
		return x.MainTaskGroupId
	}
	return ""
}

func (x *AppReview) GetMainTaskNumber() int32 {
	if x != nil {
		return x.MainTaskNumber
	}
	return 0
}

func (x *AppReview) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *AppReview) GetAchievementProgressThreshold() int32 {
	if x != nil {
		return x.AchievementProgressThreshold
	}
	return 0
}

func (x *AppReview) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

type AppReviewList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AppReview `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AppReviewList) Reset() {
	*x = AppReviewList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppReviewList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppReviewList) ProtoMessage() {}

func (x *AppReviewList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppReviewList.ProtoReflect.Descriptor instead.
func (*AppReviewList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{5}
}

func (x *AppReviewList) GetList() []*AppReview {
	if x != nil {
		return x.List
	}
	return nil
}

type AssetDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type penum.AssetDownloadType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.AssetDownloadType" json:"type,omitempty"`
}

func (x *AssetDownload) Reset() {
	*x = AssetDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetDownload) ProtoMessage() {}

func (x *AssetDownload) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetDownload.ProtoReflect.Descriptor instead.
func (*AssetDownload) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{6}
}

func (x *AssetDownload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssetDownload) GetType() penum.AssetDownloadType {
	if x != nil {
		return x.Type
	}
	return penum.AssetDownloadType(0)
}

type AssetDownloadList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AssetDownload `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AssetDownloadList) Reset() {
	*x = AssetDownloadList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetDownloadList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetDownloadList) ProtoMessage() {}

func (x *AssetDownloadList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetDownloadList.ProtoReflect.Descriptor instead.
func (*AssetDownloadList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{7}
}

func (x *AssetDownloadList) GetList() []*AssetDownload {
	if x != nil {
		return x.List
	}
	return nil
}

type Bgm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          string `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	BgmAssetId    string `protobuf:"bytes,4,opt,name=bgmAssetId,proto3" json:"bgmAssetId,omitempty"`
	Order         int32  `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
	ViewStartTime int64  `protobuf:"varint,100,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	ViewEndTime   int64  `protobuf:"varint,101,opt,name=viewEndTime,proto3" json:"viewEndTime,omitempty"`
}

func (x *Bgm) Reset() {
	*x = Bgm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgm) ProtoMessage() {}

func (x *Bgm) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgm.ProtoReflect.Descriptor instead.
func (*Bgm) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{8}
}

func (x *Bgm) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *Bgm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bgm) GetBgmAssetId() string {
	if x != nil {
		return x.BgmAssetId
	}
	return ""
}

func (x *Bgm) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Bgm) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *Bgm) GetViewEndTime() int64 {
	if x != nil {
		return x.ViewEndTime
	}
	return 0
}

type BgmList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Bgm `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BgmList) Reset() {
	*x = BgmList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgmList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgmList) ProtoMessage() {}

func (x *BgmList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgmList.ProtoReflect.Descriptor instead.
func (*BgmList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{9}
}

func (x *BgmList) GetList() []*Bgm {
	if x != nil {
		return x.List
	}
	return nil
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LastName                            string                         `protobuf:"bytes,2,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FirstName                           string                         `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	AlphabetLastName                    string                         `protobuf:"bytes,4,opt,name=alphabetLastName,proto3" json:"alphabetLastName,omitempty"`
	AlphabetFirstName                   string                         `protobuf:"bytes,5,opt,name=alphabetFirstName,proto3" json:"alphabetFirstName,omitempty"`
	IsPlayable                          bool                           `protobuf:"varint,6,opt,name=isPlayable,proto3" json:"isPlayable,omitempty"`
	PersonalityType                     penum.CharacterPersonalityType `protobuf:"varint,7,opt,name=personalityType,proto3,enum=penum.CharacterPersonalityType" json:"personalityType,omitempty"`
	CharacterTrueEndBonusId             string                         `protobuf:"bytes,8,opt,name=characterTrueEndBonusId,proto3" json:"characterTrueEndBonusId,omitempty"`
	AchievementIds                      []string                       `protobuf:"bytes,12,rep,name=achievementIds,proto3" json:"achievementIds,omitempty"`
	MasterAchievementId                 string                         `protobuf:"bytes,15,opt,name=masterAchievementId,proto3" json:"masterAchievementId,omitempty"`
	IdolCardIds                         []string                       `protobuf:"bytes,16,rep,name=idolCardIds,proto3" json:"idolCardIds,omitempty"`
	SupportCardIds                      []string                       `protobuf:"bytes,17,rep,name=supportCardIds,proto3" json:"supportCardIds,omitempty"`
	ViewConditionSetId                  string                         `protobuf:"bytes,19,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	NormalCostumeHeadId                 string                         `protobuf:"bytes,20,opt,name=normalCostumeHeadId,proto3" json:"normalCostumeHeadId,omitempty"`
	TrainingCostumeHeadId               string                         `protobuf:"bytes,21,opt,name=trainingCostumeHeadId,proto3" json:"trainingCostumeHeadId,omitempty"`
	LiveCostumeHeadId                   string                         `protobuf:"bytes,22,opt,name=liveCostumeHeadId,proto3" json:"liveCostumeHeadId,omitempty"`
	NormalCostumeId                     string                         `protobuf:"bytes,23,opt,name=normalCostumeId,proto3" json:"normalCostumeId,omitempty"`
	TrainingCostumeId                   string                         `protobuf:"bytes,24,opt,name=trainingCostumeId,proto3" json:"trainingCostumeId,omitempty"`
	LiveCostumeId                       string                         `protobuf:"bytes,25,opt,name=liveCostumeId,proto3" json:"liveCostumeId,omitempty"`
	EventCharacterProduceStoryIds       []string                       `protobuf:"bytes,30,rep,name=eventCharacterProduceStoryIds,proto3" json:"eventCharacterProduceStoryIds,omitempty"`
	EventCharacterGrowthProduceStoryIds []string                       `protobuf:"bytes,31,rep,name=eventCharacterGrowthProduceStoryIds,proto3" json:"eventCharacterGrowthProduceStoryIds,omitempty"`
	EventActivityProduceStoryIds        []string                       `protobuf:"bytes,32,rep,name=eventActivityProduceStoryIds,proto3" json:"eventActivityProduceStoryIds,omitempty"`
	EventSchoolProduceStoryIds          []string                       `protobuf:"bytes,33,rep,name=eventSchoolProduceStoryIds,proto3" json:"eventSchoolProduceStoryIds,omitempty"`
	OtherStoryIds                       []string                       `protobuf:"bytes,34,rep,name=otherStoryIds,proto3" json:"otherStoryIds,omitempty"`
	EventCampaignProduceStoryIds        []string                       `protobuf:"bytes,35,rep,name=eventCampaignProduceStoryIds,proto3" json:"eventCampaignProduceStoryIds,omitempty"`
	PotentialRank1VoiceAssetId          string                         `protobuf:"bytes,40,opt,name=potentialRank1VoiceAssetId,proto3" json:"potentialRank1VoiceAssetId,omitempty"`
	PotentialRank3VoiceAssetId          string                         `protobuf:"bytes,41,opt,name=potentialRank3VoiceAssetId,proto3" json:"potentialRank3VoiceAssetId,omitempty"`
	PotentialRank4VoiceAssetId          string                         `protobuf:"bytes,42,opt,name=potentialRank4VoiceAssetId,proto3" json:"potentialRank4VoiceAssetId,omitempty"`
	StandingListPositionX               float32                        `protobuf:"fixed32,50,opt,name=standingListPositionX,proto3" json:"standingListPositionX,omitempty"`
	StandingListPositionY               float32                        `protobuf:"fixed32,51,opt,name=standingListPositionY,proto3" json:"standingListPositionY,omitempty"`
	RosterDetailPositionX               float32                        `protobuf:"fixed32,52,opt,name=rosterDetailPositionX,proto3" json:"rosterDetailPositionX,omitempty"`
	RosterDetailPositionY               float32                        `protobuf:"fixed32,53,opt,name=rosterDetailPositionY,proto3" json:"rosterDetailPositionY,omitempty"`
	StoryPositionX                      float32                        `protobuf:"fixed32,56,opt,name=storyPositionX,proto3" json:"storyPositionX,omitempty"`
	StoryPositionY                      float32                        `protobuf:"fixed32,57,opt,name=storyPositionY,proto3" json:"storyPositionY,omitempty"`
	ProduceHighScorePositionX           float32                        `protobuf:"fixed32,58,opt,name=produceHighScorePositionX,proto3" json:"produceHighScorePositionX,omitempty"`
	ProduceHighScorePositionY           float32                        `protobuf:"fixed32,59,opt,name=produceHighScorePositionY,proto3" json:"produceHighScorePositionY,omitempty"`
	Order                               int32                          `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{10}
}

func (x *Character) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Character) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Character) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Character) GetAlphabetLastName() string {
	if x != nil {
		return x.AlphabetLastName
	}
	return ""
}

func (x *Character) GetAlphabetFirstName() string {
	if x != nil {
		return x.AlphabetFirstName
	}
	return ""
}

func (x *Character) GetIsPlayable() bool {
	if x != nil {
		return x.IsPlayable
	}
	return false
}

func (x *Character) GetPersonalityType() penum.CharacterPersonalityType {
	if x != nil {
		return x.PersonalityType
	}
	return penum.CharacterPersonalityType(0)
}

func (x *Character) GetCharacterTrueEndBonusId() string {
	if x != nil {
		return x.CharacterTrueEndBonusId
	}
	return ""
}

func (x *Character) GetAchievementIds() []string {
	if x != nil {
		return x.AchievementIds
	}
	return nil
}

func (x *Character) GetMasterAchievementId() string {
	if x != nil {
		return x.MasterAchievementId
	}
	return ""
}

func (x *Character) GetIdolCardIds() []string {
	if x != nil {
		return x.IdolCardIds
	}
	return nil
}

func (x *Character) GetSupportCardIds() []string {
	if x != nil {
		return x.SupportCardIds
	}
	return nil
}

func (x *Character) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Character) GetNormalCostumeHeadId() string {
	if x != nil {
		return x.NormalCostumeHeadId
	}
	return ""
}

func (x *Character) GetTrainingCostumeHeadId() string {
	if x != nil {
		return x.TrainingCostumeHeadId
	}
	return ""
}

func (x *Character) GetLiveCostumeHeadId() string {
	if x != nil {
		return x.LiveCostumeHeadId
	}
	return ""
}

func (x *Character) GetNormalCostumeId() string {
	if x != nil {
		return x.NormalCostumeId
	}
	return ""
}

func (x *Character) GetTrainingCostumeId() string {
	if x != nil {
		return x.TrainingCostumeId
	}
	return ""
}

func (x *Character) GetLiveCostumeId() string {
	if x != nil {
		return x.LiveCostumeId
	}
	return ""
}

func (x *Character) GetEventCharacterProduceStoryIds() []string {
	if x != nil {
		return x.EventCharacterProduceStoryIds
	}
	return nil
}

func (x *Character) GetEventCharacterGrowthProduceStoryIds() []string {
	if x != nil {
		return x.EventCharacterGrowthProduceStoryIds
	}
	return nil
}

func (x *Character) GetEventActivityProduceStoryIds() []string {
	if x != nil {
		return x.EventActivityProduceStoryIds
	}
	return nil
}

func (x *Character) GetEventSchoolProduceStoryIds() []string {
	if x != nil {
		return x.EventSchoolProduceStoryIds
	}
	return nil
}

func (x *Character) GetOtherStoryIds() []string {
	if x != nil {
		return x.OtherStoryIds
	}
	return nil
}

func (x *Character) GetEventCampaignProduceStoryIds() []string {
	if x != nil {
		return x.EventCampaignProduceStoryIds
	}
	return nil
}

func (x *Character) GetPotentialRank1VoiceAssetId() string {
	if x != nil {
		return x.PotentialRank1VoiceAssetId
	}
	return ""
}

func (x *Character) GetPotentialRank3VoiceAssetId() string {
	if x != nil {
		return x.PotentialRank3VoiceAssetId
	}
	return ""
}

func (x *Character) GetPotentialRank4VoiceAssetId() string {
	if x != nil {
		return x.PotentialRank4VoiceAssetId
	}
	return ""
}

func (x *Character) GetStandingListPositionX() float32 {
	if x != nil {
		return x.StandingListPositionX
	}
	return 0
}

func (x *Character) GetStandingListPositionY() float32 {
	if x != nil {
		return x.StandingListPositionY
	}
	return 0
}

func (x *Character) GetRosterDetailPositionX() float32 {
	if x != nil {
		return x.RosterDetailPositionX
	}
	return 0
}

func (x *Character) GetRosterDetailPositionY() float32 {
	if x != nil {
		return x.RosterDetailPositionY
	}
	return 0
}

func (x *Character) GetStoryPositionX() float32 {
	if x != nil {
		return x.StoryPositionX
	}
	return 0
}

func (x *Character) GetStoryPositionY() float32 {
	if x != nil {
		return x.StoryPositionY
	}
	return 0
}

func (x *Character) GetProduceHighScorePositionX() float32 {
	if x != nil {
		return x.ProduceHighScorePositionX
	}
	return 0
}

func (x *Character) GetProduceHighScorePositionY() float32 {
	if x != nil {
		return x.ProduceHighScorePositionY
	}
	return 0
}

func (x *Character) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type CharacterAdv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Regexp      string `protobuf:"bytes,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
	NotIdol     bool   `protobuf:"varint,4,opt,name=notIdol,proto3" json:"notIdol,omitempty"`
}

func (x *CharacterAdv) Reset() {
	*x = CharacterAdv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterAdv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterAdv) ProtoMessage() {}

func (x *CharacterAdv) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterAdv.ProtoReflect.Descriptor instead.
func (*CharacterAdv) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{11}
}

func (x *CharacterAdv) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CharacterAdv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharacterAdv) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *CharacterAdv) GetNotIdol() bool {
	if x != nil {
		return x.NotIdol
	}
	return false
}

type CharacterAdvList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterAdv `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterAdvList) Reset() {
	*x = CharacterAdvList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterAdvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterAdvList) ProtoMessage() {}

func (x *CharacterAdvList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterAdvList.ProtoReflect.Descriptor instead.
func (*CharacterAdvList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{12}
}

func (x *CharacterAdvList) GetList() []*CharacterAdv {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	MainColor      string `protobuf:"bytes,2,opt,name=mainColor,proto3" json:"mainColor,omitempty"`
	GradientColor1 string `protobuf:"bytes,3,opt,name=gradientColor1,proto3" json:"gradientColor1,omitempty"`
	GradientColor2 string `protobuf:"bytes,4,opt,name=gradientColor2,proto3" json:"gradientColor2,omitempty"`
	TextColor      string `protobuf:"bytes,5,opt,name=textColor,proto3" json:"textColor,omitempty"`
	LabelTextColor string `protobuf:"bytes,6,opt,name=labelTextColor,proto3" json:"labelTextColor,omitempty"`
}

func (x *CharacterColor) Reset() {
	*x = CharacterColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterColor) ProtoMessage() {}

func (x *CharacterColor) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterColor.ProtoReflect.Descriptor instead.
func (*CharacterColor) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{13}
}

func (x *CharacterColor) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CharacterColor) GetMainColor() string {
	if x != nil {
		return x.MainColor
	}
	return ""
}

func (x *CharacterColor) GetGradientColor1() string {
	if x != nil {
		return x.GradientColor1
	}
	return ""
}

func (x *CharacterColor) GetGradientColor2() string {
	if x != nil {
		return x.GradientColor2
	}
	return ""
}

func (x *CharacterColor) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *CharacterColor) GetLabelTextColor() string {
	if x != nil {
		return x.LabelTextColor
	}
	return ""
}

type CharacterColorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterColor `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterColorList) Reset() {
	*x = CharacterColorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterColorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterColorList) ProtoMessage() {}

func (x *CharacterColorList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterColorList.ProtoReflect.Descriptor instead.
func (*CharacterColorList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{14}
}

func (x *CharacterColorList) GetList() []*CharacterColor {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterDearnessLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId                          string                                 `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	DearnessLevel                        int32                                  `protobuf:"varint,2,opt,name=dearnessLevel,proto3" json:"dearnessLevel,omitempty"`
	AdvAssetId                           string                                 `protobuf:"bytes,3,opt,name=advAssetId,proto3" json:"advAssetId,omitempty"`
	StoryId                              string                                 `protobuf:"bytes,4,opt,name=storyId,proto3" json:"storyId,omitempty"`
	ProduceConditionDescription          string                                 `protobuf:"bytes,6,opt,name=produceConditionDescription,proto3" json:"produceConditionDescription,omitempty"`
	ProduceConditionAchievementId        string                                 `protobuf:"bytes,7,opt,name=produceConditionAchievementId,proto3" json:"produceConditionAchievementId,omitempty"`
	ProduceConditionAchievementThreshold int32                                  `protobuf:"varint,8,opt,name=produceConditionAchievementThreshold,proto3" json:"produceConditionAchievementThreshold,omitempty"`
	ProduceSkills                        []*CharacterDearnessLevel_ProduceSkill `protobuf:"bytes,13,rep,name=produceSkills,proto3" json:"produceSkills,omitempty"`
	Rewards                              []*pcommon.Reward                      `protobuf:"bytes,17,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *CharacterDearnessLevel) Reset() {
	*x = CharacterDearnessLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterDearnessLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterDearnessLevel) ProtoMessage() {}

func (x *CharacterDearnessLevel) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterDearnessLevel.ProtoReflect.Descriptor instead.
func (*CharacterDearnessLevel) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{15}
}

func (x *CharacterDearnessLevel) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CharacterDearnessLevel) GetDearnessLevel() int32 {
	if x != nil {
		return x.DearnessLevel
	}
	return 0
}

func (x *CharacterDearnessLevel) GetAdvAssetId() string {
	if x != nil {
		return x.AdvAssetId
	}
	return ""
}

func (x *CharacterDearnessLevel) GetStoryId() string {
	if x != nil {
		return x.StoryId
	}
	return ""
}

func (x *CharacterDearnessLevel) GetProduceConditionDescription() string {
	if x != nil {
		return x.ProduceConditionDescription
	}
	return ""
}

func (x *CharacterDearnessLevel) GetProduceConditionAchievementId() string {
	if x != nil {
		return x.ProduceConditionAchievementId
	}
	return ""
}

func (x *CharacterDearnessLevel) GetProduceConditionAchievementThreshold() int32 {
	if x != nil {
		return x.ProduceConditionAchievementThreshold
	}
	return 0
}

func (x *CharacterDearnessLevel) GetProduceSkills() []*CharacterDearnessLevel_ProduceSkill {
	if x != nil {
		return x.ProduceSkills
	}
	return nil
}

func (x *CharacterDearnessLevel) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type CharacterDearnessLevelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterDearnessLevel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterDearnessLevelList) Reset() {
	*x = CharacterDearnessLevelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterDearnessLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterDearnessLevelList) ProtoMessage() {}

func (x *CharacterDearnessLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterDearnessLevelList.ProtoReflect.Descriptor instead.
func (*CharacterDearnessLevelList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{16}
}

func (x *CharacterDearnessLevelList) GetList() []*CharacterDearnessLevel {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterDearnessStoryGashaCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId  string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	StoryGroupId string `protobuf:"bytes,2,opt,name=storyGroupId,proto3" json:"storyGroupId,omitempty"`
}

func (x *CharacterDearnessStoryGashaCampaign) Reset() {
	*x = CharacterDearnessStoryGashaCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterDearnessStoryGashaCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterDearnessStoryGashaCampaign) ProtoMessage() {}

func (x *CharacterDearnessStoryGashaCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterDearnessStoryGashaCampaign.ProtoReflect.Descriptor instead.
func (*CharacterDearnessStoryGashaCampaign) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{17}
}

func (x *CharacterDearnessStoryGashaCampaign) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CharacterDearnessStoryGashaCampaign) GetStoryGroupId() string {
	if x != nil {
		return x.StoryGroupId
	}
	return ""
}

type CharacterDearnessStoryGashaCampaignList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterDearnessStoryGashaCampaign `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterDearnessStoryGashaCampaignList) Reset() {
	*x = CharacterDearnessStoryGashaCampaignList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterDearnessStoryGashaCampaignList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterDearnessStoryGashaCampaignList) ProtoMessage() {}

func (x *CharacterDearnessStoryGashaCampaignList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterDearnessStoryGashaCampaignList.ProtoReflect.Descriptor instead.
func (*CharacterDearnessStoryGashaCampaignList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{18}
}

func (x *CharacterDearnessStoryGashaCampaignList) GetList() []*CharacterDearnessStoryGashaCampaign {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId string                    `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Type        penum.CharacterDetailType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.CharacterDetailType" json:"type,omitempty"`
	Content     string                    `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Order       int32                     `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *CharacterDetail) Reset() {
	*x = CharacterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterDetail) ProtoMessage() {}

func (x *CharacterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterDetail.ProtoReflect.Descriptor instead.
func (*CharacterDetail) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{19}
}

func (x *CharacterDetail) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CharacterDetail) GetType() penum.CharacterDetailType {
	if x != nil {
		return x.Type
	}
	return penum.CharacterDetailType(0)
}

func (x *CharacterDetail) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CharacterDetail) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type CharacterDetailList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterDetailList) Reset() {
	*x = CharacterDetailList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterDetailList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterDetailList) ProtoMessage() {}

func (x *CharacterDetailList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterDetailList.ProtoReflect.Descriptor instead.
func (*CharacterDetailList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{20}
}

func (x *CharacterDetailList) GetList() []*CharacterDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Character `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterList) Reset() {
	*x = CharacterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterList) ProtoMessage() {}

func (x *CharacterList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterList.ProtoReflect.Descriptor instead.
func (*CharacterList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{21}
}

func (x *CharacterList) GetList() []*Character {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterPushMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId string         `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Type        penum.PushType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.PushType" json:"type,omitempty"`
	Number      int32          `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Title       string         `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Message     string         `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CharacterPushMessage) Reset() {
	*x = CharacterPushMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterPushMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterPushMessage) ProtoMessage() {}

func (x *CharacterPushMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterPushMessage.ProtoReflect.Descriptor instead.
func (*CharacterPushMessage) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{22}
}

func (x *CharacterPushMessage) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CharacterPushMessage) GetType() penum.PushType {
	if x != nil {
		return x.Type
	}
	return penum.PushType(0)
}

func (x *CharacterPushMessage) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CharacterPushMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CharacterPushMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CharacterPushMessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterPushMessage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterPushMessageList) Reset() {
	*x = CharacterPushMessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterPushMessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterPushMessageList) ProtoMessage() {}

func (x *CharacterPushMessageList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterPushMessageList.ProtoReflect.Descriptor instead.
func (*CharacterPushMessageList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{23}
}

func (x *CharacterPushMessageList) GetList() []*CharacterPushMessage {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterTrueEndAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId        string                                     `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	ProduceType        penum.ProduceType                          `protobuf:"varint,2,opt,name=produceType,proto3,enum=penum.ProduceType" json:"produceType,omitempty"`
	TrueEndAchievement *CharacterTrueEndAchievement_Achievement   `protobuf:"bytes,4,opt,name=trueEndAchievement,proto3" json:"trueEndAchievement,omitempty"`
	TargetAchievements []*CharacterTrueEndAchievement_Achievement `protobuf:"bytes,5,rep,name=targetAchievements,proto3" json:"targetAchievements,omitempty"`
}

func (x *CharacterTrueEndAchievement) Reset() {
	*x = CharacterTrueEndAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterTrueEndAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterTrueEndAchievement) ProtoMessage() {}

func (x *CharacterTrueEndAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterTrueEndAchievement.ProtoReflect.Descriptor instead.
func (*CharacterTrueEndAchievement) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{24}
}

func (x *CharacterTrueEndAchievement) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CharacterTrueEndAchievement) GetProduceType() penum.ProduceType {
	if x != nil {
		return x.ProduceType
	}
	return penum.ProduceType(0)
}

func (x *CharacterTrueEndAchievement) GetTrueEndAchievement() *CharacterTrueEndAchievement_Achievement {
	if x != nil {
		return x.TrueEndAchievement
	}
	return nil
}

func (x *CharacterTrueEndAchievement) GetTargetAchievements() []*CharacterTrueEndAchievement_Achievement {
	if x != nil {
		return x.TargetAchievements
	}
	return nil
}

type CharacterTrueEndAchievementList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterTrueEndAchievement `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterTrueEndAchievementList) Reset() {
	*x = CharacterTrueEndAchievementList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterTrueEndAchievementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterTrueEndAchievementList) ProtoMessage() {}

func (x *CharacterTrueEndAchievementList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterTrueEndAchievementList.ProtoReflect.Descriptor instead.
func (*CharacterTrueEndAchievementList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{25}
}

func (x *CharacterTrueEndAchievementList) GetList() []*CharacterTrueEndAchievement {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterTrueEndBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceType                   penum.ProduceType `protobuf:"varint,2,opt,name=produceType,proto3,enum=penum.ProduceType" json:"produceType,omitempty"`
	ProduceVocal                  int32             `protobuf:"varint,3,opt,name=produceVocal,proto3" json:"produceVocal,omitempty"`
	ProduceDance                  int32             `protobuf:"varint,4,opt,name=produceDance,proto3" json:"produceDance,omitempty"`
	ProduceVisual                 int32             `protobuf:"varint,5,opt,name=produceVisual,proto3" json:"produceVisual,omitempty"`
	ProduceVocalGrowthRatePermil  int32             `protobuf:"varint,6,opt,name=produceVocalGrowthRatePermil,proto3" json:"produceVocalGrowthRatePermil,omitempty"`
	ProduceDanceGrowthRatePermil  int32             `protobuf:"varint,7,opt,name=produceDanceGrowthRatePermil,proto3" json:"produceDanceGrowthRatePermil,omitempty"`
	ProduceVisualGrowthRatePermil int32             `protobuf:"varint,8,opt,name=produceVisualGrowthRatePermil,proto3" json:"produceVisualGrowthRatePermil,omitempty"`
	ProduceStamina                int32             `protobuf:"varint,9,opt,name=produceStamina,proto3" json:"produceStamina,omitempty"`
}

func (x *CharacterTrueEndBonus) Reset() {
	*x = CharacterTrueEndBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterTrueEndBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterTrueEndBonus) ProtoMessage() {}

func (x *CharacterTrueEndBonus) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterTrueEndBonus.ProtoReflect.Descriptor instead.
func (*CharacterTrueEndBonus) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{26}
}

func (x *CharacterTrueEndBonus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterTrueEndBonus) GetProduceType() penum.ProduceType {
	if x != nil {
		return x.ProduceType
	}
	return penum.ProduceType(0)
}

func (x *CharacterTrueEndBonus) GetProduceVocal() int32 {
	if x != nil {
		return x.ProduceVocal
	}
	return 0
}

func (x *CharacterTrueEndBonus) GetProduceDance() int32 {
	if x != nil {
		return x.ProduceDance
	}
	return 0
}

func (x *CharacterTrueEndBonus) GetProduceVisual() int32 {
	if x != nil {
		return x.ProduceVisual
	}
	return 0
}

func (x *CharacterTrueEndBonus) GetProduceVocalGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceVocalGrowthRatePermil
	}
	return 0
}

func (x *CharacterTrueEndBonus) GetProduceDanceGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceDanceGrowthRatePermil
	}
	return 0
}

func (x *CharacterTrueEndBonus) GetProduceVisualGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceVisualGrowthRatePermil
	}
	return 0
}

func (x *CharacterTrueEndBonus) GetProduceStamina() int32 {
	if x != nil {
		return x.ProduceStamina
	}
	return 0
}

type CharacterTrueEndBonusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CharacterTrueEndBonus `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CharacterTrueEndBonusList) Reset() {
	*x = CharacterTrueEndBonusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterTrueEndBonusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterTrueEndBonusList) ProtoMessage() {}

func (x *CharacterTrueEndBonusList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterTrueEndBonusList.ProtoReflect.Descriptor instead.
func (*CharacterTrueEndBonusList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{27}
}

func (x *CharacterTrueEndBonusList) GetList() []*CharacterTrueEndBonus {
	if x != nil {
		return x.List
	}
	return nil
}

type CoinGashaButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ResourceType penum.ResourceType `protobuf:"varint,4,opt,name=resourceType,proto3,enum=penum.ResourceType" json:"resourceType,omitempty"`
	ResourceId   string             `protobuf:"bytes,5,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Quantity     int32              `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	MaxDrawCount int32              `protobuf:"varint,7,opt,name=maxDrawCount,proto3" json:"maxDrawCount,omitempty"`
}

func (x *CoinGashaButton) Reset() {
	*x = CoinGashaButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinGashaButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinGashaButton) ProtoMessage() {}

func (x *CoinGashaButton) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinGashaButton.ProtoReflect.Descriptor instead.
func (*CoinGashaButton) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{28}
}

func (x *CoinGashaButton) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoinGashaButton) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinGashaButton) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CoinGashaButton) GetResourceType() penum.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ResourceType(0)
}

func (x *CoinGashaButton) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CoinGashaButton) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CoinGashaButton) GetMaxDrawCount() int32 {
	if x != nil {
		return x.MaxDrawCount
	}
	return 0
}

type CoinGashaButtonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CoinGashaButton `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CoinGashaButtonList) Reset() {
	*x = CoinGashaButtonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinGashaButtonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinGashaButtonList) ProtoMessage() {}

func (x *CoinGashaButtonList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinGashaButtonList.ProtoReflect.Descriptor instead.
func (*CoinGashaButtonList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{29}
}

func (x *CoinGashaButtonList) GetList() []*CoinGashaButton {
	if x != nil {
		return x.List
	}
	return nil
}

type ConditionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number                int32                       `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	ConditionOperatorType penum.ConditionOperatorType `protobuf:"varint,3,opt,name=conditionOperatorType,proto3,enum=penum.ConditionOperatorType" json:"conditionOperatorType,omitempty"`
	ConditionType         penum.ConditionType         `protobuf:"varint,4,opt,name=conditionType,proto3,enum=penum.ConditionType" json:"conditionType,omitempty"`
	ResourceId1           string                      `protobuf:"bytes,5,opt,name=resourceId1,proto3" json:"resourceId1,omitempty"`
	ResourceId2           string                      `protobuf:"bytes,6,opt,name=resourceId2,proto3" json:"resourceId2,omitempty"`
	MinMaxType            penum.ConditionMinMaxType   `protobuf:"varint,7,opt,name=minMaxType,proto3,enum=penum.ConditionMinMaxType" json:"minMaxType,omitempty"`
	Min                   int64                       `protobuf:"varint,8,opt,name=min,proto3" json:"min,omitempty"`
	Max                   int64                       `protobuf:"varint,9,opt,name=max,proto3" json:"max,omitempty"`
	BeforeTime            int64                       `protobuf:"varint,10,opt,name=beforeTime,proto3" json:"beforeTime,omitempty"`
	AfterTime             int64                       `protobuf:"varint,11,opt,name=afterTime,proto3" json:"afterTime,omitempty"`
	Description           string                      `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ConditionSet) Reset() {
	*x = ConditionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionSet) ProtoMessage() {}

func (x *ConditionSet) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionSet.ProtoReflect.Descriptor instead.
func (*ConditionSet) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{30}
}

func (x *ConditionSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConditionSet) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ConditionSet) GetConditionOperatorType() penum.ConditionOperatorType {
	if x != nil {
		return x.ConditionOperatorType
	}
	return penum.ConditionOperatorType(0)
}

func (x *ConditionSet) GetConditionType() penum.ConditionType {
	if x != nil {
		return x.ConditionType
	}
	return penum.ConditionType(0)
}

func (x *ConditionSet) GetResourceId1() string {
	if x != nil {
		return x.ResourceId1
	}
	return ""
}

func (x *ConditionSet) GetResourceId2() string {
	if x != nil {
		return x.ResourceId2
	}
	return ""
}

func (x *ConditionSet) GetMinMaxType() penum.ConditionMinMaxType {
	if x != nil {
		return x.MinMaxType
	}
	return penum.ConditionMinMaxType(0)
}

func (x *ConditionSet) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ConditionSet) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ConditionSet) GetBeforeTime() int64 {
	if x != nil {
		return x.BeforeTime
	}
	return 0
}

func (x *ConditionSet) GetAfterTime() int64 {
	if x != nil {
		return x.AfterTime
	}
	return 0
}

func (x *ConditionSet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ConditionSetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ConditionSet `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ConditionSetList) Reset() {
	*x = ConditionSetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionSetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionSetList) ProtoMessage() {}

func (x *ConditionSetList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionSetList.ProtoReflect.Descriptor instead.
func (*ConditionSetList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{31}
}

func (x *ConditionSetList) GetList() []*ConditionSet {
	if x != nil {
		return x.List
	}
	return nil
}

type ConsumptionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number       int32              `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	ResourceType penum.ResourceType `protobuf:"varint,3,opt,name=resourceType,proto3,enum=penum.ResourceType" json:"resourceType,omitempty"`
	ResourceId   string             `protobuf:"bytes,4,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Quantity     int32              `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ConsumptionSet) Reset() {
	*x = ConsumptionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumptionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionSet) ProtoMessage() {}

func (x *ConsumptionSet) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionSet.ProtoReflect.Descriptor instead.
func (*ConsumptionSet) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{32}
}

func (x *ConsumptionSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConsumptionSet) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ConsumptionSet) GetResourceType() penum.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ResourceType(0)
}

func (x *ConsumptionSet) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ConsumptionSet) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ConsumptionSetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ConsumptionSet `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ConsumptionSetList) Reset() {
	*x = ConsumptionSetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumptionSetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumptionSetList) ProtoMessage() {}

func (x *ConsumptionSetList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumptionSetList.ProtoReflect.Descriptor instead.
func (*ConsumptionSetList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{33}
}

func (x *ConsumptionSetList) GetList() []*ConsumptionSet {
	if x != nil {
		return x.List
	}
	return nil
}

type Costume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CharacterId                string                     `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Name                       string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MotifId                    string                     `protobuf:"bytes,4,opt,name=motifId,proto3" json:"motifId,omitempty"`
	Description                string                     `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	CostumeColorGroupId        string                     `protobuf:"bytes,12,opt,name=costumeColorGroupId,proto3" json:"costumeColorGroupId,omitempty"`
	CostumeHeadId              string                     `protobuf:"bytes,7,opt,name=costumeHeadId,proto3" json:"costumeHeadId,omitempty"`
	DefaultCostumeHeadId       string                     `protobuf:"bytes,14,opt,name=defaultCostumeHeadId,proto3" json:"defaultCostumeHeadId,omitempty"`
	VoiceGroupId               string                     `protobuf:"bytes,8,opt,name=voiceGroupId,proto3" json:"voiceGroupId,omitempty"`
	ResourceOriginType         penum.ResourceOriginType   `protobuf:"varint,9,opt,name=resourceOriginType,proto3,enum=penum.ResourceOriginType" json:"resourceOriginType,omitempty"`
	TargetId                   string                     `protobuf:"bytes,10,opt,name=targetId,proto3" json:"targetId,omitempty"`
	IsTraining                 bool                       `protobuf:"varint,11,opt,name=isTraining,proto3" json:"isTraining,omitempty"`
	IsBarefoot                 bool                       `protobuf:"varint,15,opt,name=isBarefoot,proto3" json:"isBarefoot,omitempty"`
	InvalidCostumeFeatureTypes []penum.CostumeFeatureType `protobuf:"varint,13,rep,packed,name=invalidCostumeFeatureTypes,proto3,enum=penum.CostumeFeatureType" json:"invalidCostumeFeatureTypes,omitempty"`
	ViewConditionSetId         string                     `protobuf:"bytes,97,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	ViewStartTime              int64                      `protobuf:"varint,98,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	Order                      int32                      `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Costume) Reset() {
	*x = Costume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Costume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Costume) ProtoMessage() {}

func (x *Costume) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Costume.ProtoReflect.Descriptor instead.
func (*Costume) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{34}
}

func (x *Costume) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Costume) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *Costume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Costume) GetMotifId() string {
	if x != nil {
		return x.MotifId
	}
	return ""
}

func (x *Costume) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Costume) GetCostumeColorGroupId() string {
	if x != nil {
		return x.CostumeColorGroupId
	}
	return ""
}

func (x *Costume) GetCostumeHeadId() string {
	if x != nil {
		return x.CostumeHeadId
	}
	return ""
}

func (x *Costume) GetDefaultCostumeHeadId() string {
	if x != nil {
		return x.DefaultCostumeHeadId
	}
	return ""
}

func (x *Costume) GetVoiceGroupId() string {
	if x != nil {
		return x.VoiceGroupId
	}
	return ""
}

func (x *Costume) GetResourceOriginType() penum.ResourceOriginType {
	if x != nil {
		return x.ResourceOriginType
	}
	return penum.ResourceOriginType(0)
}

func (x *Costume) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Costume) GetIsTraining() bool {
	if x != nil {
		return x.IsTraining
	}
	return false
}

func (x *Costume) GetIsBarefoot() bool {
	if x != nil {
		return x.IsBarefoot
	}
	return false
}

func (x *Costume) GetInvalidCostumeFeatureTypes() []penum.CostumeFeatureType {
	if x != nil {
		return x.InvalidCostumeFeatureTypes
	}
	return nil
}

func (x *Costume) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Costume) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *Costume) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type CostumeColorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CostumeHeadIds []string `protobuf:"bytes,2,rep,name=costumeHeadIds,proto3" json:"costumeHeadIds,omitempty"`
	IdolCardSkinId string   `protobuf:"bytes,3,opt,name=idolCardSkinId,proto3" json:"idolCardSkinId,omitempty"`
}

func (x *CostumeColorGroup) Reset() {
	*x = CostumeColorGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumeColorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumeColorGroup) ProtoMessage() {}

func (x *CostumeColorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumeColorGroup.ProtoReflect.Descriptor instead.
func (*CostumeColorGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{35}
}

func (x *CostumeColorGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CostumeColorGroup) GetCostumeHeadIds() []string {
	if x != nil {
		return x.CostumeHeadIds
	}
	return nil
}

func (x *CostumeColorGroup) GetIdolCardSkinId() string {
	if x != nil {
		return x.IdolCardSkinId
	}
	return ""
}

type CostumeColorGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CostumeColorGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CostumeColorGroupList) Reset() {
	*x = CostumeColorGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumeColorGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumeColorGroupList) ProtoMessage() {}

func (x *CostumeColorGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumeColorGroupList.ProtoReflect.Descriptor instead.
func (*CostumeColorGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{36}
}

func (x *CostumeColorGroupList) GetList() []*CostumeColorGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type CostumeHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CharacterId        string                   `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Name               string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	HairAssetId        string                   `protobuf:"bytes,4,opt,name=hairAssetId,proto3" json:"hairAssetId,omitempty"`
	FaceAssetId        string                   `protobuf:"bytes,5,opt,name=faceAssetId,proto3" json:"faceAssetId,omitempty"`
	Description        string                   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	ResourceOriginType penum.ResourceOriginType `protobuf:"varint,7,opt,name=resourceOriginType,proto3,enum=penum.ResourceOriginType" json:"resourceOriginType,omitempty"`
	TargetId           string                   `protobuf:"bytes,8,opt,name=targetId,proto3" json:"targetId,omitempty"`
	IsTraining         bool                     `protobuf:"varint,9,opt,name=isTraining,proto3" json:"isTraining,omitempty"`
	NoGashaAppeal      bool                     `protobuf:"varint,10,opt,name=noGashaAppeal,proto3" json:"noGashaAppeal,omitempty"`
	ViewConditionSetId string                   `protobuf:"bytes,97,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	ViewStartTime      int64                    `protobuf:"varint,98,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	Order              int32                    `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *CostumeHead) Reset() {
	*x = CostumeHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumeHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumeHead) ProtoMessage() {}

func (x *CostumeHead) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumeHead.ProtoReflect.Descriptor instead.
func (*CostumeHead) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{37}
}

func (x *CostumeHead) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CostumeHead) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CostumeHead) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CostumeHead) GetHairAssetId() string {
	if x != nil {
		return x.HairAssetId
	}
	return ""
}

func (x *CostumeHead) GetFaceAssetId() string {
	if x != nil {
		return x.FaceAssetId
	}
	return ""
}

func (x *CostumeHead) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CostumeHead) GetResourceOriginType() penum.ResourceOriginType {
	if x != nil {
		return x.ResourceOriginType
	}
	return penum.ResourceOriginType(0)
}

func (x *CostumeHead) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *CostumeHead) GetIsTraining() bool {
	if x != nil {
		return x.IsTraining
	}
	return false
}

func (x *CostumeHead) GetNoGashaAppeal() bool {
	if x != nil {
		return x.NoGashaAppeal
	}
	return false
}

func (x *CostumeHead) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *CostumeHead) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *CostumeHead) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type CostumeHeadList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CostumeHead `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CostumeHeadList) Reset() {
	*x = CostumeHeadList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumeHeadList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumeHeadList) ProtoMessage() {}

func (x *CostumeHeadList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumeHeadList.ProtoReflect.Descriptor instead.
func (*CostumeHeadList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{38}
}

func (x *CostumeHeadList) GetList() []*CostumeHead {
	if x != nil {
		return x.List
	}
	return nil
}

type CostumeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Costume `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CostumeList) Reset() {
	*x = CostumeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumeList) ProtoMessage() {}

func (x *CostumeList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumeList.ProtoReflect.Descriptor instead.
func (*CostumeList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{39}
}

func (x *CostumeList) GetList() []*Costume {
	if x != nil {
		return x.List
	}
	return nil
}

type CostumeMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    string                  `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	MotionType     penum.CostumeMotionType `protobuf:"varint,2,opt,name=motionType,proto3,enum=penum.CostumeMotionType" json:"motionType,omitempty"`
	Number         int32                   `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	FacialAssetIds []string                `protobuf:"bytes,4,rep,name=facialAssetIds,proto3" json:"facialAssetIds,omitempty"`
	BodyAssetIds   []string                `protobuf:"bytes,5,rep,name=bodyAssetIds,proto3" json:"bodyAssetIds,omitempty"`
	VoiceAssetId   string                  `protobuf:"bytes,6,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *CostumeMotion) Reset() {
	*x = CostumeMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumeMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumeMotion) ProtoMessage() {}

func (x *CostumeMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumeMotion.ProtoReflect.Descriptor instead.
func (*CostumeMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{40}
}

func (x *CostumeMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CostumeMotion) GetMotionType() penum.CostumeMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.CostumeMotionType(0)
}

func (x *CostumeMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CostumeMotion) GetFacialAssetIds() []string {
	if x != nil {
		return x.FacialAssetIds
	}
	return nil
}

func (x *CostumeMotion) GetBodyAssetIds() []string {
	if x != nil {
		return x.BodyAssetIds
	}
	return nil
}

func (x *CostumeMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type CostumeMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CostumeMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CostumeMotionList) Reset() {
	*x = CostumeMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumeMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumeMotionList) ProtoMessage() {}

func (x *CostumeMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumeMotionList.ProtoReflect.Descriptor instead.
func (*CostumeMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{41}
}

func (x *CostumeMotionList) GetList() []*CostumeMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type CostumePhotoGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CharacterId string   `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Number      int32    `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	CostumeIds  []string `protobuf:"bytes,4,rep,name=costumeIds,proto3" json:"costumeIds,omitempty"`
}

func (x *CostumePhotoGroup) Reset() {
	*x = CostumePhotoGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumePhotoGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumePhotoGroup) ProtoMessage() {}

func (x *CostumePhotoGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumePhotoGroup.ProtoReflect.Descriptor instead.
func (*CostumePhotoGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{42}
}

func (x *CostumePhotoGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CostumePhotoGroup) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *CostumePhotoGroup) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CostumePhotoGroup) GetCostumeIds() []string {
	if x != nil {
		return x.CostumeIds
	}
	return nil
}

type CostumePhotoGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CostumePhotoGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CostumePhotoGroupList) Reset() {
	*x = CostumePhotoGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostumePhotoGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostumePhotoGroupList) ProtoMessage() {}

func (x *CostumePhotoGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostumePhotoGroupList.ProtoReflect.Descriptor instead.
func (*CostumePhotoGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{43}
}

func (x *CostumePhotoGroupList) GetList() []*CostumePhotoGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type DearnessStoryCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CharacterId  string `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	StoryGroupId string `protobuf:"bytes,3,opt,name=storyGroupId,proto3" json:"storyGroupId,omitempty"`
	StartTime    int64  `protobuf:"varint,10,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      int64  `protobuf:"varint,11,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *DearnessStoryCampaign) Reset() {
	*x = DearnessStoryCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DearnessStoryCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DearnessStoryCampaign) ProtoMessage() {}

func (x *DearnessStoryCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DearnessStoryCampaign.ProtoReflect.Descriptor instead.
func (*DearnessStoryCampaign) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{44}
}

func (x *DearnessStoryCampaign) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DearnessStoryCampaign) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *DearnessStoryCampaign) GetStoryGroupId() string {
	if x != nil {
		return x.StoryGroupId
	}
	return ""
}

func (x *DearnessStoryCampaign) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DearnessStoryCampaign) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type DearnessStoryCampaignList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DearnessStoryCampaign `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DearnessStoryCampaignList) Reset() {
	*x = DearnessStoryCampaignList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DearnessStoryCampaignList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DearnessStoryCampaignList) ProtoMessage() {}

func (x *DearnessStoryCampaignList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DearnessStoryCampaignList.ProtoReflect.Descriptor instead.
func (*DearnessStoryCampaignList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{45}
}

func (x *DearnessStoryCampaignList) GetList() []*DearnessStoryCampaign {
	if x != nil {
		return x.List
	}
	return nil
}

type DeepLinkTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DeepLinkTransition) Reset() {
	*x = DeepLinkTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkTransition) ProtoMessage() {}

func (x *DeepLinkTransition) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkTransition.ProtoReflect.Descriptor instead.
func (*DeepLinkTransition) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{46}
}

func (x *DeepLinkTransition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeepLinkTransitionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DeepLinkTransition `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeepLinkTransitionList) Reset() {
	*x = DeepLinkTransitionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkTransitionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkTransitionList) ProtoMessage() {}

func (x *DeepLinkTransitionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkTransitionList.ProtoReflect.Descriptor instead.
func (*DeepLinkTransitionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{47}
}

func (x *DeepLinkTransitionList) GetList() []*DeepLinkTransition {
	if x != nil {
		return x.List
	}
	return nil
}

type EffectGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExamEffectType    penum.ProduceExamEffectType `protobuf:"varint,3,opt,name=examEffectType,proto3,enum=penum.ProduceExamEffectType" json:"examEffectType,omitempty"`
	ProduceEffectType penum.ProduceEffectType     `protobuf:"varint,4,opt,name=produceEffectType,proto3,enum=penum.ProduceEffectType" json:"produceEffectType,omitempty"`
	HiddenFilter      bool                        `protobuf:"varint,8,opt,name=hiddenFilter,proto3" json:"hiddenFilter,omitempty"`
	Order             int32                       `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EffectGroup) Reset() {
	*x = EffectGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectGroup) ProtoMessage() {}

func (x *EffectGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectGroup.ProtoReflect.Descriptor instead.
func (*EffectGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{48}
}

func (x *EffectGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EffectGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EffectGroup) GetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.ExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *EffectGroup) GetProduceEffectType() penum.ProduceEffectType {
	if x != nil {
		return x.ProduceEffectType
	}
	return penum.ProduceEffectType(0)
}

func (x *EffectGroup) GetHiddenFilter() bool {
	if x != nil {
		return x.HiddenFilter
	}
	return false
}

func (x *EffectGroup) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type EffectGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*EffectGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EffectGroupList) Reset() {
	*x = EffectGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectGroupList) ProtoMessage() {}

func (x *EffectGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectGroupList.ProtoReflect.Descriptor instead.
func (*EffectGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{49}
}

func (x *EffectGroupList) GetList() []*EffectGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type EventLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType penum.EventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=penum.EventType" json:"eventType,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color     string          `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *EventLabel) Reset() {
	*x = EventLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLabel) ProtoMessage() {}

func (x *EventLabel) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLabel.ProtoReflect.Descriptor instead.
func (*EventLabel) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{50}
}

func (x *EventLabel) GetEventType() penum.EventType {
	if x != nil {
		return x.EventType
	}
	return penum.EventType(0)
}

func (x *EventLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventLabel) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type EventLabelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*EventLabel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EventLabelList) Reset() {
	*x = EventLabelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLabelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLabelList) ProtoMessage() {}

func (x *EventLabelList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLabelList.ProtoReflect.Descriptor instead.
func (*EventLabelList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{51}
}

func (x *EventLabelList) GetList() []*EventLabel {
	if x != nil {
		return x.List
	}
	return nil
}

type EventStoryCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description   string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StoryGroupIds []string `protobuf:"bytes,5,rep,name=storyGroupIds,proto3" json:"storyGroupIds,omitempty"`
	StartTime     int64    `protobuf:"varint,10,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64    `protobuf:"varint,11,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *EventStoryCampaign) Reset() {
	*x = EventStoryCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStoryCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStoryCampaign) ProtoMessage() {}

func (x *EventStoryCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStoryCampaign.ProtoReflect.Descriptor instead.
func (*EventStoryCampaign) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{52}
}

func (x *EventStoryCampaign) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventStoryCampaign) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventStoryCampaign) GetStoryGroupIds() []string {
	if x != nil {
		return x.StoryGroupIds
	}
	return nil
}

func (x *EventStoryCampaign) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EventStoryCampaign) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type EventStoryCampaignList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*EventStoryCampaign `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EventStoryCampaignList) Reset() {
	*x = EventStoryCampaignList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStoryCampaignList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStoryCampaignList) ProtoMessage() {}

func (x *EventStoryCampaignList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStoryCampaignList.ProtoReflect.Descriptor instead.
func (*EventStoryCampaignList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{53}
}

func (x *EventStoryCampaignList) GetList() []*EventStoryCampaign {
	if x != nil {
		return x.List
	}
	return nil
}

type ExamInitialDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceCardIds           []string `protobuf:"bytes,2,rep,name=produceCardIds,proto3" json:"produceCardIds,omitempty"`
	ProduceCardUpgradeCounts []int32  `protobuf:"varint,5,rep,packed,name=produceCardUpgradeCounts,proto3" json:"produceCardUpgradeCounts,omitempty"`
}

func (x *ExamInitialDeck) Reset() {
	*x = ExamInitialDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamInitialDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamInitialDeck) ProtoMessage() {}

func (x *ExamInitialDeck) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamInitialDeck.ProtoReflect.Descriptor instead.
func (*ExamInitialDeck) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{54}
}

func (x *ExamInitialDeck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamInitialDeck) GetProduceCardIds() []string {
	if x != nil {
		return x.ProduceCardIds
	}
	return nil
}

func (x *ExamInitialDeck) GetProduceCardUpgradeCounts() []int32 {
	if x != nil {
		return x.ProduceCardUpgradeCounts
	}
	return nil
}

type ExamInitialDeckList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ExamInitialDeck `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ExamInitialDeckList) Reset() {
	*x = ExamInitialDeckList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamInitialDeckList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamInitialDeckList) ProtoMessage() {}

func (x *ExamInitialDeckList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamInitialDeckList.ProtoReflect.Descriptor instead.
func (*ExamInitialDeckList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{55}
}

func (x *ExamInitialDeckList) GetList() []*ExamInitialDeck {
	if x != nil {
		return x.List
	}
	return nil
}

type ExamMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    string                     `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Type           penum.ExamMotionTargetType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.ExamMotionTargetType" json:"type,omitempty"`
	MotionType     penum.ExamMotionType       `protobuf:"varint,3,opt,name=motionType,proto3,enum=penum.ExamMotionType" json:"motionType,omitempty"`
	Number         int32                      `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	FacialMotionId string                     `protobuf:"bytes,5,opt,name=facialMotionId,proto3" json:"facialMotionId,omitempty"`
	BodyMotionId   string                     `protobuf:"bytes,6,opt,name=bodyMotionId,proto3" json:"bodyMotionId,omitempty"`
	VoiceAssetId   string                     `protobuf:"bytes,7,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
	SceneLayoutId  string                     `protobuf:"bytes,8,opt,name=sceneLayoutId,proto3" json:"sceneLayoutId,omitempty"`
	CameraId       string                     `protobuf:"bytes,9,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
}

func (x *ExamMotion) Reset() {
	*x = ExamMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamMotion) ProtoMessage() {}

func (x *ExamMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamMotion.ProtoReflect.Descriptor instead.
func (*ExamMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{56}
}

func (x *ExamMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ExamMotion) GetType() penum.ExamMotionTargetType {
	if x != nil {
		return x.Type
	}
	return penum.ExamMotionTargetType(0)
}

func (x *ExamMotion) GetMotionType() penum.ExamMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.ExamMotionType(0)
}

func (x *ExamMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ExamMotion) GetFacialMotionId() string {
	if x != nil {
		return x.FacialMotionId
	}
	return ""
}

func (x *ExamMotion) GetBodyMotionId() string {
	if x != nil {
		return x.BodyMotionId
	}
	return ""
}

func (x *ExamMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

func (x *ExamMotion) GetSceneLayoutId() string {
	if x != nil {
		return x.SceneLayoutId
	}
	return ""
}

func (x *ExamMotion) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type ExamMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ExamMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ExamMotionList) Reset() {
	*x = ExamMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamMotionList) ProtoMessage() {}

func (x *ExamMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamMotionList.ProtoReflect.Descriptor instead.
func (*ExamMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{57}
}

func (x *ExamMotionList) GetList() []*ExamMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type ExamOutGameMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    string                      `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Type           penum.ExamMotionTargetType  `protobuf:"varint,2,opt,name=type,proto3,enum=penum.ExamMotionTargetType" json:"type,omitempty"`
	MotionType     penum.ExamOutGameMotionType `protobuf:"varint,3,opt,name=motionType,proto3,enum=penum.ExamOutGameMotionType" json:"motionType,omitempty"`
	Number         int32                       `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	FacialAssetIds []string                    `protobuf:"bytes,5,rep,name=facialAssetIds,proto3" json:"facialAssetIds,omitempty"`
	BodyAssetIds   []string                    `protobuf:"bytes,6,rep,name=bodyAssetIds,proto3" json:"bodyAssetIds,omitempty"`
	VoiceAssetId   string                      `protobuf:"bytes,7,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
	SceneLayoutId  string                      `protobuf:"bytes,8,opt,name=sceneLayoutId,proto3" json:"sceneLayoutId,omitempty"`
	CameraId       string                      `protobuf:"bytes,9,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
}

func (x *ExamOutGameMotion) Reset() {
	*x = ExamOutGameMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamOutGameMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamOutGameMotion) ProtoMessage() {}

func (x *ExamOutGameMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamOutGameMotion.ProtoReflect.Descriptor instead.
func (*ExamOutGameMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{58}
}

func (x *ExamOutGameMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ExamOutGameMotion) GetType() penum.ExamMotionTargetType {
	if x != nil {
		return x.Type
	}
	return penum.ExamMotionTargetType(0)
}

func (x *ExamOutGameMotion) GetMotionType() penum.ExamOutGameMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.ExamOutGameMotionType(0)
}

func (x *ExamOutGameMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ExamOutGameMotion) GetFacialAssetIds() []string {
	if x != nil {
		return x.FacialAssetIds
	}
	return nil
}

func (x *ExamOutGameMotion) GetBodyAssetIds() []string {
	if x != nil {
		return x.BodyAssetIds
	}
	return nil
}

func (x *ExamOutGameMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

func (x *ExamOutGameMotion) GetSceneLayoutId() string {
	if x != nil {
		return x.SceneLayoutId
	}
	return ""
}

func (x *ExamOutGameMotion) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type ExamOutGameMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ExamOutGameMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ExamOutGameMotionList) Reset() {
	*x = ExamOutGameMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamOutGameMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamOutGameMotionList) ProtoMessage() {}

func (x *ExamOutGameMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamOutGameMotionList.ProtoReflect.Descriptor instead.
func (*ExamOutGameMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{59}
}

func (x *ExamOutGameMotionList) GetList() []*ExamOutGameMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type ExamSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExamStaminaConsumptionDownPermil            int32   `protobuf:"varint,3,opt,name=examStaminaConsumptionDownPermil,proto3" json:"examStaminaConsumptionDownPermil,omitempty"`
	ExamStaminaConsumptionAddPermil             int32   `protobuf:"varint,4,opt,name=examStaminaConsumptionAddPermil,proto3" json:"examStaminaConsumptionAddPermil,omitempty"`
	ExamBlockAddDownPermil                      int32   `protobuf:"varint,5,opt,name=examBlockAddDownPermil,proto3" json:"examBlockAddDownPermil,omitempty"`
	ExamStaminaConsumptionAddDownPermil         int32   `protobuf:"varint,6,opt,name=examStaminaConsumptionAddDownPermil,proto3" json:"examStaminaConsumptionAddDownPermil,omitempty"`
	ExamStaminaReduceChange                     int32   `protobuf:"varint,7,opt,name=examStaminaReduceChange,proto3" json:"examStaminaReduceChange,omitempty"`
	ExamStaminaConsumptionDownAddPermil         int32   `protobuf:"varint,8,opt,name=examStaminaConsumptionDownAddPermil,proto3" json:"examStaminaConsumptionDownAddPermil,omitempty"`
	ExamConcentrationLessonValueMultiplePermil  int32   `protobuf:"varint,9,opt,name=examConcentrationLessonValueMultiplePermil,proto3" json:"examConcentrationLessonValueMultiplePermil,omitempty"`
	FullPowerPlayableValueAdd                   int32   `protobuf:"varint,10,opt,name=fullPowerPlayableValueAdd,proto3" json:"fullPowerPlayableValueAdd,omitempty"`
	ExamFullPowerLessonValueMultiplePermil      int32   `protobuf:"varint,11,opt,name=examFullPowerLessonValueMultiplePermil,proto3" json:"examFullPowerLessonValueMultiplePermil,omitempty"`
	ExamShuffleFixed                            bool    `protobuf:"varint,12,opt,name=examShuffleFixed,proto3" json:"examShuffleFixed,omitempty"`
	HoldLimit                                   int32   `protobuf:"varint,13,opt,name=holdLimit,proto3" json:"holdLimit,omitempty"`
	HandLimit                                   int32   `protobuf:"varint,14,opt,name=handLimit,proto3" json:"handLimit,omitempty"`
	TurnStartDistribute                         int32   `protobuf:"varint,15,opt,name=turnStartDistribute,proto3" json:"turnStartDistribute,omitempty"`
	ExamGimmickParameterDebuffPermil            int32   `protobuf:"varint,16,opt,name=examGimmickParameterDebuffPermil,proto3" json:"examGimmickParameterDebuffPermil,omitempty"`
	ExamParameterBuffPermil                     int32   `protobuf:"varint,17,opt,name=examParameterBuffPermil,proto3" json:"examParameterBuffPermil,omitempty"`
	ExamTurnEndRecoveryStamina                  int32   `protobuf:"varint,18,opt,name=examTurnEndRecoveryStamina,proto3" json:"examTurnEndRecoveryStamina,omitempty"`
	ProduceExamPanicStaminaCandidates           []int32 `protobuf:"varint,19,rep,packed,name=produceExamPanicStaminaCandidates,proto3" json:"produceExamPanicStaminaCandidates,omitempty"`
	ExamParameterBuffMultiplePerTurnPermil      int32   `protobuf:"varint,20,opt,name=examParameterBuffMultiplePerTurnPermil,proto3" json:"examParameterBuffMultiplePerTurnPermil,omitempty"`
	PreservationReleasePlayableValueAdd1        int32   `protobuf:"varint,21,opt,name=preservationReleasePlayableValueAdd1,proto3" json:"preservationReleasePlayableValueAdd1,omitempty"`
	PreservationReleasePlayableValueAdd2        int32   `protobuf:"varint,22,opt,name=preservationReleasePlayableValueAdd2,proto3" json:"preservationReleasePlayableValueAdd2,omitempty"`
	PreservationReleaseBlockAdd1                int32   `protobuf:"varint,23,opt,name=preservationReleaseBlockAdd1,proto3" json:"preservationReleaseBlockAdd1,omitempty"`
	PreservationReleaseBlockAdd2                int32   `protobuf:"varint,24,opt,name=preservationReleaseBlockAdd2,proto3" json:"preservationReleaseBlockAdd2,omitempty"`
	PreservationReleaseEnthusiastic1            int32   `protobuf:"varint,25,opt,name=preservationReleaseEnthusiastic1,proto3" json:"preservationReleaseEnthusiastic1,omitempty"`
	PreservationReleaseEnthusiastic2            int32   `protobuf:"varint,26,opt,name=preservationReleaseEnthusiastic2,proto3" json:"preservationReleaseEnthusiastic2,omitempty"`
	ExamConcentrationLessonValueMultiplePermil1 int32   `protobuf:"varint,27,opt,name=examConcentrationLessonValueMultiplePermil1,proto3" json:"examConcentrationLessonValueMultiplePermil1,omitempty"`
	ExamConcentrationLessonValueMultiplePermil2 int32   `protobuf:"varint,28,opt,name=examConcentrationLessonValueMultiplePermil2,proto3" json:"examConcentrationLessonValueMultiplePermil2,omitempty"`
	ExamPreservationLessonValueMultiplePermil1  int32   `protobuf:"varint,29,opt,name=examPreservationLessonValueMultiplePermil1,proto3" json:"examPreservationLessonValueMultiplePermil1,omitempty"`
	ExamPreservationLessonValueMultiplePermil2  int32   `protobuf:"varint,30,opt,name=examPreservationLessonValueMultiplePermil2,proto3" json:"examPreservationLessonValueMultiplePermil2,omitempty"`
	ExamConcentrationStaminaMultiplePermil1     int32   `protobuf:"varint,31,opt,name=examConcentrationStaminaMultiplePermil1,proto3" json:"examConcentrationStaminaMultiplePermil1,omitempty"`
	ExamConcentrationStaminaMultiplePermil2     int32   `protobuf:"varint,32,opt,name=examConcentrationStaminaMultiplePermil2,proto3" json:"examConcentrationStaminaMultiplePermil2,omitempty"`
	ExamPreservationStaminaMultiplePermil1      int32   `protobuf:"varint,33,opt,name=examPreservationStaminaMultiplePermil1,proto3" json:"examPreservationStaminaMultiplePermil1,omitempty"`
	ExamPreservationStaminaMultiplePermil2      int32   `protobuf:"varint,34,opt,name=examPreservationStaminaMultiplePermil2,proto3" json:"examPreservationStaminaMultiplePermil2,omitempty"`
}

func (x *ExamSetting) Reset() {
	*x = ExamSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamSetting) ProtoMessage() {}

func (x *ExamSetting) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamSetting.ProtoReflect.Descriptor instead.
func (*ExamSetting) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{60}
}

func (x *ExamSetting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamSetting) GetExamStaminaConsumptionDownPermil() int32 {
	if x != nil {
		return x.ExamStaminaConsumptionDownPermil
	}
	return 0
}

func (x *ExamSetting) GetExamStaminaConsumptionAddPermil() int32 {
	if x != nil {
		return x.ExamStaminaConsumptionAddPermil
	}
	return 0
}

func (x *ExamSetting) GetExamBlockAddDownPermil() int32 {
	if x != nil {
		return x.ExamBlockAddDownPermil
	}
	return 0
}

func (x *ExamSetting) GetExamStaminaConsumptionAddDownPermil() int32 {
	if x != nil {
		return x.ExamStaminaConsumptionAddDownPermil
	}
	return 0
}

func (x *ExamSetting) GetExamStaminaReduceChange() int32 {
	if x != nil {
		return x.ExamStaminaReduceChange
	}
	return 0
}

func (x *ExamSetting) GetExamStaminaConsumptionDownAddPermil() int32 {
	if x != nil {
		return x.ExamStaminaConsumptionDownAddPermil
	}
	return 0
}

func (x *ExamSetting) GetExamConcentrationLessonValueMultiplePermil() int32 {
	if x != nil {
		return x.ExamConcentrationLessonValueMultiplePermil
	}
	return 0
}

func (x *ExamSetting) GetFullPowerPlayableValueAdd() int32 {
	if x != nil {
		return x.FullPowerPlayableValueAdd
	}
	return 0
}

func (x *ExamSetting) GetExamFullPowerLessonValueMultiplePermil() int32 {
	if x != nil {
		return x.ExamFullPowerLessonValueMultiplePermil
	}
	return 0
}

func (x *ExamSetting) GetExamShuffleFixed() bool {
	if x != nil {
		return x.ExamShuffleFixed
	}
	return false
}

func (x *ExamSetting) GetHoldLimit() int32 {
	if x != nil {
		return x.HoldLimit
	}
	return 0
}

func (x *ExamSetting) GetHandLimit() int32 {
	if x != nil {
		return x.HandLimit
	}
	return 0
}

func (x *ExamSetting) GetTurnStartDistribute() int32 {
	if x != nil {
		return x.TurnStartDistribute
	}
	return 0
}

func (x *ExamSetting) GetExamGimmickParameterDebuffPermil() int32 {
	if x != nil {
		return x.ExamGimmickParameterDebuffPermil
	}
	return 0
}

func (x *ExamSetting) GetExamParameterBuffPermil() int32 {
	if x != nil {
		return x.ExamParameterBuffPermil
	}
	return 0
}

func (x *ExamSetting) GetExamTurnEndRecoveryStamina() int32 {
	if x != nil {
		return x.ExamTurnEndRecoveryStamina
	}
	return 0
}

func (x *ExamSetting) GetProduceExamPanicStaminaCandidates() []int32 {
	if x != nil {
		return x.ProduceExamPanicStaminaCandidates
	}
	return nil
}

func (x *ExamSetting) GetExamParameterBuffMultiplePerTurnPermil() int32 {
	if x != nil {
		return x.ExamParameterBuffMultiplePerTurnPermil
	}
	return 0
}

func (x *ExamSetting) GetPreservationReleasePlayableValueAdd1() int32 {
	if x != nil {
		return x.PreservationReleasePlayableValueAdd1
	}
	return 0
}

func (x *ExamSetting) GetPreservationReleasePlayableValueAdd2() int32 {
	if x != nil {
		return x.PreservationReleasePlayableValueAdd2
	}
	return 0
}

func (x *ExamSetting) GetPreservationReleaseBlockAdd1() int32 {
	if x != nil {
		return x.PreservationReleaseBlockAdd1
	}
	return 0
}

func (x *ExamSetting) GetPreservationReleaseBlockAdd2() int32 {
	if x != nil {
		return x.PreservationReleaseBlockAdd2
	}
	return 0
}

func (x *ExamSetting) GetPreservationReleaseEnthusiastic1() int32 {
	if x != nil {
		return x.PreservationReleaseEnthusiastic1
	}
	return 0
}

func (x *ExamSetting) GetPreservationReleaseEnthusiastic2() int32 {
	if x != nil {
		return x.PreservationReleaseEnthusiastic2
	}
	return 0
}

func (x *ExamSetting) GetExamConcentrationLessonValueMultiplePermil1() int32 {
	if x != nil {
		return x.ExamConcentrationLessonValueMultiplePermil1
	}
	return 0
}

func (x *ExamSetting) GetExamConcentrationLessonValueMultiplePermil2() int32 {
	if x != nil {
		return x.ExamConcentrationLessonValueMultiplePermil2
	}
	return 0
}

func (x *ExamSetting) GetExamPreservationLessonValueMultiplePermil1() int32 {
	if x != nil {
		return x.ExamPreservationLessonValueMultiplePermil1
	}
	return 0
}

func (x *ExamSetting) GetExamPreservationLessonValueMultiplePermil2() int32 {
	if x != nil {
		return x.ExamPreservationLessonValueMultiplePermil2
	}
	return 0
}

func (x *ExamSetting) GetExamConcentrationStaminaMultiplePermil1() int32 {
	if x != nil {
		return x.ExamConcentrationStaminaMultiplePermil1
	}
	return 0
}

func (x *ExamSetting) GetExamConcentrationStaminaMultiplePermil2() int32 {
	if x != nil {
		return x.ExamConcentrationStaminaMultiplePermil2
	}
	return 0
}

func (x *ExamSetting) GetExamPreservationStaminaMultiplePermil1() int32 {
	if x != nil {
		return x.ExamPreservationStaminaMultiplePermil1
	}
	return 0
}

func (x *ExamSetting) GetExamPreservationStaminaMultiplePermil2() int32 {
	if x != nil {
		return x.ExamPreservationStaminaMultiplePermil2
	}
	return 0
}

type ExamSettingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ExamSetting `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ExamSettingList) Reset() {
	*x = ExamSettingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamSettingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamSettingList) ProtoMessage() {}

func (x *ExamSettingList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamSettingList.ProtoReflect.Descriptor instead.
func (*ExamSettingList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{61}
}

func (x *ExamSettingList) GetList() []*ExamSetting {
	if x != nil {
		return x.List
	}
	return nil
}

type ExamSimulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stamina                         int32  `protobuf:"varint,2,opt,name=stamina,proto3" json:"stamina,omitempty"`
	MaxStamina                      int32  `protobuf:"varint,3,opt,name=maxStamina,proto3" json:"maxStamina,omitempty"`
	ClearBorder                     int32  `protobuf:"varint,4,opt,name=clearBorder,proto3" json:"clearBorder,omitempty"`
	LimitBorder                     int32  `protobuf:"varint,5,opt,name=limitBorder,proto3" json:"limitBorder,omitempty"`
	LimitTurn                       int32  `protobuf:"varint,6,opt,name=limitTurn,proto3" json:"limitTurn,omitempty"`
	ProduceExamGimmickEffectGroupId string `protobuf:"bytes,7,opt,name=produceExamGimmickEffectGroupId,proto3" json:"produceExamGimmickEffectGroupId,omitempty"`
}

func (x *ExamSimulation) Reset() {
	*x = ExamSimulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamSimulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamSimulation) ProtoMessage() {}

func (x *ExamSimulation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamSimulation.ProtoReflect.Descriptor instead.
func (*ExamSimulation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{62}
}

func (x *ExamSimulation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamSimulation) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *ExamSimulation) GetMaxStamina() int32 {
	if x != nil {
		return x.MaxStamina
	}
	return 0
}

func (x *ExamSimulation) GetClearBorder() int32 {
	if x != nil {
		return x.ClearBorder
	}
	return 0
}

func (x *ExamSimulation) GetLimitBorder() int32 {
	if x != nil {
		return x.LimitBorder
	}
	return 0
}

func (x *ExamSimulation) GetLimitTurn() int32 {
	if x != nil {
		return x.LimitTurn
	}
	return 0
}

func (x *ExamSimulation) GetProduceExamGimmickEffectGroupId() string {
	if x != nil {
		return x.ProduceExamGimmickEffectGroupId
	}
	return ""
}

type ExamSimulationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ExamSimulation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ExamSimulationList) Reset() {
	*x = ExamSimulationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamSimulationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamSimulationList) ProtoMessage() {}

func (x *ExamSimulationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamSimulationList.ProtoReflect.Descriptor instead.
func (*ExamSimulationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{63}
}

func (x *ExamSimulationList) GetList() []*ExamSimulation {
	if x != nil {
		return x.List
	}
	return nil
}

type FeatureLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TutorialType         penum.TutorialType `protobuf:"varint,1,opt,name=tutorialType,proto3,enum=penum.TutorialType" json:"tutorialType,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	RouteDescription     string             `protobuf:"bytes,4,opt,name=routeDescription,proto3" json:"routeDescription,omitempty"`
	UnlockConditionSetId string             `protobuf:"bytes,5,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	IsForce              bool               `protobuf:"varint,6,opt,name=isForce,proto3" json:"isForce,omitempty"`
}

func (x *FeatureLock) Reset() {
	*x = FeatureLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureLock) ProtoMessage() {}

func (x *FeatureLock) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureLock.ProtoReflect.Descriptor instead.
func (*FeatureLock) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{64}
}

func (x *FeatureLock) GetTutorialType() penum.TutorialType {
	if x != nil {
		return x.TutorialType
	}
	return penum.TutorialType(0)
}

func (x *FeatureLock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureLock) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureLock) GetRouteDescription() string {
	if x != nil {
		return x.RouteDescription
	}
	return ""
}

func (x *FeatureLock) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *FeatureLock) GetIsForce() bool {
	if x != nil {
		return x.IsForce
	}
	return false
}

type FeatureLockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FeatureLock `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FeatureLockList) Reset() {
	*x = FeatureLockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureLockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureLockList) ProtoMessage() {}

func (x *FeatureLockList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureLockList.ProtoReflect.Descriptor instead.
func (*FeatureLockList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{65}
}

func (x *FeatureLockList) GetList() []*FeatureLock {
	if x != nil {
		return x.List
	}
	return nil
}

type GashaAnimation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rarity       penum.GashaAnimationRarity `protobuf:"varint,1,opt,name=rarity,proto3,enum=penum.GashaAnimationRarity" json:"rarity,omitempty"`
	KeepRatio    int32                      `protobuf:"varint,2,opt,name=keepRatio,proto3" json:"keepRatio,omitempty"`
	Ratio1       int32                      `protobuf:"varint,3,opt,name=ratio1,proto3" json:"ratio1,omitempty"`
	Ratio2       int32                      `protobuf:"varint,4,opt,name=ratio2,proto3" json:"ratio2,omitempty"`
	Ratio3       int32                      `protobuf:"varint,5,opt,name=ratio3,proto3" json:"ratio3,omitempty"`
	Ratio4       int32                      `protobuf:"varint,6,opt,name=ratio4,proto3" json:"ratio4,omitempty"`
	FreezeRatio  int32                      `protobuf:"varint,7,opt,name=freezeRatio,proto3" json:"freezeRatio,omitempty"`
	FreezeRatio1 int32                      `protobuf:"varint,8,opt,name=freezeRatio1,proto3" json:"freezeRatio1,omitempty"`
	FreezeRatio2 int32                      `protobuf:"varint,9,opt,name=freezeRatio2,proto3" json:"freezeRatio2,omitempty"`
}

func (x *GashaAnimation) Reset() {
	*x = GashaAnimation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GashaAnimation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GashaAnimation) ProtoMessage() {}

func (x *GashaAnimation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GashaAnimation.ProtoReflect.Descriptor instead.
func (*GashaAnimation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{66}
}

func (x *GashaAnimation) GetRarity() penum.GashaAnimationRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.GashaAnimationRarity(0)
}

func (x *GashaAnimation) GetKeepRatio() int32 {
	if x != nil {
		return x.KeepRatio
	}
	return 0
}

func (x *GashaAnimation) GetRatio1() int32 {
	if x != nil {
		return x.Ratio1
	}
	return 0
}

func (x *GashaAnimation) GetRatio2() int32 {
	if x != nil {
		return x.Ratio2
	}
	return 0
}

func (x *GashaAnimation) GetRatio3() int32 {
	if x != nil {
		return x.Ratio3
	}
	return 0
}

func (x *GashaAnimation) GetRatio4() int32 {
	if x != nil {
		return x.Ratio4
	}
	return 0
}

func (x *GashaAnimation) GetFreezeRatio() int32 {
	if x != nil {
		return x.FreezeRatio
	}
	return 0
}

func (x *GashaAnimation) GetFreezeRatio1() int32 {
	if x != nil {
		return x.FreezeRatio1
	}
	return 0
}

func (x *GashaAnimation) GetFreezeRatio2() int32 {
	if x != nil {
		return x.FreezeRatio2
	}
	return 0
}

type GashaAnimationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GashaAnimation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GashaAnimationList) Reset() {
	*x = GashaAnimationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GashaAnimationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GashaAnimationList) ProtoMessage() {}

func (x *GashaAnimationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GashaAnimationList.ProtoReflect.Descriptor instead.
func (*GashaAnimationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{67}
}

func (x *GashaAnimationList) GetList() []*GashaAnimation {
	if x != nil {
		return x.List
	}
	return nil
}

type GashaButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description              string                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type                     penum.GashaButtonType       `protobuf:"varint,4,opt,name=type,proto3,enum=penum.GashaButtonType" json:"type,omitempty"`
	RewardCount              int32                       `protobuf:"varint,5,opt,name=rewardCount,proto3" json:"rewardCount,omitempty"`
	FixRewardCount           int32                       `protobuf:"varint,6,opt,name=fixRewardCount,proto3" json:"fixRewardCount,omitempty"`
	ResourceType             penum.ResourceType          `protobuf:"varint,7,opt,name=resourceType,proto3,enum=penum.ResourceType" json:"resourceType,omitempty"`
	ResourceId               string                      `protobuf:"bytes,8,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	LimitType                penum.GashaLimitType        `protobuf:"varint,9,opt,name=limitType,proto3,enum=penum.GashaLimitType" json:"limitType,omitempty"`
	LimitCount               int32                       `protobuf:"varint,10,opt,name=limitCount,proto3" json:"limitCount,omitempty"`
	ResourceQuantity         int32                       `protobuf:"varint,11,opt,name=resourceQuantity,proto3" json:"resourceQuantity,omitempty"`
	MaxDrawCount             int32                       `protobuf:"varint,12,opt,name=maxDrawCount,proto3" json:"maxDrawCount,omitempty"`
	DiscountLimitType        penum.GashaLimitType        `protobuf:"varint,13,opt,name=discountLimitType,proto3,enum=penum.GashaLimitType" json:"discountLimitType,omitempty"`
	DiscountLimitCount       int32                       `protobuf:"varint,14,opt,name=discountLimitCount,proto3" json:"discountLimitCount,omitempty"`
	DiscountResourceQuantity int32                       `protobuf:"varint,15,opt,name=discountResourceQuantity,proto3" json:"discountResourceQuantity,omitempty"`
	ViewConditionSetId       string                      `protobuf:"bytes,16,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId     string                      `protobuf:"bytes,17,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	Order                    int32                       `protobuf:"varint,18,opt,name=order,proto3" json:"order,omitempty"`
	AppealType               penum.GashaButtonAppealType `protobuf:"varint,19,opt,name=appealType,proto3,enum=penum.GashaButtonAppealType" json:"appealType,omitempty"`
	AppealText               string                      `protobuf:"bytes,20,opt,name=appealText,proto3" json:"appealText,omitempty"`
}

func (x *GashaButton) Reset() {
	*x = GashaButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GashaButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GashaButton) ProtoMessage() {}

func (x *GashaButton) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GashaButton.ProtoReflect.Descriptor instead.
func (*GashaButton) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{68}
}

func (x *GashaButton) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GashaButton) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GashaButton) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GashaButton) GetType() penum.GashaButtonType {
	if x != nil {
		return x.Type
	}
	return penum.GashaButtonType(0)
}

func (x *GashaButton) GetRewardCount() int32 {
	if x != nil {
		return x.RewardCount
	}
	return 0
}

func (x *GashaButton) GetFixRewardCount() int32 {
	if x != nil {
		return x.FixRewardCount
	}
	return 0
}

func (x *GashaButton) GetResourceType() penum.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ResourceType(0)
}

func (x *GashaButton) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GashaButton) GetLimitType() penum.GashaLimitType {
	if x != nil {
		return x.LimitType
	}
	return penum.GashaLimitType(0)
}

func (x *GashaButton) GetLimitCount() int32 {
	if x != nil {
		return x.LimitCount
	}
	return 0
}

func (x *GashaButton) GetResourceQuantity() int32 {
	if x != nil {
		return x.ResourceQuantity
	}
	return 0
}

func (x *GashaButton) GetMaxDrawCount() int32 {
	if x != nil {
		return x.MaxDrawCount
	}
	return 0
}

func (x *GashaButton) GetDiscountLimitType() penum.GashaLimitType {
	if x != nil {
		return x.DiscountLimitType
	}
	return penum.GashaLimitType(0)
}

func (x *GashaButton) GetDiscountLimitCount() int32 {
	if x != nil {
		return x.DiscountLimitCount
	}
	return 0
}

func (x *GashaButton) GetDiscountResourceQuantity() int32 {
	if x != nil {
		return x.DiscountResourceQuantity
	}
	return 0
}

func (x *GashaButton) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *GashaButton) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *GashaButton) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *GashaButton) GetAppealType() penum.GashaButtonAppealType {
	if x != nil {
		return x.AppealType
	}
	return penum.GashaButtonAppealType(0)
}

func (x *GashaButton) GetAppealText() string {
	if x != nil {
		return x.AppealText
	}
	return ""
}

type GashaButtonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*pcommon.GashaButton `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GashaButtonList) Reset() {
	*x = GashaButtonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GashaButtonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GashaButtonList) ProtoMessage() {}

func (x *GashaButtonList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GashaButtonList.ProtoReflect.Descriptor instead.
func (*GashaButtonList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{69}
}

func (x *GashaButtonList) GetList() []*pcommon.GashaButton {
	if x != nil {
		return x.List
	}
	return nil
}

type GuildDonationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId string `protobuf:"bytes,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Order  int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GuildDonationItem) Reset() {
	*x = GuildDonationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDonationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDonationItem) ProtoMessage() {}

func (x *GuildDonationItem) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDonationItem.ProtoReflect.Descriptor instead.
func (*GuildDonationItem) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{70}
}

func (x *GuildDonationItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *GuildDonationItem) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type GuildDonationItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GuildDonationItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GuildDonationItemList) Reset() {
	*x = GuildDonationItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDonationItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDonationItemList) ProtoMessage() {}

func (x *GuildDonationItemList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDonationItemList.ProtoReflect.Descriptor instead.
func (*GuildDonationItemList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{71}
}

func (x *GuildDonationItemList) GetList() []*GuildDonationItem {
	if x != nil {
		return x.List
	}
	return nil
}

type GuildReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId string `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Order   int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GuildReaction) Reset() {
	*x = GuildReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildReaction) ProtoMessage() {}

func (x *GuildReaction) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildReaction.ProtoReflect.Descriptor instead.
func (*GuildReaction) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{72}
}

func (x *GuildReaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuildReaction) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *GuildReaction) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type GuildReactionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GuildReaction `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GuildReactionList) Reset() {
	*x = GuildReactionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildReactionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildReactionList) ProtoMessage() {}

func (x *GuildReactionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildReactionList.ProtoReflect.Descriptor instead.
func (*GuildReactionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{73}
}

func (x *GuildReactionList) GetList() []*GuildReaction {
	if x != nil {
		return x.List
	}
	return nil
}

type HelpCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AssetIds       []string `protobuf:"bytes,3,rep,name=assetIds,proto3" json:"assetIds,omitempty"`
	Texts          []string `protobuf:"bytes,4,rep,name=texts,proto3" json:"texts,omitempty"`
	HiddenHelpList bool     `protobuf:"varint,5,opt,name=hiddenHelpList,proto3" json:"hiddenHelpList,omitempty"`
	Order          int32    `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *HelpCategory) Reset() {
	*x = HelpCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpCategory) ProtoMessage() {}

func (x *HelpCategory) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpCategory.ProtoReflect.Descriptor instead.
func (*HelpCategory) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{74}
}

func (x *HelpCategory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HelpCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelpCategory) GetAssetIds() []string {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

func (x *HelpCategory) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *HelpCategory) GetHiddenHelpList() bool {
	if x != nil {
		return x.HiddenHelpList
	}
	return false
}

func (x *HelpCategory) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type HelpCategoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HelpCategory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HelpCategoryList) Reset() {
	*x = HelpCategoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpCategoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpCategoryList) ProtoMessage() {}

func (x *HelpCategoryList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpCategoryList.ProtoReflect.Descriptor instead.
func (*HelpCategoryList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{75}
}

func (x *HelpCategoryList) GetList() []*HelpCategory {
	if x != nil {
		return x.List
	}
	return nil
}

type HelpContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HelpCategoryId string `protobuf:"bytes,1,opt,name=helpCategoryId,proto3" json:"helpCategoryId,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Order          int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	DetailUrl      string `protobuf:"bytes,99,opt,name=detailUrl,proto3" json:"detailUrl,omitempty"`
}

func (x *HelpContent) Reset() {
	*x = HelpContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpContent) ProtoMessage() {}

func (x *HelpContent) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpContent.ProtoReflect.Descriptor instead.
func (*HelpContent) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{76}
}

func (x *HelpContent) GetHelpCategoryId() string {
	if x != nil {
		return x.HelpCategoryId
	}
	return ""
}

func (x *HelpContent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HelpContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelpContent) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *HelpContent) GetDetailUrl() string {
	if x != nil {
		return x.DetailUrl
	}
	return ""
}

type HelpContentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HelpContent `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HelpContentList) Reset() {
	*x = HelpContentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpContentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpContentList) ProtoMessage() {}

func (x *HelpContentList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpContentList.ProtoReflect.Descriptor instead.
func (*HelpContentList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{77}
}

func (x *HelpContentList) GetList() []*HelpContent {
	if x != nil {
		return x.List
	}
	return nil
}

type HelpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	HelpCategoryIds    []string `protobuf:"bytes,3,rep,name=helpCategoryIds,proto3" json:"helpCategoryIds,omitempty"`
	OpenHelpCategoryId string   `protobuf:"bytes,4,opt,name=openHelpCategoryId,proto3" json:"openHelpCategoryId,omitempty"`
	OpenHelpContentId  string   `protobuf:"bytes,5,opt,name=openHelpContentId,proto3" json:"openHelpContentId,omitempty"`
}

func (x *HelpInfo) Reset() {
	*x = HelpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpInfo) ProtoMessage() {}

func (x *HelpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpInfo.ProtoReflect.Descriptor instead.
func (*HelpInfo) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{78}
}

func (x *HelpInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HelpInfo) GetHelpCategoryIds() []string {
	if x != nil {
		return x.HelpCategoryIds
	}
	return nil
}

func (x *HelpInfo) GetOpenHelpCategoryId() string {
	if x != nil {
		return x.OpenHelpCategoryId
	}
	return ""
}

func (x *HelpInfo) GetOpenHelpContentId() string {
	if x != nil {
		return x.OpenHelpContentId
	}
	return ""
}

type HelpInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HelpInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HelpInfoList) Reset() {
	*x = HelpInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpInfoList) ProtoMessage() {}

func (x *HelpInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpInfoList.ProtoReflect.Descriptor instead.
func (*HelpInfoList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{79}
}

func (x *HelpInfoList) GetList() []*HelpInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type HomeBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefabId       string `protobuf:"bytes,1,opt,name=prefabId,proto3" json:"prefabId,omitempty"`
	ConditionSetId string `protobuf:"bytes,3,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
	Priority       int32  `protobuf:"varint,99,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *HomeBoard) Reset() {
	*x = HomeBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBoard) ProtoMessage() {}

func (x *HomeBoard) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBoard.ProtoReflect.Descriptor instead.
func (*HomeBoard) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{80}
}

func (x *HomeBoard) GetPrefabId() string {
	if x != nil {
		return x.PrefabId
	}
	return ""
}

func (x *HomeBoard) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

func (x *HomeBoard) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type HomeBoardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HomeBoard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HomeBoardList) Reset() {
	*x = HomeBoardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBoardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBoardList) ProtoMessage() {}

func (x *HomeBoardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBoardList.ProtoReflect.Descriptor instead.
func (*HomeBoardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{81}
}

func (x *HomeBoardList) GetList() []*HomeBoard {
	if x != nil {
		return x.List
	}
	return nil
}

type HomeMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieAssetId   string `protobuf:"bytes,1,opt,name=movieAssetId,proto3" json:"movieAssetId,omitempty"`
	CharacterId    string `protobuf:"bytes,3,opt,name=characterId,proto3" json:"characterId,omitempty"`
	ConditionSetId string `protobuf:"bytes,4,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
	Priority       int32  `protobuf:"varint,99,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *HomeMonitor) Reset() {
	*x = HomeMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMonitor) ProtoMessage() {}

func (x *HomeMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMonitor.ProtoReflect.Descriptor instead.
func (*HomeMonitor) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{82}
}

func (x *HomeMonitor) GetMovieAssetId() string {
	if x != nil {
		return x.MovieAssetId
	}
	return ""
}

func (x *HomeMonitor) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *HomeMonitor) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

func (x *HomeMonitor) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type HomeMonitorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HomeMonitor `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HomeMonitorList) Reset() {
	*x = HomeMonitorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMonitorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMonitorList) ProtoMessage() {}

func (x *HomeMonitorList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMonitorList.ProtoReflect.Descriptor instead.
func (*HomeMonitorList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{83}
}

func (x *HomeMonitorList) GetList() []*HomeMonitor {
	if x != nil {
		return x.List
	}
	return nil
}

type HomeMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    string                 `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	LocationType   penum.HomeLocationType `protobuf:"varint,2,opt,name=locationType,proto3,enum=penum.HomeLocationType" json:"locationType,omitempty"`
	MotionType     penum.HomeMotionType   `protobuf:"varint,3,opt,name=motionType,proto3,enum=penum.HomeMotionType" json:"motionType,omitempty"`
	Number         int32                  `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	ConditionSetId string                 `protobuf:"bytes,5,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
	FacialAssetIds []string               `protobuf:"bytes,6,rep,name=facialAssetIds,proto3" json:"facialAssetIds,omitempty"`
	BodyAssetIds   []string               `protobuf:"bytes,7,rep,name=bodyAssetIds,proto3" json:"bodyAssetIds,omitempty"`
	VoiceAssetId   string                 `protobuf:"bytes,8,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
	IsPrioritized  bool                   `protobuf:"varint,9,opt,name=isPrioritized,proto3" json:"isPrioritized,omitempty"`
}

func (x *HomeMotion) Reset() {
	*x = HomeMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMotion) ProtoMessage() {}

func (x *HomeMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMotion.ProtoReflect.Descriptor instead.
func (*HomeMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{84}
}

func (x *HomeMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *HomeMotion) GetLocationType() penum.HomeLocationType {
	if x != nil {
		return x.LocationType
	}
	return penum.HomeLocationType(0)
}

func (x *HomeMotion) GetMotionType() penum.HomeMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.HomeMotionType(0)
}

func (x *HomeMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *HomeMotion) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

func (x *HomeMotion) GetFacialAssetIds() []string {
	if x != nil {
		return x.FacialAssetIds
	}
	return nil
}

func (x *HomeMotion) GetBodyAssetIds() []string {
	if x != nil {
		return x.BodyAssetIds
	}
	return nil
}

func (x *HomeMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

func (x *HomeMotion) GetIsPrioritized() bool {
	if x != nil {
		return x.IsPrioritized
	}
	return false
}

type HomeMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HomeMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HomeMotionList) Reset() {
	*x = HomeMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeMotionList) ProtoMessage() {}

func (x *HomeMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeMotionList.ProtoReflect.Descriptor instead.
func (*HomeMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{85}
}

func (x *HomeMotionList) GetList() []*HomeMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type HomeTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHour   int32              `protobuf:"varint,1,opt,name=startHour,proto3" json:"startHour,omitempty"`
	StartMinute int32              `protobuf:"varint,2,opt,name=startMinute,proto3" json:"startMinute,omitempty"`
	Type        penum.HomeTimeType `protobuf:"varint,3,opt,name=type,proto3,enum=penum.HomeTimeType" json:"type,omitempty"`
}

func (x *HomeTime) Reset() {
	*x = HomeTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeTime) ProtoMessage() {}

func (x *HomeTime) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeTime.ProtoReflect.Descriptor instead.
func (*HomeTime) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{86}
}

func (x *HomeTime) GetStartHour() int32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *HomeTime) GetStartMinute() int32 {
	if x != nil {
		return x.StartMinute
	}
	return 0
}

func (x *HomeTime) GetType() penum.HomeTimeType {
	if x != nil {
		return x.Type
	}
	return penum.HomeTimeType(0)
}

type HomeTimeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HomeTime `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HomeTimeList) Reset() {
	*x = HomeTimeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeTimeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeTimeList) ProtoMessage() {}

func (x *HomeTimeList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeTimeList.ProtoReflect.Descriptor instead.
func (*HomeTimeList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{87}
}

func (x *HomeTimeList) GetList() []*HomeTime {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                               string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CharacterId                      string                      `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	OriginalIdolCardSkinId           string                      `protobuf:"bytes,3,opt,name=originalIdolCardSkinId,proto3" json:"originalIdolCardSkinId,omitempty"`
	AssetId                          string                      `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Name                             string                      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Rarity                           penum.IdolCardRarity        `protobuf:"varint,7,opt,name=rarity,proto3,enum=penum.IdolCardRarity" json:"rarity,omitempty"`
	IsLimited                        bool                        `protobuf:"varint,8,opt,name=isLimited,proto3" json:"isLimited,omitempty"`
	AnotherCostumeHeadId             string                      `protobuf:"bytes,11,opt,name=anotherCostumeHeadId,proto3" json:"anotherCostumeHeadId,omitempty"`
	AnotherCostumeId                 string                      `protobuf:"bytes,12,opt,name=anotherCostumeId,proto3" json:"anotherCostumeId,omitempty"`
	IdolCardPotentialId              string                      `protobuf:"bytes,13,opt,name=idolCardPotentialId,proto3" json:"idolCardPotentialId,omitempty"`
	IdolCardPotentialProduceSkillId  string                      `protobuf:"bytes,14,opt,name=idolCardPotentialProduceSkillId,proto3" json:"idolCardPotentialProduceSkillId,omitempty"`
	IdolCardLevelLimitId             string                      `protobuf:"bytes,15,opt,name=idolCardLevelLimitId,proto3" json:"idolCardLevelLimitId,omitempty"`
	IdolCardLevelLimitProduceSkillId string                      `protobuf:"bytes,16,opt,name=idolCardLevelLimitProduceSkillId,proto3" json:"idolCardLevelLimitProduceSkillId,omitempty"`
	PlanType                         penum.ProducePlanType       `protobuf:"varint,30,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	IdolCardLevelLimitStatusUpId     string                      `protobuf:"bytes,31,opt,name=idolCardLevelLimitStatusUpId,proto3" json:"idolCardLevelLimitStatusUpId,omitempty"`
	ProduceVocal                     int32                       `protobuf:"varint,32,opt,name=produceVocal,proto3" json:"produceVocal,omitempty"`
	ProduceDance                     int32                       `protobuf:"varint,33,opt,name=produceDance,proto3" json:"produceDance,omitempty"`
	ProduceVisual                    int32                       `protobuf:"varint,34,opt,name=produceVisual,proto3" json:"produceVisual,omitempty"`
	ProduceVocalGrowthRatePermil     int32                       `protobuf:"varint,35,opt,name=produceVocalGrowthRatePermil,proto3" json:"produceVocalGrowthRatePermil,omitempty"`
	ProduceDanceGrowthRatePermil     int32                       `protobuf:"varint,36,opt,name=produceDanceGrowthRatePermil,proto3" json:"produceDanceGrowthRatePermil,omitempty"`
	ProduceVisualGrowthRatePermil    int32                       `protobuf:"varint,37,opt,name=produceVisualGrowthRatePermil,proto3" json:"produceVisualGrowthRatePermil,omitempty"`
	ProduceStamina                   int32                       `protobuf:"varint,38,opt,name=produceStamina,proto3" json:"produceStamina,omitempty"`
	ProduceStepAuditionDifficultyId  string                      `protobuf:"bytes,39,opt,name=produceStepAuditionDifficultyId,proto3" json:"produceStepAuditionDifficultyId,omitempty"`
	ExamInitialDeckId                string                      `protobuf:"bytes,42,opt,name=examInitialDeckId,proto3" json:"examInitialDeckId,omitempty"`
	ProduceCardId                    string                      `protobuf:"bytes,43,opt,name=produceCardId,proto3" json:"produceCardId,omitempty"`
	BeforeProduceItemId              string                      `protobuf:"bytes,44,opt,name=beforeProduceItemId,proto3" json:"beforeProduceItemId,omitempty"`
	AfterProduceItemId               string                      `protobuf:"bytes,45,opt,name=afterProduceItemId,proto3" json:"afterProduceItemId,omitempty"`
	ExamEffectType                   penum.ProduceExamEffectType `protobuf:"varint,48,opt,name=examEffectType,proto3,enum=penum.ProduceExamEffectType" json:"examEffectType,omitempty"`
	ProduceChallengeSlotId           string                      `protobuf:"bytes,49,opt,name=produceChallengeSlotId,proto3" json:"produceChallengeSlotId,omitempty"`
	PotentialRankVoiceAssetId        string                      `protobuf:"bytes,72,opt,name=potentialRankVoiceAssetId,proto3" json:"potentialRankVoiceAssetId,omitempty"`
	ProduceSelectVoiceAssetId        string                      `protobuf:"bytes,75,opt,name=produceSelectVoiceAssetId,proto3" json:"produceSelectVoiceAssetId,omitempty"`
	ProduceScheduleFrontVoiceGroupId string                      `protobuf:"bytes,76,opt,name=produceScheduleFrontVoiceGroupId,proto3" json:"produceScheduleFrontVoiceGroupId,omitempty"`
	ProduceScheduleBackVoiceGroupId  string                      `protobuf:"bytes,77,opt,name=produceScheduleBackVoiceGroupId,proto3" json:"produceScheduleBackVoiceGroupId,omitempty"`
	UseProduceCardVoiceAssetId       string                      `protobuf:"bytes,78,opt,name=useProduceCardVoiceAssetId,proto3" json:"useProduceCardVoiceAssetId,omitempty"`
	ViewStartTime                    int64                       `protobuf:"varint,999,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	Order                            int64                       `protobuf:"varint,1000,opt,name=order,proto3" json:"order,omitempty"`
	ProduceStoryIds                  []string                    `protobuf:"bytes,1005,rep,name=produceStoryIds,proto3" json:"produceStoryIds,omitempty"`
	AchievementIds                   []string                    `protobuf:"bytes,1004,rep,name=achievementIds,proto3" json:"achievementIds,omitempty"`
}

func (x *IdolCard) Reset() {
	*x = IdolCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCard) ProtoMessage() {}

func (x *IdolCard) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCard.ProtoReflect.Descriptor instead.
func (*IdolCard) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{88}
}

func (x *IdolCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCard) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *IdolCard) GetOriginalIdolCardSkinId() string {
	if x != nil {
		return x.OriginalIdolCardSkinId
	}
	return ""
}

func (x *IdolCard) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *IdolCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IdolCard) GetRarity() penum.IdolCardRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.IdolCardRarity(0)
}

func (x *IdolCard) GetIsLimited() bool {
	if x != nil {
		return x.IsLimited
	}
	return false
}

func (x *IdolCard) GetAnotherCostumeHeadId() string {
	if x != nil {
		return x.AnotherCostumeHeadId
	}
	return ""
}

func (x *IdolCard) GetAnotherCostumeId() string {
	if x != nil {
		return x.AnotherCostumeId
	}
	return ""
}

func (x *IdolCard) GetIdolCardPotentialId() string {
	if x != nil {
		return x.IdolCardPotentialId
	}
	return ""
}

func (x *IdolCard) GetIdolCardPotentialProduceSkillId() string {
	if x != nil {
		return x.IdolCardPotentialProduceSkillId
	}
	return ""
}

func (x *IdolCard) GetIdolCardLevelLimitId() string {
	if x != nil {
		return x.IdolCardLevelLimitId
	}
	return ""
}

func (x *IdolCard) GetIdolCardLevelLimitProduceSkillId() string {
	if x != nil {
		return x.IdolCardLevelLimitProduceSkillId
	}
	return ""
}

func (x *IdolCard) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *IdolCard) GetIdolCardLevelLimitStatusUpId() string {
	if x != nil {
		return x.IdolCardLevelLimitStatusUpId
	}
	return ""
}

func (x *IdolCard) GetProduceVocal() int32 {
	if x != nil {
		return x.ProduceVocal
	}
	return 0
}

func (x *IdolCard) GetProduceDance() int32 {
	if x != nil {
		return x.ProduceDance
	}
	return 0
}

func (x *IdolCard) GetProduceVisual() int32 {
	if x != nil {
		return x.ProduceVisual
	}
	return 0
}

func (x *IdolCard) GetProduceVocalGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceVocalGrowthRatePermil
	}
	return 0
}

func (x *IdolCard) GetProduceDanceGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceDanceGrowthRatePermil
	}
	return 0
}

func (x *IdolCard) GetProduceVisualGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceVisualGrowthRatePermil
	}
	return 0
}

func (x *IdolCard) GetProduceStamina() int32 {
	if x != nil {
		return x.ProduceStamina
	}
	return 0
}

func (x *IdolCard) GetProduceStepAuditionDifficultyId() string {
	if x != nil {
		return x.ProduceStepAuditionDifficultyId
	}
	return ""
}

func (x *IdolCard) GetExamInitialDeckId() string {
	if x != nil {
		return x.ExamInitialDeckId
	}
	return ""
}

func (x *IdolCard) GetProduceCardId() string {
	if x != nil {
		return x.ProduceCardId
	}
	return ""
}

func (x *IdolCard) GetBeforeProduceItemId() string {
	if x != nil {
		return x.BeforeProduceItemId
	}
	return ""
}

func (x *IdolCard) GetAfterProduceItemId() string {
	if x != nil {
		return x.AfterProduceItemId
	}
	return ""
}

func (x *IdolCard) GetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.ExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *IdolCard) GetProduceChallengeSlotId() string {
	if x != nil {
		return x.ProduceChallengeSlotId
	}
	return ""
}

func (x *IdolCard) GetPotentialRankVoiceAssetId() string {
	if x != nil {
		return x.PotentialRankVoiceAssetId
	}
	return ""
}

func (x *IdolCard) GetProduceSelectVoiceAssetId() string {
	if x != nil {
		return x.ProduceSelectVoiceAssetId
	}
	return ""
}

func (x *IdolCard) GetProduceScheduleFrontVoiceGroupId() string {
	if x != nil {
		return x.ProduceScheduleFrontVoiceGroupId
	}
	return ""
}

func (x *IdolCard) GetProduceScheduleBackVoiceGroupId() string {
	if x != nil {
		return x.ProduceScheduleBackVoiceGroupId
	}
	return ""
}

func (x *IdolCard) GetUseProduceCardVoiceAssetId() string {
	if x != nil {
		return x.UseProduceCardVoiceAssetId
	}
	return ""
}

func (x *IdolCard) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *IdolCard) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *IdolCard) GetProduceStoryIds() []string {
	if x != nil {
		return x.ProduceStoryIds
	}
	return nil
}

func (x *IdolCard) GetAchievementIds() []string {
	if x != nil {
		return x.AchievementIds
	}
	return nil
}

type IdolCardLevelLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rank             penum.IdolCardLevelLimitRank `protobuf:"varint,2,opt,name=rank,proto3,enum=penum.IdolCardLevelLimitRank" json:"rank,omitempty"`
	ConsumptionSetId string                       `protobuf:"bytes,3,opt,name=consumptionSetId,proto3" json:"consumptionSetId,omitempty"`
}

func (x *IdolCardLevelLimit) Reset() {
	*x = IdolCardLevelLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardLevelLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardLevelLimit) ProtoMessage() {}

func (x *IdolCardLevelLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardLevelLimit.ProtoReflect.Descriptor instead.
func (*IdolCardLevelLimit) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{89}
}

func (x *IdolCardLevelLimit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCardLevelLimit) GetRank() penum.IdolCardLevelLimitRank {
	if x != nil {
		return x.Rank
	}
	return penum.IdolCardLevelLimitRank(0)
}

func (x *IdolCardLevelLimit) GetConsumptionSetId() string {
	if x != nil {
		return x.ConsumptionSetId
	}
	return ""
}

type IdolCardLevelLimitList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardLevelLimit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardLevelLimitList) Reset() {
	*x = IdolCardLevelLimitList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardLevelLimitList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardLevelLimitList) ProtoMessage() {}

func (x *IdolCardLevelLimitList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardLevelLimitList.ProtoReflect.Descriptor instead.
func (*IdolCardLevelLimitList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{90}
}

func (x *IdolCardLevelLimitList) GetList() []*IdolCardLevelLimit {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardLevelLimitProduceSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceSkillId    string                       `protobuf:"bytes,2,opt,name=produceSkillId,proto3" json:"produceSkillId,omitempty"`
	ProduceSkillLevel int32                        `protobuf:"varint,3,opt,name=produceSkillLevel,proto3" json:"produceSkillLevel,omitempty"`
	Rank              penum.IdolCardLevelLimitRank `protobuf:"varint,4,opt,name=rank,proto3,enum=penum.IdolCardLevelLimitRank" json:"rank,omitempty"`
	Order             int32                        `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *IdolCardLevelLimitProduceSkill) Reset() {
	*x = IdolCardLevelLimitProduceSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardLevelLimitProduceSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardLevelLimitProduceSkill) ProtoMessage() {}

func (x *IdolCardLevelLimitProduceSkill) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardLevelLimitProduceSkill.ProtoReflect.Descriptor instead.
func (*IdolCardLevelLimitProduceSkill) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{91}
}

func (x *IdolCardLevelLimitProduceSkill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCardLevelLimitProduceSkill) GetProduceSkillId() string {
	if x != nil {
		return x.ProduceSkillId
	}
	return ""
}

func (x *IdolCardLevelLimitProduceSkill) GetProduceSkillLevel() int32 {
	if x != nil {
		return x.ProduceSkillLevel
	}
	return 0
}

func (x *IdolCardLevelLimitProduceSkill) GetRank() penum.IdolCardLevelLimitRank {
	if x != nil {
		return x.Rank
	}
	return penum.IdolCardLevelLimitRank(0)
}

func (x *IdolCardLevelLimitProduceSkill) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type IdolCardLevelLimitProduceSkillList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardLevelLimitProduceSkill `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardLevelLimitProduceSkillList) Reset() {
	*x = IdolCardLevelLimitProduceSkillList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardLevelLimitProduceSkillList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardLevelLimitProduceSkillList) ProtoMessage() {}

func (x *IdolCardLevelLimitProduceSkillList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardLevelLimitProduceSkillList.ProtoReflect.Descriptor instead.
func (*IdolCardLevelLimitProduceSkillList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{92}
}

func (x *IdolCardLevelLimitProduceSkillList) GetList() []*IdolCardLevelLimitProduceSkill {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardLevelLimitStatusUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rank                 penum.IdolCardLevelLimitRank         `protobuf:"varint,2,opt,name=rank,proto3,enum=penum.IdolCardLevelLimitRank" json:"rank,omitempty"`
	EffectTypes          []penum.IdolCardLevelLimitEffectType `protobuf:"varint,3,rep,packed,name=effectTypes,proto3,enum=penum.IdolCardLevelLimitEffectType" json:"effectTypes,omitempty"`
	EffectValue          int32                                `protobuf:"varint,4,opt,name=effectValue,proto3" json:"effectValue,omitempty"`
	ProduceVocal         int32                                `protobuf:"varint,5,opt,name=produceVocal,proto3" json:"produceVocal,omitempty"`
	ProduceDance         int32                                `protobuf:"varint,6,opt,name=produceDance,proto3" json:"produceDance,omitempty"`
	ProduceVisual        int32                                `protobuf:"varint,7,opt,name=produceVisual,proto3" json:"produceVisual,omitempty"`
	IsIllustrationChange bool                                 `protobuf:"varint,8,opt,name=isIllustrationChange,proto3" json:"isIllustrationChange,omitempty"`
}

func (x *IdolCardLevelLimitStatusUp) Reset() {
	*x = IdolCardLevelLimitStatusUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardLevelLimitStatusUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardLevelLimitStatusUp) ProtoMessage() {}

func (x *IdolCardLevelLimitStatusUp) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardLevelLimitStatusUp.ProtoReflect.Descriptor instead.
func (*IdolCardLevelLimitStatusUp) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{93}
}

func (x *IdolCardLevelLimitStatusUp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCardLevelLimitStatusUp) GetRank() penum.IdolCardLevelLimitRank {
	if x != nil {
		return x.Rank
	}
	return penum.IdolCardLevelLimitRank(0)
}

func (x *IdolCardLevelLimitStatusUp) GetEffectTypes() []penum.IdolCardLevelLimitEffectType {
	if x != nil {
		return x.EffectTypes
	}
	return nil
}

func (x *IdolCardLevelLimitStatusUp) GetEffectValue() int32 {
	if x != nil {
		return x.EffectValue
	}
	return 0
}

func (x *IdolCardLevelLimitStatusUp) GetProduceVocal() int32 {
	if x != nil {
		return x.ProduceVocal
	}
	return 0
}

func (x *IdolCardLevelLimitStatusUp) GetProduceDance() int32 {
	if x != nil {
		return x.ProduceDance
	}
	return 0
}

func (x *IdolCardLevelLimitStatusUp) GetProduceVisual() int32 {
	if x != nil {
		return x.ProduceVisual
	}
	return 0
}

func (x *IdolCardLevelLimitStatusUp) GetIsIllustrationChange() bool {
	if x != nil {
		return x.IsIllustrationChange
	}
	return false
}

type IdolCardLevelLimitStatusUpList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardLevelLimitStatusUp `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardLevelLimitStatusUpList) Reset() {
	*x = IdolCardLevelLimitStatusUpList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardLevelLimitStatusUpList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardLevelLimitStatusUpList) ProtoMessage() {}

func (x *IdolCardLevelLimitStatusUpList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardLevelLimitStatusUpList.ProtoReflect.Descriptor instead.
func (*IdolCardLevelLimitStatusUpList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{94}
}

func (x *IdolCardLevelLimitStatusUpList) GetList() []*IdolCardLevelLimitStatusUp {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*pcommon.IdolCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardList) Reset() {
	*x = IdolCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardList) ProtoMessage() {}

func (x *IdolCardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardList.ProtoReflect.Descriptor instead.
func (*IdolCardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{95}
}

func (x *IdolCardList) GetList() []*pcommon.IdolCard {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardPiece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdolCardId                 string          `protobuf:"bytes,1,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	ItemId                     string          `protobuf:"bytes,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	ReleaseConsumptionQuantity int32           `protobuf:"varint,3,opt,name=releaseConsumptionQuantity,proto3" json:"releaseConsumptionQuantity,omitempty"`
	ExchangeReward             *pcommon.Reward `protobuf:"bytes,7,opt,name=exchangeReward,proto3" json:"exchangeReward,omitempty"`
}

func (x *IdolCardPiece) Reset() {
	*x = IdolCardPiece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPiece) ProtoMessage() {}

func (x *IdolCardPiece) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPiece.ProtoReflect.Descriptor instead.
func (*IdolCardPiece) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{96}
}

func (x *IdolCardPiece) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *IdolCardPiece) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *IdolCardPiece) GetReleaseConsumptionQuantity() int32 {
	if x != nil {
		return x.ReleaseConsumptionQuantity
	}
	return 0
}

func (x *IdolCardPiece) GetExchangeReward() *pcommon.Reward {
	if x != nil {
		return x.ExchangeReward
	}
	return nil
}

type IdolCardPieceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardPiece `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardPieceList) Reset() {
	*x = IdolCardPieceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPieceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPieceList) ProtoMessage() {}

func (x *IdolCardPieceList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPieceList.ProtoReflect.Descriptor instead.
func (*IdolCardPieceList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{97}
}

func (x *IdolCardPieceList) GetList() []*IdolCardPiece {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardPieceQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rarity   penum.IdolCardRarity `protobuf:"varint,1,opt,name=rarity,proto3,enum=penum.IdolCardRarity" json:"rarity,omitempty"`
	Quantity int32                `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *IdolCardPieceQuantity) Reset() {
	*x = IdolCardPieceQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPieceQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPieceQuantity) ProtoMessage() {}

func (x *IdolCardPieceQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPieceQuantity.ProtoReflect.Descriptor instead.
func (*IdolCardPieceQuantity) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{98}
}

func (x *IdolCardPieceQuantity) GetRarity() penum.IdolCardRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.IdolCardRarity(0)
}

func (x *IdolCardPieceQuantity) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type IdolCardPieceQuantityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardPieceQuantity `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardPieceQuantityList) Reset() {
	*x = IdolCardPieceQuantityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPieceQuantityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPieceQuantityList) ProtoMessage() {}

func (x *IdolCardPieceQuantityList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPieceQuantityList.ProtoReflect.Descriptor instead.
func (*IdolCardPieceQuantityList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{99}
}

func (x *IdolCardPieceQuantityList) GetList() []*IdolCardPieceQuantity {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardPotential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rank                          penum.IdolCardPotentialRank         `protobuf:"varint,2,opt,name=rank,proto3,enum=penum.IdolCardPotentialRank" json:"rank,omitempty"`
	EffectTypes                   []penum.IdolCardPotentialEffectType `protobuf:"varint,3,rep,packed,name=effectTypes,proto3,enum=penum.IdolCardPotentialEffectType" json:"effectTypes,omitempty"`
	EffectValue                   int32                               `protobuf:"varint,4,opt,name=effectValue,proto3" json:"effectValue,omitempty"`
	ProduceVocalGrowthRatePermil  int32                               `protobuf:"varint,5,opt,name=produceVocalGrowthRatePermil,proto3" json:"produceVocalGrowthRatePermil,omitempty"`
	ProduceDanceGrowthRatePermil  int32                               `protobuf:"varint,6,opt,name=produceDanceGrowthRatePermil,proto3" json:"produceDanceGrowthRatePermil,omitempty"`
	ProduceVisualGrowthRatePermil int32                               `protobuf:"varint,7,opt,name=produceVisualGrowthRatePermil,proto3" json:"produceVisualGrowthRatePermil,omitempty"`
	AnotherCostumeProvide         bool                                `protobuf:"varint,8,opt,name=anotherCostumeProvide,proto3" json:"anotherCostumeProvide,omitempty"`
	ConsumptionPiece              int32                               `protobuf:"varint,9,opt,name=consumptionPiece,proto3" json:"consumptionPiece,omitempty"`
}

func (x *IdolCardPotential) Reset() {
	*x = IdolCardPotential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPotential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPotential) ProtoMessage() {}

func (x *IdolCardPotential) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPotential.ProtoReflect.Descriptor instead.
func (*IdolCardPotential) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{100}
}

func (x *IdolCardPotential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCardPotential) GetRank() penum.IdolCardPotentialRank {
	if x != nil {
		return x.Rank
	}
	return penum.IdolCardPotentialRank(0)
}

func (x *IdolCardPotential) GetEffectTypes() []penum.IdolCardPotentialEffectType {
	if x != nil {
		return x.EffectTypes
	}
	return nil
}

func (x *IdolCardPotential) GetEffectValue() int32 {
	if x != nil {
		return x.EffectValue
	}
	return 0
}

func (x *IdolCardPotential) GetProduceVocalGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceVocalGrowthRatePermil
	}
	return 0
}

func (x *IdolCardPotential) GetProduceDanceGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceDanceGrowthRatePermil
	}
	return 0
}

func (x *IdolCardPotential) GetProduceVisualGrowthRatePermil() int32 {
	if x != nil {
		return x.ProduceVisualGrowthRatePermil
	}
	return 0
}

func (x *IdolCardPotential) GetAnotherCostumeProvide() bool {
	if x != nil {
		return x.AnotherCostumeProvide
	}
	return false
}

func (x *IdolCardPotential) GetConsumptionPiece() int32 {
	if x != nil {
		return x.ConsumptionPiece
	}
	return 0
}

type IdolCardPotentialList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardPotential `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardPotentialList) Reset() {
	*x = IdolCardPotentialList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPotentialList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPotentialList) ProtoMessage() {}

func (x *IdolCardPotentialList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPotentialList.ProtoReflect.Descriptor instead.
func (*IdolCardPotentialList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{101}
}

func (x *IdolCardPotentialList) GetList() []*IdolCardPotential {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardPotentialProduceSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceSkillId    string                      `protobuf:"bytes,2,opt,name=produceSkillId,proto3" json:"produceSkillId,omitempty"`
	ProduceSkillLevel int32                       `protobuf:"varint,3,opt,name=produceSkillLevel,proto3" json:"produceSkillLevel,omitempty"`
	Rank              penum.IdolCardPotentialRank `protobuf:"varint,4,opt,name=rank,proto3,enum=penum.IdolCardPotentialRank" json:"rank,omitempty"`
	Order             int32                       `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *IdolCardPotentialProduceSkill) Reset() {
	*x = IdolCardPotentialProduceSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPotentialProduceSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPotentialProduceSkill) ProtoMessage() {}

func (x *IdolCardPotentialProduceSkill) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPotentialProduceSkill.ProtoReflect.Descriptor instead.
func (*IdolCardPotentialProduceSkill) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{102}
}

func (x *IdolCardPotentialProduceSkill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCardPotentialProduceSkill) GetProduceSkillId() string {
	if x != nil {
		return x.ProduceSkillId
	}
	return ""
}

func (x *IdolCardPotentialProduceSkill) GetProduceSkillLevel() int32 {
	if x != nil {
		return x.ProduceSkillLevel
	}
	return 0
}

func (x *IdolCardPotentialProduceSkill) GetRank() penum.IdolCardPotentialRank {
	if x != nil {
		return x.Rank
	}
	return penum.IdolCardPotentialRank(0)
}

func (x *IdolCardPotentialProduceSkill) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type IdolCardPotentialProduceSkillList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardPotentialProduceSkill `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardPotentialProduceSkillList) Reset() {
	*x = IdolCardPotentialProduceSkillList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardPotentialProduceSkillList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardPotentialProduceSkillList) ProtoMessage() {}

func (x *IdolCardPotentialProduceSkillList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardPotentialProduceSkillList.ProtoReflect.Descriptor instead.
func (*IdolCardPotentialProduceSkillList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{103}
}

func (x *IdolCardPotentialProduceSkillList) GetList() []*IdolCardPotentialProduceSkill {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardSimulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdolCardId                   string `protobuf:"bytes,1,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	Number                       int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	ProduceCardSimulationGroupId string `protobuf:"bytes,3,opt,name=produceCardSimulationGroupId,proto3" json:"produceCardSimulationGroupId,omitempty"`
	ProduceItemSimulationGroupId string `protobuf:"bytes,4,opt,name=produceItemSimulationGroupId,proto3" json:"produceItemSimulationGroupId,omitempty"`
	SupportCardSimulationGroupId string `protobuf:"bytes,5,opt,name=supportCardSimulationGroupId,proto3" json:"supportCardSimulationGroupId,omitempty"`
	ExamSimulationId             string `protobuf:"bytes,6,opt,name=examSimulationId,proto3" json:"examSimulationId,omitempty"`
}

func (x *IdolCardSimulation) Reset() {
	*x = IdolCardSimulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardSimulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardSimulation) ProtoMessage() {}

func (x *IdolCardSimulation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardSimulation.ProtoReflect.Descriptor instead.
func (*IdolCardSimulation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{104}
}

func (x *IdolCardSimulation) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *IdolCardSimulation) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *IdolCardSimulation) GetProduceCardSimulationGroupId() string {
	if x != nil {
		return x.ProduceCardSimulationGroupId
	}
	return ""
}

func (x *IdolCardSimulation) GetProduceItemSimulationGroupId() string {
	if x != nil {
		return x.ProduceItemSimulationGroupId
	}
	return ""
}

func (x *IdolCardSimulation) GetSupportCardSimulationGroupId() string {
	if x != nil {
		return x.SupportCardSimulationGroupId
	}
	return ""
}

func (x *IdolCardSimulation) GetExamSimulationId() string {
	if x != nil {
		return x.ExamSimulationId
	}
	return ""
}

type IdolCardSimulationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardSimulation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardSimulationList) Reset() {
	*x = IdolCardSimulationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardSimulationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardSimulationList) ProtoMessage() {}

func (x *IdolCardSimulationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardSimulationList.ProtoReflect.Descriptor instead.
func (*IdolCardSimulationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{105}
}

func (x *IdolCardSimulationList) GetList() []*IdolCardSimulation {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IdolCardId                            string  `protobuf:"bytes,2,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	Name                                  string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AssetId                               string  `protobuf:"bytes,5,opt,name=assetId,proto3" json:"assetId,omitempty"`
	CostumeHeadId                         string  `protobuf:"bytes,8,opt,name=costumeHeadId,proto3" json:"costumeHeadId,omitempty"`
	CostumeId                             string  `protobuf:"bytes,9,opt,name=costumeId,proto3" json:"costumeId,omitempty"`
	MusicId                               string  `protobuf:"bytes,10,opt,name=musicId,proto3" json:"musicId,omitempty"`
	IdolCardSsrAnimationStartMilliseconds int32   `protobuf:"varint,11,opt,name=idolCardSsrAnimationStartMilliseconds,proto3" json:"idolCardSsrAnimationStartMilliseconds,omitempty"`
	HomeVoiceGroupId                      string  `protobuf:"bytes,50,opt,name=homeVoiceGroupId,proto3" json:"homeVoiceGroupId,omitempty"`
	DetailVoiceGroupId                    string  `protobuf:"bytes,51,opt,name=detailVoiceGroupId,proto3" json:"detailVoiceGroupId,omitempty"`
	BeforeLevelLimitRankVoiceAssetId      string  `protobuf:"bytes,52,opt,name=beforeLevelLimitRankVoiceAssetId,proto3" json:"beforeLevelLimitRankVoiceAssetId,omitempty"`
	AfterLevelLimitRankVoiceAssetId       string  `protobuf:"bytes,53,opt,name=afterLevelLimitRankVoiceAssetId,proto3" json:"afterLevelLimitRankVoiceAssetId,omitempty"`
	ProduceSelectVoiceAssetId             string  `protobuf:"bytes,54,opt,name=produceSelectVoiceAssetId,proto3" json:"produceSelectVoiceAssetId,omitempty"`
	ProduceSelectFacialAssetId            string  `protobuf:"bytes,55,opt,name=produceSelectFacialAssetId,proto3" json:"produceSelectFacialAssetId,omitempty"`
	ProduceSelectBodyAssetId              string  `protobuf:"bytes,56,opt,name=produceSelectBodyAssetId,proto3" json:"produceSelectBodyAssetId,omitempty"`
	ProduceScheduleVoiceGroupId           string  `protobuf:"bytes,57,opt,name=produceScheduleVoiceGroupId,proto3" json:"produceScheduleVoiceGroupId,omitempty"`
	HasProduceIdolAnimation               bool    `protobuf:"varint,70,opt,name=hasProduceIdolAnimation,proto3" json:"hasProduceIdolAnimation,omitempty"`
	HasGashaAnimation                     bool    `protobuf:"varint,71,opt,name=hasGashaAnimation,proto3" json:"hasGashaAnimation,omitempty"`
	BeforeListPositionX                   float32 `protobuf:"fixed32,100,opt,name=beforeListPositionX,proto3" json:"beforeListPositionX,omitempty"`
	BeforeListPositionY                   float32 `protobuf:"fixed32,101,opt,name=beforeListPositionY,proto3" json:"beforeListPositionY,omitempty"`
	BeforeListScale                       float32 `protobuf:"fixed32,102,opt,name=beforeListScale,proto3" json:"beforeListScale,omitempty"`
	AfterListPositionX                    float32 `protobuf:"fixed32,103,opt,name=afterListPositionX,proto3" json:"afterListPositionX,omitempty"`
	AfterListPositionY                    float32 `protobuf:"fixed32,104,opt,name=afterListPositionY,proto3" json:"afterListPositionY,omitempty"`
	AfterListScale                        float32 `protobuf:"fixed32,105,opt,name=afterListScale,proto3" json:"afterListScale,omitempty"`
	BeforeDetailPositionX                 float32 `protobuf:"fixed32,106,opt,name=beforeDetailPositionX,proto3" json:"beforeDetailPositionX,omitempty"`
	BeforeDetailPositionY                 float32 `protobuf:"fixed32,107,opt,name=beforeDetailPositionY,proto3" json:"beforeDetailPositionY,omitempty"`
	BeforeDetailScale                     float32 `protobuf:"fixed32,108,opt,name=beforeDetailScale,proto3" json:"beforeDetailScale,omitempty"`
	AfterDetailPositionX                  float32 `protobuf:"fixed32,109,opt,name=afterDetailPositionX,proto3" json:"afterDetailPositionX,omitempty"`
	AfterDetailPositionY                  float32 `protobuf:"fixed32,110,opt,name=afterDetailPositionY,proto3" json:"afterDetailPositionY,omitempty"`
	AfterDetailScale                      float32 `protobuf:"fixed32,111,opt,name=afterDetailScale,proto3" json:"afterDetailScale,omitempty"`
	ViewStartTime                         int64   `protobuf:"varint,999,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	Order                                 int64   `protobuf:"varint,1000,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *IdolCardSkin) Reset() {
	*x = IdolCardSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardSkin) ProtoMessage() {}

func (x *IdolCardSkin) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardSkin.ProtoReflect.Descriptor instead.
func (*IdolCardSkin) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{106}
}

func (x *IdolCardSkin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCardSkin) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *IdolCardSkin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IdolCardSkin) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *IdolCardSkin) GetCostumeHeadId() string {
	if x != nil {
		return x.CostumeHeadId
	}
	return ""
}

func (x *IdolCardSkin) GetCostumeId() string {
	if x != nil {
		return x.CostumeId
	}
	return ""
}

func (x *IdolCardSkin) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *IdolCardSkin) GetIdolCardSsrAnimationStartMilliseconds() int32 {
	if x != nil {
		return x.IdolCardSsrAnimationStartMilliseconds
	}
	return 0
}

func (x *IdolCardSkin) GetHomeVoiceGroupId() string {
	if x != nil {
		return x.HomeVoiceGroupId
	}
	return ""
}

func (x *IdolCardSkin) GetDetailVoiceGroupId() string {
	if x != nil {
		return x.DetailVoiceGroupId
	}
	return ""
}

func (x *IdolCardSkin) GetBeforeLevelLimitRankVoiceAssetId() string {
	if x != nil {
		return x.BeforeLevelLimitRankVoiceAssetId
	}
	return ""
}

func (x *IdolCardSkin) GetAfterLevelLimitRankVoiceAssetId() string {
	if x != nil {
		return x.AfterLevelLimitRankVoiceAssetId
	}
	return ""
}

func (x *IdolCardSkin) GetProduceSelectVoiceAssetId() string {
	if x != nil {
		return x.ProduceSelectVoiceAssetId
	}
	return ""
}

func (x *IdolCardSkin) GetProduceSelectFacialAssetId() string {
	if x != nil {
		return x.ProduceSelectFacialAssetId
	}
	return ""
}

func (x *IdolCardSkin) GetProduceSelectBodyAssetId() string {
	if x != nil {
		return x.ProduceSelectBodyAssetId
	}
	return ""
}

func (x *IdolCardSkin) GetProduceScheduleVoiceGroupId() string {
	if x != nil {
		return x.ProduceScheduleVoiceGroupId
	}
	return ""
}

func (x *IdolCardSkin) GetHasProduceIdolAnimation() bool {
	if x != nil {
		return x.HasProduceIdolAnimation
	}
	return false
}

func (x *IdolCardSkin) GetHasGashaAnimation() bool {
	if x != nil {
		return x.HasGashaAnimation
	}
	return false
}

func (x *IdolCardSkin) GetBeforeListPositionX() float32 {
	if x != nil {
		return x.BeforeListPositionX
	}
	return 0
}

func (x *IdolCardSkin) GetBeforeListPositionY() float32 {
	if x != nil {
		return x.BeforeListPositionY
	}
	return 0
}

func (x *IdolCardSkin) GetBeforeListScale() float32 {
	if x != nil {
		return x.BeforeListScale
	}
	return 0
}

func (x *IdolCardSkin) GetAfterListPositionX() float32 {
	if x != nil {
		return x.AfterListPositionX
	}
	return 0
}

func (x *IdolCardSkin) GetAfterListPositionY() float32 {
	if x != nil {
		return x.AfterListPositionY
	}
	return 0
}

func (x *IdolCardSkin) GetAfterListScale() float32 {
	if x != nil {
		return x.AfterListScale
	}
	return 0
}

func (x *IdolCardSkin) GetBeforeDetailPositionX() float32 {
	if x != nil {
		return x.BeforeDetailPositionX
	}
	return 0
}

func (x *IdolCardSkin) GetBeforeDetailPositionY() float32 {
	if x != nil {
		return x.BeforeDetailPositionY
	}
	return 0
}

func (x *IdolCardSkin) GetBeforeDetailScale() float32 {
	if x != nil {
		return x.BeforeDetailScale
	}
	return 0
}

func (x *IdolCardSkin) GetAfterDetailPositionX() float32 {
	if x != nil {
		return x.AfterDetailPositionX
	}
	return 0
}

func (x *IdolCardSkin) GetAfterDetailPositionY() float32 {
	if x != nil {
		return x.AfterDetailPositionY
	}
	return 0
}

func (x *IdolCardSkin) GetAfterDetailScale() float32 {
	if x != nil {
		return x.AfterDetailScale
	}
	return 0
}

func (x *IdolCardSkin) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *IdolCardSkin) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type IdolCardSkinList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardSkin `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardSkinList) Reset() {
	*x = IdolCardSkinList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardSkinList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardSkinList) ProtoMessage() {}

func (x *IdolCardSkinList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardSkinList.ProtoReflect.Descriptor instead.
func (*IdolCardSkinList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{107}
}

func (x *IdolCardSkinList) GetList() []*IdolCardSkin {
	if x != nil {
		return x.List
	}
	return nil
}

type IdolCardSkinSelectReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IdolCardSkinId string                       `protobuf:"bytes,2,opt,name=idolCardSkinId,proto3" json:"idolCardSkinId,omitempty"`
	MovieAssetId   string                       `protobuf:"bytes,3,opt,name=movieAssetId,proto3" json:"movieAssetId,omitempty"`
	DifficultyType penum.IdolCardDifficultyType `protobuf:"varint,4,opt,name=difficultyType,proto3,enum=penum.IdolCardDifficultyType" json:"difficultyType,omitempty"`
}

func (x *IdolCardSkinSelectReward) Reset() {
	*x = IdolCardSkinSelectReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardSkinSelectReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardSkinSelectReward) ProtoMessage() {}

func (x *IdolCardSkinSelectReward) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardSkinSelectReward.ProtoReflect.Descriptor instead.
func (*IdolCardSkinSelectReward) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{108}
}

func (x *IdolCardSkinSelectReward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdolCardSkinSelectReward) GetIdolCardSkinId() string {
	if x != nil {
		return x.IdolCardSkinId
	}
	return ""
}

func (x *IdolCardSkinSelectReward) GetMovieAssetId() string {
	if x != nil {
		return x.MovieAssetId
	}
	return ""
}

func (x *IdolCardSkinSelectReward) GetDifficultyType() penum.IdolCardDifficultyType {
	if x != nil {
		return x.DifficultyType
	}
	return penum.IdolCardDifficultyType(0)
}

type IdolCardSkinSelectRewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*IdolCardSkinSelectReward `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IdolCardSkinSelectRewardList) Reset() {
	*x = IdolCardSkinSelectRewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdolCardSkinSelectRewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdolCardSkinSelectRewardList) ProtoMessage() {}

func (x *IdolCardSkinSelectRewardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdolCardSkinSelectRewardList.ProtoReflect.Descriptor instead.
func (*IdolCardSkinSelectRewardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{109}
}

func (x *IdolCardSkinSelectRewardList) GetList() []*IdolCardSkinSelectReward {
	if x != nil {
		return x.List
	}
	return nil
}

type InvitationMission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerLevel  int32 `protobuf:"varint,1,opt,name=producerLevel,proto3" json:"producerLevel,omitempty"`
	RewardQuantity int32 `protobuf:"varint,2,opt,name=rewardQuantity,proto3" json:"rewardQuantity,omitempty"`
}

func (x *InvitationMission) Reset() {
	*x = InvitationMission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationMission) ProtoMessage() {}

func (x *InvitationMission) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationMission.ProtoReflect.Descriptor instead.
func (*InvitationMission) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{110}
}

func (x *InvitationMission) GetProducerLevel() int32 {
	if x != nil {
		return x.ProducerLevel
	}
	return 0
}

func (x *InvitationMission) GetRewardQuantity() int32 {
	if x != nil {
		return x.RewardQuantity
	}
	return 0
}

type InvitationMissionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*InvitationMission `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *InvitationMissionList) Reset() {
	*x = InvitationMissionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationMissionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationMissionList) ProtoMessage() {}

func (x *InvitationMissionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationMissionList.ProtoReflect.Descriptor instead.
func (*InvitationMissionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{111}
}

func (x *InvitationMissionList) GetList() []*InvitationMission {
	if x != nil {
		return x.List
	}
	return nil
}

type InvitationPointReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold int32           `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Reward    *pcommon.Reward `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *InvitationPointReward) Reset() {
	*x = InvitationPointReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationPointReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationPointReward) ProtoMessage() {}

func (x *InvitationPointReward) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationPointReward.ProtoReflect.Descriptor instead.
func (*InvitationPointReward) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{112}
}

func (x *InvitationPointReward) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *InvitationPointReward) GetReward() *pcommon.Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

type InvitationPointRewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*InvitationPointReward `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *InvitationPointRewardList) Reset() {
	*x = InvitationPointRewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationPointRewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationPointRewardList) ProtoMessage() {}

func (x *InvitationPointRewardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationPointRewardList.ProtoReflect.Descriptor instead.
func (*InvitationPointRewardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{113}
}

func (x *InvitationPointRewardList) GetList() []*InvitationPointReward {
	if x != nil {
		return x.List
	}
	return nil
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description                 string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AcquisitionRouteDescription string             `protobuf:"bytes,4,opt,name=acquisitionRouteDescription,proto3" json:"acquisitionRouteDescription,omitempty"`
	AssetId                     string             `protobuf:"bytes,5,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Type                        penum.ItemType     `protobuf:"varint,6,opt,name=type,proto3,enum=penum.ItemType" json:"type,omitempty"`
	Rarity                      penum.ItemRarity   `protobuf:"varint,7,opt,name=rarity,proto3,enum=penum.ItemRarity" json:"rarity,omitempty"`
	CommonLimitTime             int64              `protobuf:"varint,8,opt,name=commonLimitTime,proto3" json:"commonLimitTime,omitempty"`
	PersonalLimitDay            int32              `protobuf:"varint,9,opt,name=personalLimitDay,proto3" json:"personalLimitDay,omitempty"`
	SellPrice                   int32              `protobuf:"varint,10,opt,name=sellPrice,proto3" json:"sellPrice,omitempty"`
	EffectValue                 int32              `protobuf:"varint,11,opt,name=effectValue,proto3" json:"effectValue,omitempty"`
	ViewWithoutPossession       bool               `protobuf:"varint,12,opt,name=viewWithoutPossession,proto3" json:"viewWithoutPossession,omitempty"`
	ExchangeType                penum.ExchangeType `protobuf:"varint,13,opt,name=exchangeType,proto3,enum=penum.ExchangeType" json:"exchangeType,omitempty"`
	ExchangeId                  string             `protobuf:"bytes,14,opt,name=exchangeId,proto3" json:"exchangeId,omitempty"`
	GashaId                     string             `protobuf:"bytes,15,opt,name=gashaId,proto3" json:"gashaId,omitempty"`
	CoinGashaId                 string             `protobuf:"bytes,16,opt,name=coinGashaId,proto3" json:"coinGashaId,omitempty"`
	ShopCoinGashaId             string             `protobuf:"bytes,17,opt,name=shopCoinGashaId,proto3" json:"shopCoinGashaId,omitempty"`
	StoryEventId                string             `protobuf:"bytes,20,opt,name=storyEventId,proto3" json:"storyEventId,omitempty"`
	Gashas                      []*Item_Gasha      `protobuf:"bytes,25,rep,name=gashas,proto3" json:"gashas,omitempty"`
	ViewConditionSetId          string             `protobuf:"bytes,30,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId        string             `protobuf:"bytes,31,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	StartTime                   int64              `protobuf:"varint,32,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime                     int64              `protobuf:"varint,33,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Order                       int32              `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{114}
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Item) GetAcquisitionRouteDescription() string {
	if x != nil {
		return x.AcquisitionRouteDescription
	}
	return ""
}

func (x *Item) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Item) GetType() penum.ItemType {
	if x != nil {
		return x.Type
	}
	return penum.ItemType(0)
}

func (x *Item) GetRarity() penum.ItemRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.ItemRarity(0)
}

func (x *Item) GetCommonLimitTime() int64 {
	if x != nil {
		return x.CommonLimitTime
	}
	return 0
}

func (x *Item) GetPersonalLimitDay() int32 {
	if x != nil {
		return x.PersonalLimitDay
	}
	return 0
}

func (x *Item) GetSellPrice() int32 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *Item) GetEffectValue() int32 {
	if x != nil {
		return x.EffectValue
	}
	return 0
}

func (x *Item) GetViewWithoutPossession() bool {
	if x != nil {
		return x.ViewWithoutPossession
	}
	return false
}

func (x *Item) GetExchangeType() penum.ExchangeType {
	if x != nil {
		return x.ExchangeType
	}
	return penum.ExchangeType(0)
}

func (x *Item) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *Item) GetGashaId() string {
	if x != nil {
		return x.GashaId
	}
	return ""
}

func (x *Item) GetCoinGashaId() string {
	if x != nil {
		return x.CoinGashaId
	}
	return ""
}

func (x *Item) GetShopCoinGashaId() string {
	if x != nil {
		return x.ShopCoinGashaId
	}
	return ""
}

func (x *Item) GetStoryEventId() string {
	if x != nil {
		return x.StoryEventId
	}
	return ""
}

func (x *Item) GetGashas() []*Item_Gasha {
	if x != nil {
		return x.Gashas
	}
	return nil
}

func (x *Item) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Item) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Item) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Item) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Item) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Item `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ItemList) Reset() {
	*x = ItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemList) ProtoMessage() {}

func (x *ItemList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemList.ProtoReflect.Descriptor instead.
func (*ItemList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{115}
}

func (x *ItemList) GetList() []*Item {
	if x != nil {
		return x.List
	}
	return nil
}

type JewelConsumptionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MinCount int32  `protobuf:"varint,2,opt,name=minCount,proto3" json:"minCount,omitempty"`
	MaxCount int32  `protobuf:"varint,3,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	Quantity int32  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *JewelConsumptionCount) Reset() {
	*x = JewelConsumptionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JewelConsumptionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JewelConsumptionCount) ProtoMessage() {}

func (x *JewelConsumptionCount) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JewelConsumptionCount.ProtoReflect.Descriptor instead.
func (*JewelConsumptionCount) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{116}
}

func (x *JewelConsumptionCount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JewelConsumptionCount) GetMinCount() int32 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *JewelConsumptionCount) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *JewelConsumptionCount) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type JewelConsumptionCountList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*JewelConsumptionCount `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *JewelConsumptionCountList) Reset() {
	*x = JewelConsumptionCountList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JewelConsumptionCountList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JewelConsumptionCountList) ProtoMessage() {}

func (x *JewelConsumptionCountList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JewelConsumptionCountList.ProtoReflect.Descriptor instead.
func (*JewelConsumptionCountList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{117}
}

func (x *JewelConsumptionCountList) GetList() []*JewelConsumptionCount {
	if x != nil {
		return x.List
	}
	return nil
}

type LimitItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  penum.ItemType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ItemType" json:"type,omitempty"`
	Limit int32          `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *LimitItem) Reset() {
	*x = LimitItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitItem) ProtoMessage() {}

func (x *LimitItem) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitItem.ProtoReflect.Descriptor instead.
func (*LimitItem) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{118}
}

func (x *LimitItem) GetType() penum.ItemType {
	if x != nil {
		return x.Type
	}
	return penum.ItemType(0)
}

func (x *LimitItem) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type LimitItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*LimitItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LimitItemList) Reset() {
	*x = LimitItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitItemList) ProtoMessage() {}

func (x *LimitItemList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitItemList.ProtoReflect.Descriptor instead.
func (*LimitItemList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{119}
}

func (x *LimitItemList) GetList() []*LimitItem {
	if x != nil {
		return x.List
	}
	return nil
}

type Localization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Localization) Reset() {
	*x = Localization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Localization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Localization) ProtoMessage() {}

func (x *Localization) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Localization.ProtoReflect.Descriptor instead.
func (*Localization) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{120}
}

func (x *Localization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Localization) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type LocalizationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Localization `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LocalizationList) Reset() {
	*x = LocalizationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalizationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizationList) ProtoMessage() {}

func (x *LocalizationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizationList.ProtoReflect.Descriptor instead.
func (*LocalizationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{121}
}

func (x *LocalizationList) GetList() []*Localization {
	if x != nil {
		return x.List
	}
	return nil
}

type LoginBonusMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order          int32    `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Number         int32    `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	FacialAssetIds []string `protobuf:"bytes,4,rep,name=facialAssetIds,proto3" json:"facialAssetIds,omitempty"`
	MotionAssetIds []string `protobuf:"bytes,5,rep,name=motionAssetIds,proto3" json:"motionAssetIds,omitempty"`
	VoiceAssetIds  []string `protobuf:"bytes,6,rep,name=voiceAssetIds,proto3" json:"voiceAssetIds,omitempty"`
}

func (x *LoginBonusMotion) Reset() {
	*x = LoginBonusMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginBonusMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginBonusMotion) ProtoMessage() {}

func (x *LoginBonusMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginBonusMotion.ProtoReflect.Descriptor instead.
func (*LoginBonusMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{122}
}

func (x *LoginBonusMotion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoginBonusMotion) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *LoginBonusMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *LoginBonusMotion) GetFacialAssetIds() []string {
	if x != nil {
		return x.FacialAssetIds
	}
	return nil
}

func (x *LoginBonusMotion) GetMotionAssetIds() []string {
	if x != nil {
		return x.MotionAssetIds
	}
	return nil
}

func (x *LoginBonusMotion) GetVoiceAssetIds() []string {
	if x != nil {
		return x.VoiceAssetIds
	}
	return nil
}

type LoginBonusMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*LoginBonusMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LoginBonusMotionList) Reset() {
	*x = LoginBonusMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginBonusMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginBonusMotionList) ProtoMessage() {}

func (x *LoginBonusMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginBonusMotionList.ProtoReflect.Descriptor instead.
func (*LoginBonusMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{123}
}

func (x *LoginBonusMotionList) GetList() []*LoginBonusMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type MainStoryChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainStoryPartId  string `protobuf:"bytes,1,opt,name=mainStoryPartId,proto3" json:"mainStoryPartId,omitempty"`
	Id               string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Title            string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	StoryAssetId     string `protobuf:"bytes,5,opt,name=storyAssetId,proto3" json:"storyAssetId,omitempty"`
	MainStoryGroupId string `protobuf:"bytes,6,opt,name=mainStoryGroupId,proto3" json:"mainStoryGroupId,omitempty"`
	Order            int32  `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MainStoryChapter) Reset() {
	*x = MainStoryChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainStoryChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainStoryChapter) ProtoMessage() {}

func (x *MainStoryChapter) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainStoryChapter.ProtoReflect.Descriptor instead.
func (*MainStoryChapter) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{124}
}

func (x *MainStoryChapter) GetMainStoryPartId() string {
	if x != nil {
		return x.MainStoryPartId
	}
	return ""
}

func (x *MainStoryChapter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MainStoryChapter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MainStoryChapter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MainStoryChapter) GetStoryAssetId() string {
	if x != nil {
		return x.StoryAssetId
	}
	return ""
}

func (x *MainStoryChapter) GetMainStoryGroupId() string {
	if x != nil {
		return x.MainStoryGroupId
	}
	return ""
}

func (x *MainStoryChapter) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MainStoryChapterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MainStoryChapter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MainStoryChapterList) Reset() {
	*x = MainStoryChapterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainStoryChapterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainStoryChapterList) ProtoMessage() {}

func (x *MainStoryChapterList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainStoryChapterList.ProtoReflect.Descriptor instead.
func (*MainStoryChapterList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{125}
}

func (x *MainStoryChapterList) GetList() []*MainStoryChapter {
	if x != nil {
		return x.List
	}
	return nil
}

type MainStoryPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	AssetId string `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Order   int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MainStoryPart) Reset() {
	*x = MainStoryPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainStoryPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainStoryPart) ProtoMessage() {}

func (x *MainStoryPart) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainStoryPart.ProtoReflect.Descriptor instead.
func (*MainStoryPart) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{126}
}

func (x *MainStoryPart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MainStoryPart) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MainStoryPart) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *MainStoryPart) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MainStoryPartList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MainStoryPart `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MainStoryPartList) Reset() {
	*x = MainStoryPartList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainStoryPartList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainStoryPartList) ProtoMessage() {}

func (x *MainStoryPartList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainStoryPartList.ProtoReflect.Descriptor instead.
func (*MainStoryPartList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{127}
}

func (x *MainStoryPartList) GetList() []*MainStoryPart {
	if x != nil {
		return x.List
	}
	return nil
}

type MainTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTaskGroupId           string             `protobuf:"bytes,1,opt,name=mainTaskGroupId,proto3" json:"mainTaskGroupId,omitempty"`
	Number                    int32              `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Title                     string             `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description               string             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	HomeDescription           string             `protobuf:"bytes,6,opt,name=homeDescription,proto3" json:"homeDescription,omitempty"`
	MissionType               penum.MissionType  `protobuf:"varint,8,opt,name=missionType,proto3,enum=penum.MissionType" json:"missionType,omitempty"`
	TargetIds1                []string           `protobuf:"bytes,9,rep,name=targetIds1,proto3" json:"targetIds1,omitempty"`
	TargetIds2                []string           `protobuf:"bytes,10,rep,name=targetIds2,proto3" json:"targetIds2,omitempty"`
	TargetIds3                []string           `protobuf:"bytes,11,rep,name=targetIds3,proto3" json:"targetIds3,omitempty"`
	TargetValue               int32              `protobuf:"varint,12,opt,name=targetValue,proto3" json:"targetValue,omitempty"`
	MissionId                 string             `protobuf:"bytes,13,opt,name=missionId,proto3" json:"missionId,omitempty"`
	Threshold                 int32              `protobuf:"varint,14,opt,name=threshold,proto3" json:"threshold,omitempty"`
	ViewConditionSetId        string             `protobuf:"bytes,15,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId      string             `protobuf:"bytes,16,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	Rewards                   []*pcommon.Reward  `protobuf:"bytes,20,rep,name=rewards,proto3" json:"rewards,omitempty"`
	AdditionalRewards         []*pcommon.Reward  `protobuf:"bytes,24,rep,name=additionalRewards,proto3" json:"additionalRewards,omitempty"`
	UnlockFeatureTutorialType penum.TutorialType `protobuf:"varint,25,opt,name=unlockFeatureTutorialType,proto3,enum=penum.TutorialType" json:"unlockFeatureTutorialType,omitempty"`
}

func (x *MainTask) Reset() {
	*x = MainTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTask) ProtoMessage() {}

func (x *MainTask) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTask.ProtoReflect.Descriptor instead.
func (*MainTask) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{128}
}

func (x *MainTask) GetMainTaskGroupId() string {
	if x != nil {
		return x.MainTaskGroupId
	}
	return ""
}

func (x *MainTask) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *MainTask) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MainTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MainTask) GetHomeDescription() string {
	if x != nil {
		return x.HomeDescription
	}
	return ""
}

func (x *MainTask) GetMissionType() penum.MissionType {
	if x != nil {
		return x.MissionType
	}
	return penum.MissionType(0)
}

func (x *MainTask) GetTargetIds1() []string {
	if x != nil {
		return x.TargetIds1
	}
	return nil
}

func (x *MainTask) GetTargetIds2() []string {
	if x != nil {
		return x.TargetIds2
	}
	return nil
}

func (x *MainTask) GetTargetIds3() []string {
	if x != nil {
		return x.TargetIds3
	}
	return nil
}

func (x *MainTask) GetTargetValue() int32 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *MainTask) GetMissionId() string {
	if x != nil {
		return x.MissionId
	}
	return ""
}

func (x *MainTask) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *MainTask) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *MainTask) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *MainTask) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *MainTask) GetAdditionalRewards() []*pcommon.Reward {
	if x != nil {
		return x.AdditionalRewards
	}
	return nil
}

func (x *MainTask) GetUnlockFeatureTutorialType() penum.TutorialType {
	if x != nil {
		return x.UnlockFeatureTutorialType
	}
	return penum.TutorialType(0)
}

type MainTaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title              string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	MainTaskType       penum.MainTaskType `protobuf:"varint,3,opt,name=mainTaskType,proto3,enum=penum.MainTaskType" json:"mainTaskType,omitempty"`
	ViewConditionSetId string             `protobuf:"bytes,4,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	Order              int32              `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MainTaskGroup) Reset() {
	*x = MainTaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTaskGroup) ProtoMessage() {}

func (x *MainTaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTaskGroup.ProtoReflect.Descriptor instead.
func (*MainTaskGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{129}
}

func (x *MainTaskGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MainTaskGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MainTaskGroup) GetMainTaskType() penum.MainTaskType {
	if x != nil {
		return x.MainTaskType
	}
	return penum.MainTaskType(0)
}

func (x *MainTaskGroup) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *MainTaskGroup) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MainTaskGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MainTaskGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MainTaskGroupList) Reset() {
	*x = MainTaskGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTaskGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTaskGroupList) ProtoMessage() {}

func (x *MainTaskGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTaskGroupList.ProtoReflect.Descriptor instead.
func (*MainTaskGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{130}
}

func (x *MainTaskGroupList) GetList() []*MainTaskGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type MainTaskIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionType penum.MissionType `protobuf:"varint,1,opt,name=missionType,proto3,enum=penum.MissionType" json:"missionType,omitempty"`
	AssetId     string            `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (x *MainTaskIcon) Reset() {
	*x = MainTaskIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTaskIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTaskIcon) ProtoMessage() {}

func (x *MainTaskIcon) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTaskIcon.ProtoReflect.Descriptor instead.
func (*MainTaskIcon) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{131}
}

func (x *MainTaskIcon) GetMissionType() penum.MissionType {
	if x != nil {
		return x.MissionType
	}
	return penum.MissionType(0)
}

func (x *MainTaskIcon) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type MainTaskIconList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MainTaskIcon `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MainTaskIconList) Reset() {
	*x = MainTaskIconList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTaskIconList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTaskIconList) ProtoMessage() {}

func (x *MainTaskIconList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTaskIconList.ProtoReflect.Descriptor instead.
func (*MainTaskIconList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{132}
}

func (x *MainTaskIconList) GetList() []*MainTaskIcon {
	if x != nil {
		return x.List
	}
	return nil
}

type MainTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MainTask `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MainTaskList) Reset() {
	*x = MainTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTaskList) ProtoMessage() {}

func (x *MainTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTaskList.ProtoReflect.Descriptor instead.
func (*MainTaskList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{133}
}

func (x *MainTaskList) GetList() []*MainTask {
	if x != nil {
		return x.List
	}
	return nil
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MediaType             penum.MediaType `protobuf:"varint,3,opt,name=mediaType,proto3,enum=penum.MediaType" json:"mediaType,omitempty"`
	AssetId               string          `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
	ThumbnailAssetId      string          `protobuf:"bytes,5,opt,name=thumbnailAssetId,proto3" json:"thumbnailAssetId,omitempty"`
	ViewConditionSetId    string          `protobuf:"bytes,6,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	CharacterIds          []string        `protobuf:"bytes,7,rep,name=characterIds,proto3" json:"characterIds,omitempty"`
	ExternalUrl           string          `protobuf:"bytes,8,opt,name=externalUrl,proto3" json:"externalUrl,omitempty"`
	FourPanelComicEpisode int32           `protobuf:"varint,9,opt,name=fourPanelComicEpisode,proto3" json:"fourPanelComicEpisode,omitempty"`
	StartTime             int64           `protobuf:"varint,100,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime               int64           `protobuf:"varint,101,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Order                 int32           `protobuf:"varint,102,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{134}
}

func (x *Media) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Media) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Media) GetMediaType() penum.MediaType {
	if x != nil {
		return x.MediaType
	}
	return penum.MediaType(0)
}

func (x *Media) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Media) GetThumbnailAssetId() string {
	if x != nil {
		return x.ThumbnailAssetId
	}
	return ""
}

func (x *Media) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Media) GetCharacterIds() []string {
	if x != nil {
		return x.CharacterIds
	}
	return nil
}

func (x *Media) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *Media) GetFourPanelComicEpisode() int32 {
	if x != nil {
		return x.FourPanelComicEpisode
	}
	return 0
}

func (x *Media) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Media) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Media) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MediaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Media `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MediaList) Reset() {
	*x = MediaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaList) ProtoMessage() {}

func (x *MediaList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaList.ProtoReflect.Descriptor instead.
func (*MediaList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{135}
}

func (x *MediaList) GetList() []*Media {
	if x != nil {
		return x.List
	}
	return nil
}

type MeishiBaseAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsDefault           bool                      `protobuf:"varint,3,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	MeishiBaseAssetType penum.MeishiBaseAssetType `protobuf:"varint,4,opt,name=meishiBaseAssetType,proto3,enum=penum.MeishiBaseAssetType" json:"meishiBaseAssetType,omitempty"`
	Order               int32                     `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MeishiBaseAsset) Reset() {
	*x = MeishiBaseAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiBaseAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiBaseAsset) ProtoMessage() {}

func (x *MeishiBaseAsset) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiBaseAsset.ProtoReflect.Descriptor instead.
func (*MeishiBaseAsset) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{136}
}

func (x *MeishiBaseAsset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MeishiBaseAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeishiBaseAsset) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *MeishiBaseAsset) GetMeishiBaseAssetType() penum.MeishiBaseAssetType {
	if x != nil {
		return x.MeishiBaseAssetType
	}
	return penum.MeishiBaseAssetType(0)
}

func (x *MeishiBaseAsset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MeishiBaseAssetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MeishiBaseAsset `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MeishiBaseAssetList) Reset() {
	*x = MeishiBaseAssetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiBaseAssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiBaseAssetList) ProtoMessage() {}

func (x *MeishiBaseAssetList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiBaseAssetList.ProtoReflect.Descriptor instead.
func (*MeishiBaseAssetList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{137}
}

func (x *MeishiBaseAssetList) GetList() []*MeishiBaseAsset {
	if x != nil {
		return x.List
	}
	return nil
}

type MeishiBaseColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MeishiBaseColor) Reset() {
	*x = MeishiBaseColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiBaseColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiBaseColor) ProtoMessage() {}

func (x *MeishiBaseColor) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiBaseColor.ProtoReflect.Descriptor instead.
func (*MeishiBaseColor) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{138}
}

func (x *MeishiBaseColor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MeishiBaseColor) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MeishiBaseColorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MeishiBaseColor `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MeishiBaseColorList) Reset() {
	*x = MeishiBaseColorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiBaseColorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiBaseColorList) ProtoMessage() {}

func (x *MeishiBaseColorList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiBaseColorList.ProtoReflect.Descriptor instead.
func (*MeishiBaseColorList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{139}
}

func (x *MeishiBaseColorList) GetList() []*MeishiBaseColor {
	if x != nil {
		return x.List
	}
	return nil
}

type MeishiIllustrationAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 penum.MeishiIllustrationType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.MeishiIllustrationType" json:"type,omitempty"`
	IsDefault            bool                         `protobuf:"varint,3,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	LeftTopPositionX     float32                      `protobuf:"fixed32,4,opt,name=leftTopPositionX,proto3" json:"leftTopPositionX,omitempty"`
	LeftTopPositionY     float32                      `protobuf:"fixed32,5,opt,name=leftTopPositionY,proto3" json:"leftTopPositionY,omitempty"`
	RightBottomPositionX float32                      `protobuf:"fixed32,6,opt,name=rightBottomPositionX,proto3" json:"rightBottomPositionX,omitempty"`
	RightBottomPositionY float32                      `protobuf:"fixed32,7,opt,name=rightBottomPositionY,proto3" json:"rightBottomPositionY,omitempty"`
	Name                 string                       `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Order                int32                        `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MeishiIllustrationAsset) Reset() {
	*x = MeishiIllustrationAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiIllustrationAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiIllustrationAsset) ProtoMessage() {}

func (x *MeishiIllustrationAsset) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiIllustrationAsset.ProtoReflect.Descriptor instead.
func (*MeishiIllustrationAsset) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{140}
}

func (x *MeishiIllustrationAsset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MeishiIllustrationAsset) GetType() penum.MeishiIllustrationType {
	if x != nil {
		return x.Type
	}
	return penum.MeishiIllustrationType(0)
}

func (x *MeishiIllustrationAsset) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *MeishiIllustrationAsset) GetLeftTopPositionX() float32 {
	if x != nil {
		return x.LeftTopPositionX
	}
	return 0
}

func (x *MeishiIllustrationAsset) GetLeftTopPositionY() float32 {
	if x != nil {
		return x.LeftTopPositionY
	}
	return 0
}

func (x *MeishiIllustrationAsset) GetRightBottomPositionX() float32 {
	if x != nil {
		return x.RightBottomPositionX
	}
	return 0
}

func (x *MeishiIllustrationAsset) GetRightBottomPositionY() float32 {
	if x != nil {
		return x.RightBottomPositionY
	}
	return 0
}

func (x *MeishiIllustrationAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeishiIllustrationAsset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MeishiIllustrationAssetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MeishiIllustrationAsset `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MeishiIllustrationAssetList) Reset() {
	*x = MeishiIllustrationAssetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiIllustrationAssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiIllustrationAssetList) ProtoMessage() {}

func (x *MeishiIllustrationAssetList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiIllustrationAssetList.ProtoReflect.Descriptor instead.
func (*MeishiIllustrationAssetList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{141}
}

func (x *MeishiIllustrationAssetList) GetList() []*MeishiIllustrationAsset {
	if x != nil {
		return x.List
	}
	return nil
}

type MeishiTextColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MeishiTextColor) Reset() {
	*x = MeishiTextColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiTextColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiTextColor) ProtoMessage() {}

func (x *MeishiTextColor) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiTextColor.ProtoReflect.Descriptor instead.
func (*MeishiTextColor) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{142}
}

func (x *MeishiTextColor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MeishiTextColor) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MeishiTextColorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MeishiTextColor `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MeishiTextColorList) Reset() {
	*x = MeishiTextColorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeishiTextColorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeishiTextColorList) ProtoMessage() {}

func (x *MeishiTextColorList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeishiTextColorList.ProtoReflect.Descriptor instead.
func (*MeishiTextColorList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{143}
}

func (x *MeishiTextColorList) GetList() []*MeishiTextColor {
	if x != nil {
		return x.List
	}
	return nil
}

type MemoryAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level      int32             `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	SkillId    string            `protobuf:"bytes,4,opt,name=skillId,proto3" json:"skillId,omitempty"`
	Evaluation int32             `protobuf:"varint,6,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	Rarity     penum.SkillRarity `protobuf:"varint,7,opt,name=rarity,proto3,enum=penum.SkillRarity" json:"rarity,omitempty"`
}

func (x *MemoryAbility) Reset() {
	*x = MemoryAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryAbility) ProtoMessage() {}

func (x *MemoryAbility) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryAbility.ProtoReflect.Descriptor instead.
func (*MemoryAbility) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{144}
}

func (x *MemoryAbility) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemoryAbility) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MemoryAbility) GetSkillId() string {
	if x != nil {
		return x.SkillId
	}
	return ""
}

func (x *MemoryAbility) GetEvaluation() int32 {
	if x != nil {
		return x.Evaluation
	}
	return 0
}

func (x *MemoryAbility) GetRarity() penum.SkillRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.SkillRarity(0)
}

type MemoryAbilityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*pcommon.MemoryAbility `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemoryAbilityList) Reset() {
	*x = MemoryAbilityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryAbilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryAbilityList) ProtoMessage() {}

func (x *MemoryAbilityList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryAbilityList.ProtoReflect.Descriptor instead.
func (*MemoryAbilityList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{145}
}

func (x *MemoryAbilityList) GetList() []*pcommon.MemoryAbility {
	if x != nil {
		return x.List
	}
	return nil
}

type MemoryExchangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanType penum.ProducePlanType `protobuf:"varint,1,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	ItemId   string                `protobuf:"bytes,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (x *MemoryExchangeItem) Reset() {
	*x = MemoryExchangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryExchangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryExchangeItem) ProtoMessage() {}

func (x *MemoryExchangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryExchangeItem.ProtoReflect.Descriptor instead.
func (*MemoryExchangeItem) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{146}
}

func (x *MemoryExchangeItem) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *MemoryExchangeItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type MemoryExchangeItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MemoryExchangeItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemoryExchangeItemList) Reset() {
	*x = MemoryExchangeItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryExchangeItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryExchangeItemList) ProtoMessage() {}

func (x *MemoryExchangeItemList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryExchangeItemList.ProtoReflect.Descriptor instead.
func (*MemoryExchangeItemList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{147}
}

func (x *MemoryExchangeItemList) GetList() []*MemoryExchangeItem {
	if x != nil {
		return x.List
	}
	return nil
}

type MemoryExchangeItemQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade    penum.ResultGrade `protobuf:"varint,1,opt,name=grade,proto3,enum=penum.ResultGrade" json:"grade,omitempty"`
	Quantity int32             `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *MemoryExchangeItemQuantity) Reset() {
	*x = MemoryExchangeItemQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryExchangeItemQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryExchangeItemQuantity) ProtoMessage() {}

func (x *MemoryExchangeItemQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryExchangeItemQuantity.ProtoReflect.Descriptor instead.
func (*MemoryExchangeItemQuantity) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{148}
}

func (x *MemoryExchangeItemQuantity) GetGrade() penum.ResultGrade {
	if x != nil {
		return x.Grade
	}
	return penum.ResultGrade(0)
}

func (x *MemoryExchangeItemQuantity) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type MemoryExchangeItemQuantityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MemoryExchangeItemQuantity `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemoryExchangeItemQuantityList) Reset() {
	*x = MemoryExchangeItemQuantityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryExchangeItemQuantityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryExchangeItemQuantityList) ProtoMessage() {}

func (x *MemoryExchangeItemQuantityList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryExchangeItemQuantityList.ProtoReflect.Descriptor instead.
func (*MemoryExchangeItemQuantityList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{149}
}

func (x *MemoryExchangeItemQuantityList) GetList() []*MemoryExchangeItemQuantity {
	if x != nil {
		return x.List
	}
	return nil
}

type MemoryGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description              string                                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AssetId                  string                                  `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Grade                    penum.ResultGrade                       `protobuf:"varint,5,opt,name=grade,proto3,enum=penum.ResultGrade" json:"grade,omitempty"`
	IdolCardId               string                                  `protobuf:"bytes,6,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	PlanType                 penum.ProducePlanType                   `protobuf:"varint,7,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	ProduceCard              *pcommon.ProduceCard                    `protobuf:"bytes,12,opt,name=produceCard,proto3" json:"produceCard,omitempty"`
	ProduceCardPhaseType     penum.ProduceMemoryProduceCardPhaseType `protobuf:"varint,13,opt,name=produceCardPhaseType,proto3,enum=penum.ProduceMemoryProduceCardPhaseType" json:"produceCardPhaseType,omitempty"`
	MemoryAbilities          []*pcommon.MemoryAbility                `protobuf:"bytes,16,rep,name=memoryAbilities,proto3" json:"memoryAbilities,omitempty"`
	Vocal                    int32                                   `protobuf:"varint,20,opt,name=vocal,proto3" json:"vocal,omitempty"`
	Dance                    int32                                   `protobuf:"varint,21,opt,name=dance,proto3" json:"dance,omitempty"`
	Visual                   int32                                   `protobuf:"varint,22,opt,name=visual,proto3" json:"visual,omitempty"`
	Stamina                  int32                                   `protobuf:"varint,23,opt,name=stamina,proto3" json:"stamina,omitempty"`
	ExamBattleProduceCards   []*pcommon.ProduceCard                  `protobuf:"bytes,26,rep,name=examBattleProduceCards,proto3" json:"examBattleProduceCards,omitempty"`
	ExamBattleProduceItemIds []string                                `protobuf:"bytes,27,rep,name=examBattleProduceItemIds,proto3" json:"examBattleProduceItemIds,omitempty"`
}

func (x *MemoryGift) Reset() {
	*x = MemoryGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryGift) ProtoMessage() {}

func (x *MemoryGift) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryGift.ProtoReflect.Descriptor instead.
func (*MemoryGift) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{150}
}

func (x *MemoryGift) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemoryGift) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemoryGift) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MemoryGift) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *MemoryGift) GetGrade() penum.ResultGrade {
	if x != nil {
		return x.Grade
	}
	return penum.ResultGrade(0)
}

func (x *MemoryGift) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *MemoryGift) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *MemoryGift) GetProduceCard() *pcommon.ProduceCard {
	if x != nil {
		return x.ProduceCard
	}
	return nil
}

func (x *MemoryGift) GetProduceCardPhaseType() penum.ProduceMemoryProduceCardPhaseType {
	if x != nil {
		return x.ProduceCardPhaseType
	}
	return penum.ProduceMemoryProduceCardPhaseType(0)
}

func (x *MemoryGift) GetMemoryAbilities() []*pcommon.MemoryAbility {
	if x != nil {
		return x.MemoryAbilities
	}
	return nil
}

func (x *MemoryGift) GetVocal() int32 {
	if x != nil {
		return x.Vocal
	}
	return 0
}

func (x *MemoryGift) GetDance() int32 {
	if x != nil {
		return x.Dance
	}
	return 0
}

func (x *MemoryGift) GetVisual() int32 {
	if x != nil {
		return x.Visual
	}
	return 0
}

func (x *MemoryGift) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *MemoryGift) GetExamBattleProduceCards() []*pcommon.ProduceCard {
	if x != nil {
		return x.ExamBattleProduceCards
	}
	return nil
}

func (x *MemoryGift) GetExamBattleProduceItemIds() []string {
	if x != nil {
		return x.ExamBattleProduceItemIds
	}
	return nil
}

type MemoryGiftList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MemoryGift `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemoryGiftList) Reset() {
	*x = MemoryGiftList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryGiftList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryGiftList) ProtoMessage() {}

func (x *MemoryGiftList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryGiftList.ProtoReflect.Descriptor instead.
func (*MemoryGiftList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{151}
}

func (x *MemoryGiftList) GetList() []*MemoryGift {
	if x != nil {
		return x.List
	}
	return nil
}

type MemoryTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DefaultName string `protobuf:"bytes,2,opt,name=defaultName,proto3" json:"defaultName,omitempty"`
	AssetId     string `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (x *MemoryTag) Reset() {
	*x = MemoryTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTag) ProtoMessage() {}

func (x *MemoryTag) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTag.ProtoReflect.Descriptor instead.
func (*MemoryTag) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{152}
}

func (x *MemoryTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemoryTag) GetDefaultName() string {
	if x != nil {
		return x.DefaultName
	}
	return ""
}

func (x *MemoryTag) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type MemoryTagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MemoryTag `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemoryTagList) Reset() {
	*x = MemoryTagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTagList) ProtoMessage() {}

func (x *MemoryTagList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTagList.ProtoReflect.Descriptor instead.
func (*MemoryTagList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{153}
}

func (x *MemoryTagList) GetList() []*MemoryTag {
	if x != nil {
		return x.List
	}
	return nil
}

type Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MissionGroupId             string                `protobuf:"bytes,2,opt,name=missionGroupId,proto3" json:"missionGroupId,omitempty"`
	Name                       string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Category                   penum.MissionCategory `protobuf:"varint,4,opt,name=category,proto3,enum=penum.MissionCategory" json:"category,omitempty"`
	Type                       penum.MissionType     `protobuf:"varint,5,opt,name=type,proto3,enum=penum.MissionType" json:"type,omitempty"`
	TargetIds1                 []string              `protobuf:"bytes,6,rep,name=targetIds1,proto3" json:"targetIds1,omitempty"`
	TargetIds2                 []string              `protobuf:"bytes,7,rep,name=targetIds2,proto3" json:"targetIds2,omitempty"`
	TargetIds3                 []string              `protobuf:"bytes,8,rep,name=targetIds3,proto3" json:"targetIds3,omitempty"`
	TargetValue                int32                 `protobuf:"varint,9,opt,name=targetValue,proto3" json:"targetValue,omitempty"`
	IsLessThanTargetValue      bool                  `protobuf:"varint,13,opt,name=isLessThanTargetValue,proto3" json:"isLessThanTargetValue,omitempty"`
	IsEventMission             bool                  `protobuf:"varint,14,opt,name=isEventMission,proto3" json:"isEventMission,omitempty"`
	MissionDailyReleaseGroupId string                `protobuf:"bytes,17,opt,name=missionDailyReleaseGroupId,proto3" json:"missionDailyReleaseGroupId,omitempty"`
	MissionDailyReleaseDay     int32                 `protobuf:"varint,18,opt,name=missionDailyReleaseDay,proto3" json:"missionDailyReleaseDay,omitempty"`
	ViewConditionSetId         string                `protobuf:"bytes,50,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId       string                `protobuf:"bytes,51,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	Order                      int32                 `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Mission) Reset() {
	*x = Mission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mission) ProtoMessage() {}

func (x *Mission) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mission.ProtoReflect.Descriptor instead.
func (*Mission) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{154}
}

func (x *Mission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Mission) GetMissionGroupId() string {
	if x != nil {
		return x.MissionGroupId
	}
	return ""
}

func (x *Mission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mission) GetCategory() penum.MissionCategory {
	if x != nil {
		return x.Category
	}
	return penum.MissionCategory(0)
}

func (x *Mission) GetType() penum.MissionType {
	if x != nil {
		return x.Type
	}
	return penum.MissionType(0)
}

func (x *Mission) GetTargetIds1() []string {
	if x != nil {
		return x.TargetIds1
	}
	return nil
}

func (x *Mission) GetTargetIds2() []string {
	if x != nil {
		return x.TargetIds2
	}
	return nil
}

func (x *Mission) GetTargetIds3() []string {
	if x != nil {
		return x.TargetIds3
	}
	return nil
}

func (x *Mission) GetTargetValue() int32 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *Mission) GetIsLessThanTargetValue() bool {
	if x != nil {
		return x.IsLessThanTargetValue
	}
	return false
}

func (x *Mission) GetIsEventMission() bool {
	if x != nil {
		return x.IsEventMission
	}
	return false
}

func (x *Mission) GetMissionDailyReleaseGroupId() string {
	if x != nil {
		return x.MissionDailyReleaseGroupId
	}
	return ""
}

func (x *Mission) GetMissionDailyReleaseDay() int32 {
	if x != nil {
		return x.MissionDailyReleaseDay
	}
	return 0
}

func (x *Mission) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Mission) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Mission) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MissionDailyRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionDailyReleaseGroupId string `protobuf:"bytes,1,opt,name=missionDailyReleaseGroupId,proto3" json:"missionDailyReleaseGroupId,omitempty"`
	Number                     int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	MissionGroupId             string `protobuf:"bytes,3,opt,name=missionGroupId,proto3" json:"missionGroupId,omitempty"`
}

func (x *MissionDailyRelease) Reset() {
	*x = MissionDailyRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionDailyRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionDailyRelease) ProtoMessage() {}

func (x *MissionDailyRelease) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionDailyRelease.ProtoReflect.Descriptor instead.
func (*MissionDailyRelease) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{155}
}

func (x *MissionDailyRelease) GetMissionDailyReleaseGroupId() string {
	if x != nil {
		return x.MissionDailyReleaseGroupId
	}
	return ""
}

func (x *MissionDailyRelease) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *MissionDailyRelease) GetMissionGroupId() string {
	if x != nil {
		return x.MissionGroupId
	}
	return ""
}

type MissionDailyReleaseGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LogoAssetId         string `protobuf:"bytes,4,opt,name=logoAssetId,proto3" json:"logoAssetId,omitempty"`
	BannerAssetId       string `protobuf:"bytes,5,opt,name=bannerAssetId,proto3" json:"bannerAssetId,omitempty"`
	GradientColor1      string `protobuf:"bytes,6,opt,name=gradientColor1,proto3" json:"gradientColor1,omitempty"`
	GradientColor2      string `protobuf:"bytes,7,opt,name=gradientColor2,proto3" json:"gradientColor2,omitempty"`
	GradientColor3      string `protobuf:"bytes,8,opt,name=gradientColor3,proto3" json:"gradientColor3,omitempty"`
	MissionPointId      string `protobuf:"bytes,9,opt,name=missionPointId,proto3" json:"missionPointId,omitempty"`
	ConditionSetId      string `protobuf:"bytes,10,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
	FromStartTimeUnlock bool   `protobuf:"varint,12,opt,name=fromStartTimeUnlock,proto3" json:"fromStartTimeUnlock,omitempty"`
	StartTime           int64  `protobuf:"varint,100,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime             int64  `protobuf:"varint,101,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *MissionDailyReleaseGroup) Reset() {
	*x = MissionDailyReleaseGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionDailyReleaseGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionDailyReleaseGroup) ProtoMessage() {}

func (x *MissionDailyReleaseGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionDailyReleaseGroup.ProtoReflect.Descriptor instead.
func (*MissionDailyReleaseGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{156}
}

func (x *MissionDailyReleaseGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetLogoAssetId() string {
	if x != nil {
		return x.LogoAssetId
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetBannerAssetId() string {
	if x != nil {
		return x.BannerAssetId
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetGradientColor1() string {
	if x != nil {
		return x.GradientColor1
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetGradientColor2() string {
	if x != nil {
		return x.GradientColor2
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetGradientColor3() string {
	if x != nil {
		return x.GradientColor3
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetMissionPointId() string {
	if x != nil {
		return x.MissionPointId
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

func (x *MissionDailyReleaseGroup) GetFromStartTimeUnlock() bool {
	if x != nil {
		return x.FromStartTimeUnlock
	}
	return false
}

func (x *MissionDailyReleaseGroup) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MissionDailyReleaseGroup) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type MissionDailyReleaseGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionDailyReleaseGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionDailyReleaseGroupList) Reset() {
	*x = MissionDailyReleaseGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionDailyReleaseGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionDailyReleaseGroupList) ProtoMessage() {}

func (x *MissionDailyReleaseGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionDailyReleaseGroupList.ProtoReflect.Descriptor instead.
func (*MissionDailyReleaseGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{157}
}

func (x *MissionDailyReleaseGroupList) GetList() []*MissionDailyReleaseGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionDailyReleaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionDailyRelease `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionDailyReleaseList) Reset() {
	*x = MissionDailyReleaseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionDailyReleaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionDailyReleaseList) ProtoMessage() {}

func (x *MissionDailyReleaseList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionDailyReleaseList.ProtoReflect.Descriptor instead.
func (*MissionDailyReleaseList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{158}
}

func (x *MissionDailyReleaseList) GetList() []*MissionDailyRelease {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AssetId                string            `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	MissionPointId         string            `protobuf:"bytes,5,opt,name=missionPointId,proto3" json:"missionPointId,omitempty"`
	MissionIds             []string          `protobuf:"bytes,6,rep,name=missionIds,proto3" json:"missionIds,omitempty"`
	Rewards                []*pcommon.Reward `protobuf:"bytes,10,rep,name=rewards,proto3" json:"rewards,omitempty"`
	ShowHomeLimitedMission bool              `protobuf:"varint,11,opt,name=showHomeLimitedMission,proto3" json:"showHomeLimitedMission,omitempty"`
	ConditionSetId         string            `protobuf:"bytes,50,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
	Order                  int32             `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MissionGroup) Reset() {
	*x = MissionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionGroup) ProtoMessage() {}

func (x *MissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionGroup.ProtoReflect.Descriptor instead.
func (*MissionGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{159}
}

func (x *MissionGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MissionGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MissionGroup) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *MissionGroup) GetMissionPointId() string {
	if x != nil {
		return x.MissionPointId
	}
	return ""
}

func (x *MissionGroup) GetMissionIds() []string {
	if x != nil {
		return x.MissionIds
	}
	return nil
}

func (x *MissionGroup) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *MissionGroup) GetShowHomeLimitedMission() bool {
	if x != nil {
		return x.ShowHomeLimitedMission
	}
	return false
}

func (x *MissionGroup) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

func (x *MissionGroup) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MissionGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionGroupList) Reset() {
	*x = MissionGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionGroupList) ProtoMessage() {}

func (x *MissionGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionGroupList.ProtoReflect.Descriptor instead.
func (*MissionGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{160}
}

func (x *MissionGroupList) GetList() []*MissionGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Mission `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionList) Reset() {
	*x = MissionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionList) ProtoMessage() {}

func (x *MissionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionList.ProtoReflect.Descriptor instead.
func (*MissionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{161}
}

func (x *MissionList) GetList() []*Mission {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionPanelSheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionPanelSheetGroupId string   `protobuf:"bytes,1,opt,name=missionPanelSheetGroupId,proto3" json:"missionPanelSheetGroupId,omitempty"`
	Number                   int32    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Name                     string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MissionGroupId           string   `protobuf:"bytes,4,opt,name=missionGroupId,proto3" json:"missionGroupId,omitempty"`
	IconAssetId              string   `protobuf:"bytes,5,opt,name=iconAssetId,proto3" json:"iconAssetId,omitempty"`
	BackgroundAssetId        string   `protobuf:"bytes,6,opt,name=backgroundAssetId,proto3" json:"backgroundAssetId,omitempty"`
	RewardAssetId            string   `protobuf:"bytes,7,opt,name=rewardAssetId,proto3" json:"rewardAssetId,omitempty"`
	BackgroundGradientColor1 string   `protobuf:"bytes,8,opt,name=backgroundGradientColor1,proto3" json:"backgroundGradientColor1,omitempty"`
	BackgroundGradientColor2 string   `protobuf:"bytes,9,opt,name=backgroundGradientColor2,proto3" json:"backgroundGradientColor2,omitempty"`
	PanelGradientColors1     []string `protobuf:"bytes,10,rep,name=panelGradientColors1,proto3" json:"panelGradientColors1,omitempty"`
	PanelGradientColors2     []string `protobuf:"bytes,11,rep,name=panelGradientColors2,proto3" json:"panelGradientColors2,omitempty"`
}

func (x *MissionPanelSheet) Reset() {
	*x = MissionPanelSheet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPanelSheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPanelSheet) ProtoMessage() {}

func (x *MissionPanelSheet) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPanelSheet.ProtoReflect.Descriptor instead.
func (*MissionPanelSheet) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{162}
}

func (x *MissionPanelSheet) GetMissionPanelSheetGroupId() string {
	if x != nil {
		return x.MissionPanelSheetGroupId
	}
	return ""
}

func (x *MissionPanelSheet) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *MissionPanelSheet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MissionPanelSheet) GetMissionGroupId() string {
	if x != nil {
		return x.MissionGroupId
	}
	return ""
}

func (x *MissionPanelSheet) GetIconAssetId() string {
	if x != nil {
		return x.IconAssetId
	}
	return ""
}

func (x *MissionPanelSheet) GetBackgroundAssetId() string {
	if x != nil {
		return x.BackgroundAssetId
	}
	return ""
}

func (x *MissionPanelSheet) GetRewardAssetId() string {
	if x != nil {
		return x.RewardAssetId
	}
	return ""
}

func (x *MissionPanelSheet) GetBackgroundGradientColor1() string {
	if x != nil {
		return x.BackgroundGradientColor1
	}
	return ""
}

func (x *MissionPanelSheet) GetBackgroundGradientColor2() string {
	if x != nil {
		return x.BackgroundGradientColor2
	}
	return ""
}

func (x *MissionPanelSheet) GetPanelGradientColors1() []string {
	if x != nil {
		return x.PanelGradientColors1
	}
	return nil
}

func (x *MissionPanelSheet) GetPanelGradientColors2() []string {
	if x != nil {
		return x.PanelGradientColors2
	}
	return nil
}

type MissionPanelSheetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BannerAssetId  string `protobuf:"bytes,4,opt,name=bannerAssetId,proto3" json:"bannerAssetId,omitempty"`
	ConditionSetId string `protobuf:"bytes,5,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
}

func (x *MissionPanelSheetGroup) Reset() {
	*x = MissionPanelSheetGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPanelSheetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPanelSheetGroup) ProtoMessage() {}

func (x *MissionPanelSheetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPanelSheetGroup.ProtoReflect.Descriptor instead.
func (*MissionPanelSheetGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{163}
}

func (x *MissionPanelSheetGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MissionPanelSheetGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MissionPanelSheetGroup) GetBannerAssetId() string {
	if x != nil {
		return x.BannerAssetId
	}
	return ""
}

func (x *MissionPanelSheetGroup) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

type MissionPanelSheetGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionPanelSheetGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionPanelSheetGroupList) Reset() {
	*x = MissionPanelSheetGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPanelSheetGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPanelSheetGroupList) ProtoMessage() {}

func (x *MissionPanelSheetGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPanelSheetGroupList.ProtoReflect.Descriptor instead.
func (*MissionPanelSheetGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{164}
}

func (x *MissionPanelSheetGroupList) GetList() []*MissionPanelSheetGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionPanelSheetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionPanelSheet `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionPanelSheetList) Reset() {
	*x = MissionPanelSheetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPanelSheetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPanelSheetList) ProtoMessage() {}

func (x *MissionPanelSheetList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPanelSheetList.ProtoReflect.Descriptor instead.
func (*MissionPanelSheetList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{165}
}

func (x *MissionPanelSheetList) GetList() []*MissionPanelSheet {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionPass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description           string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AssetId               string `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
	MissionPassPointId    string `protobuf:"bytes,5,opt,name=missionPassPointId,proto3" json:"missionPassPointId,omitempty"`
	PremiumPassShopItemId string `protobuf:"bytes,6,opt,name=premiumPassShopItemId,proto3" json:"premiumPassShopItemId,omitempty"`
	ViewConditionSetId    string `protobuf:"bytes,7,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId  string `protobuf:"bytes,8,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	StartTime             int64  `protobuf:"varint,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime               int64  `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Order                 int32  `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MissionPass) Reset() {
	*x = MissionPass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPass) ProtoMessage() {}

func (x *MissionPass) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPass.ProtoReflect.Descriptor instead.
func (*MissionPass) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{166}
}

func (x *MissionPass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MissionPass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MissionPass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MissionPass) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *MissionPass) GetMissionPassPointId() string {
	if x != nil {
		return x.MissionPassPointId
	}
	return ""
}

func (x *MissionPass) GetPremiumPassShopItemId() string {
	if x != nil {
		return x.PremiumPassShopItemId
	}
	return ""
}

func (x *MissionPass) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *MissionPass) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *MissionPass) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MissionPass) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MissionPass) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MissionPassList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionPass `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionPassList) Reset() {
	*x = MissionPassList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPassList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPassList) ProtoMessage() {}

func (x *MissionPassList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPassList.ProtoReflect.Descriptor instead.
func (*MissionPassList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{167}
}

func (x *MissionPassList) GetList() []*MissionPass {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionPassPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AssetId string `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (x *MissionPassPoint) Reset() {
	*x = MissionPassPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPassPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPassPoint) ProtoMessage() {}

func (x *MissionPassPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPassPoint.ProtoReflect.Descriptor instead.
func (*MissionPassPoint) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{168}
}

func (x *MissionPassPoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MissionPassPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MissionPassPoint) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type MissionPassPointList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionPassPoint `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionPassPointList) Reset() {
	*x = MissionPassPointList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPassPointList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPassPointList) ProtoMessage() {}

func (x *MissionPassPointList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPassPointList.ProtoReflect.Descriptor instead.
func (*MissionPassPointList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{169}
}

func (x *MissionPassPointList) GetList() []*MissionPassPoint {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionPassProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionPassId string          `protobuf:"bytes,1,opt,name=missionPassId,proto3" json:"missionPassId,omitempty"`
	Threshold     int32           `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	NormalReward  *pcommon.Reward `protobuf:"bytes,6,opt,name=normalReward,proto3" json:"normalReward,omitempty"`
	PremiumReward *pcommon.Reward `protobuf:"bytes,10,opt,name=premiumReward,proto3" json:"premiumReward,omitempty"`
	Feature       bool            `protobuf:"varint,11,opt,name=feature,proto3" json:"feature,omitempty"`
	Repeat        bool            `protobuf:"varint,12,opt,name=repeat,proto3" json:"repeat,omitempty"`
	RepeatPoint   int32           `protobuf:"varint,13,opt,name=repeatPoint,proto3" json:"repeatPoint,omitempty"`
}

func (x *MissionPassProgress) Reset() {
	*x = MissionPassProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPassProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPassProgress) ProtoMessage() {}

func (x *MissionPassProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPassProgress.ProtoReflect.Descriptor instead.
func (*MissionPassProgress) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{170}
}

func (x *MissionPassProgress) GetMissionPassId() string {
	if x != nil {
		return x.MissionPassId
	}
	return ""
}

func (x *MissionPassProgress) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *MissionPassProgress) GetNormalReward() *pcommon.Reward {
	if x != nil {
		return x.NormalReward
	}
	return nil
}

func (x *MissionPassProgress) GetPremiumReward() *pcommon.Reward {
	if x != nil {
		return x.PremiumReward
	}
	return nil
}

func (x *MissionPassProgress) GetFeature() bool {
	if x != nil {
		return x.Feature
	}
	return false
}

func (x *MissionPassProgress) GetRepeat() bool {
	if x != nil {
		return x.Repeat
	}
	return false
}

func (x *MissionPassProgress) GetRepeatPoint() int32 {
	if x != nil {
		return x.RepeatPoint
	}
	return 0
}

type MissionPassProgressList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionPassProgress `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionPassProgressList) Reset() {
	*x = MissionPassProgressList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPassProgressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPassProgressList) ProtoMessage() {}

func (x *MissionPassProgressList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPassProgressList.ProtoReflect.Descriptor instead.
func (*MissionPassProgressList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{171}
}

func (x *MissionPassProgressList) GetList() []*MissionPassProgress {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResetTimingType penum.ResetTimingType `protobuf:"varint,3,opt,name=resetTimingType,proto3,enum=penum.ResetTimingType" json:"resetTimingType,omitempty"`
	AssetId         string                `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (x *MissionPoint) Reset() {
	*x = MissionPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPoint) ProtoMessage() {}

func (x *MissionPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPoint.ProtoReflect.Descriptor instead.
func (*MissionPoint) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{172}
}

func (x *MissionPoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MissionPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MissionPoint) GetResetTimingType() penum.ResetTimingType {
	if x != nil {
		return x.ResetTimingType
	}
	return penum.ResetTimingType(0)
}

func (x *MissionPoint) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type MissionPointList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionPoint `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionPointList) Reset() {
	*x = MissionPointList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPointList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPointList) ProtoMessage() {}

func (x *MissionPointList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPointList.ProtoReflect.Descriptor instead.
func (*MissionPointList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{173}
}

func (x *MissionPointList) GetList() []*MissionPoint {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionPointRewardSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionPointId string            `protobuf:"bytes,1,opt,name=missionPointId,proto3" json:"missionPointId,omitempty"`
	Point          int32             `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	IsFeature      bool              `protobuf:"varint,3,opt,name=isFeature,proto3" json:"isFeature,omitempty"`
	Rewards        []*pcommon.Reward `protobuf:"bytes,8,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *MissionPointRewardSet) Reset() {
	*x = MissionPointRewardSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPointRewardSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPointRewardSet) ProtoMessage() {}

func (x *MissionPointRewardSet) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPointRewardSet.ProtoReflect.Descriptor instead.
func (*MissionPointRewardSet) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{174}
}

func (x *MissionPointRewardSet) GetMissionPointId() string {
	if x != nil {
		return x.MissionPointId
	}
	return ""
}

func (x *MissionPointRewardSet) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *MissionPointRewardSet) GetIsFeature() bool {
	if x != nil {
		return x.IsFeature
	}
	return false
}

func (x *MissionPointRewardSet) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type MissionPointRewardSetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionPointRewardSet `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionPointRewardSetList) Reset() {
	*x = MissionPointRewardSetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPointRewardSetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPointRewardSetList) ProtoMessage() {}

func (x *MissionPointRewardSetList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPointRewardSetList.ProtoReflect.Descriptor instead.
func (*MissionPointRewardSetList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{175}
}

func (x *MissionPointRewardSetList) GetList() []*MissionPointRewardSet {
	if x != nil {
		return x.List
	}
	return nil
}

type MissionProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId    string            `protobuf:"bytes,1,opt,name=missionId,proto3" json:"missionId,omitempty"`
	Threshold    int32             `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	MissionPoint int32             `protobuf:"varint,4,opt,name=missionPoint,proto3" json:"missionPoint,omitempty"`
	Rewards      []*pcommon.Reward `protobuf:"bytes,8,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *MissionProgress) Reset() {
	*x = MissionProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionProgress) ProtoMessage() {}

func (x *MissionProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionProgress.ProtoReflect.Descriptor instead.
func (*MissionProgress) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{176}
}

func (x *MissionProgress) GetMissionId() string {
	if x != nil {
		return x.MissionId
	}
	return ""
}

func (x *MissionProgress) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *MissionProgress) GetMissionPoint() int32 {
	if x != nil {
		return x.MissionPoint
	}
	return 0
}

func (x *MissionProgress) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type MissionProgressList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MissionProgress `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MissionProgressList) Reset() {
	*x = MissionProgressList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionProgressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionProgressList) ProtoMessage() {}

func (x *MissionProgressList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionProgressList.ProtoReflect.Descriptor instead.
func (*MissionProgressList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{177}
}

func (x *MissionProgressList) GetList() []*MissionProgress {
	if x != nil {
		return x.List
	}
	return nil
}

type Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level             int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	MakeMinutes       int32 `protobuf:"varint,2,opt,name=makeMinutes,proto3" json:"makeMinutes,omitempty"`
	MakeQuantity      int32 `protobuf:"varint,3,opt,name=makeQuantity,proto3" json:"makeQuantity,omitempty"`
	MakeQuantityLimit int32 `protobuf:"varint,4,opt,name=makeQuantityLimit,proto3" json:"makeQuantityLimit,omitempty"`
}

func (x *Money) Reset() {
	*x = Money{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{178}
}

func (x *Money) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Money) GetMakeMinutes() int32 {
	if x != nil {
		return x.MakeMinutes
	}
	return 0
}

func (x *Money) GetMakeQuantity() int32 {
	if x != nil {
		return x.MakeQuantity
	}
	return 0
}

func (x *Money) GetMakeQuantityLimit() int32 {
	if x != nil {
		return x.MakeQuantityLimit
	}
	return 0
}

type MoneyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Money `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MoneyList) Reset() {
	*x = MoneyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyList) ProtoMessage() {}

func (x *MoneyList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyList.ProtoReflect.Descriptor instead.
func (*MoneyList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{179}
}

func (x *MoneyList) GetList() []*Money {
	if x != nil {
		return x.List
	}
	return nil
}

type Music struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                               string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	DisplayTitle                        string `protobuf:"bytes,3,opt,name=displayTitle,proto3" json:"displayTitle,omitempty"`
	Lyrics                              string `protobuf:"bytes,4,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
	Composer                            string `protobuf:"bytes,5,opt,name=composer,proto3" json:"composer,omitempty"`
	Arranger                            string `protobuf:"bytes,6,opt,name=arranger,proto3" json:"arranger,omitempty"`
	JacketAssetId                       string `protobuf:"bytes,8,opt,name=jacketAssetId,proto3" json:"jacketAssetId,omitempty"`
	GameVersionAssetId                  string `protobuf:"bytes,9,opt,name=gameVersionAssetId,proto3" json:"gameVersionAssetId,omitempty"`
	ShortVersionStartMilliseconds       int32  `protobuf:"varint,11,opt,name=shortVersionStartMilliseconds,proto3" json:"shortVersionStartMilliseconds,omitempty"`
	ShortVersionEndMilliseconds         int32  `protobuf:"varint,12,opt,name=shortVersionEndMilliseconds,proto3" json:"shortVersionEndMilliseconds,omitempty"`
	ViewConditionSetId                  string `protobuf:"bytes,13,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId                string `protobuf:"bytes,14,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	ProduceLiveUnlockItemConditionSetId string `protobuf:"bytes,15,opt,name=produceLiveUnlockItemConditionSetId,proto3" json:"produceLiveUnlockItemConditionSetId,omitempty"`
	ExternalUrl                         string `protobuf:"bytes,18,opt,name=externalUrl,proto3" json:"externalUrl,omitempty"`
	ViewStartTime                       int64  `protobuf:"varint,98,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	Order                               int32  `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Music) Reset() {
	*x = Music{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Music) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Music) ProtoMessage() {}

func (x *Music) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Music.ProtoReflect.Descriptor instead.
func (*Music) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{180}
}

func (x *Music) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Music) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Music) GetDisplayTitle() string {
	if x != nil {
		return x.DisplayTitle
	}
	return ""
}

func (x *Music) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

func (x *Music) GetComposer() string {
	if x != nil {
		return x.Composer
	}
	return ""
}

func (x *Music) GetArranger() string {
	if x != nil {
		return x.Arranger
	}
	return ""
}

func (x *Music) GetJacketAssetId() string {
	if x != nil {
		return x.JacketAssetId
	}
	return ""
}

func (x *Music) GetGameVersionAssetId() string {
	if x != nil {
		return x.GameVersionAssetId
	}
	return ""
}

func (x *Music) GetShortVersionStartMilliseconds() int32 {
	if x != nil {
		return x.ShortVersionStartMilliseconds
	}
	return 0
}

func (x *Music) GetShortVersionEndMilliseconds() int32 {
	if x != nil {
		return x.ShortVersionEndMilliseconds
	}
	return 0
}

func (x *Music) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Music) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Music) GetProduceLiveUnlockItemConditionSetId() string {
	if x != nil {
		return x.ProduceLiveUnlockItemConditionSetId
	}
	return ""
}

func (x *Music) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *Music) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *Music) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MusicHot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MusicId   string `protobuf:"bytes,2,opt,name=musicId,proto3" json:"musicId,omitempty"`
	StartTime int64  `protobuf:"varint,100,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64  `protobuf:"varint,101,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *MusicHot) Reset() {
	*x = MusicHot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicHot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicHot) ProtoMessage() {}

func (x *MusicHot) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicHot.ProtoReflect.Descriptor instead.
func (*MusicHot) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{181}
}

func (x *MusicHot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MusicHot) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *MusicHot) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MusicHot) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type MusicHotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MusicHot `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MusicHotList) Reset() {
	*x = MusicHotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicHotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicHotList) ProtoMessage() {}

func (x *MusicHotList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicHotList.ProtoReflect.Descriptor instead.
func (*MusicHotList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{182}
}

func (x *MusicHotList) GetList() []*MusicHot {
	if x != nil {
		return x.List
	}
	return nil
}

type MusicList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Music `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MusicList) Reset() {
	*x = MusicList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicList) ProtoMessage() {}

func (x *MusicList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicList.ProtoReflect.Descriptor instead.
func (*MusicList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{183}
}

func (x *MusicList) GetList() []*Music {
	if x != nil {
		return x.List
	}
	return nil
}

type MusicSinger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicId        string `protobuf:"bytes,1,opt,name=musicId,proto3" json:"musicId,omitempty"`
	Number         int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	CharacterId    string `protobuf:"bytes,3,opt,name=characterId,proto3" json:"characterId,omitempty"`
	IdolCardId     string `protobuf:"bytes,5,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	IdolCardSkinId string `protobuf:"bytes,6,opt,name=idolCardSkinId,proto3" json:"idolCardSkinId,omitempty"`
}

func (x *MusicSinger) Reset() {
	*x = MusicSinger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicSinger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicSinger) ProtoMessage() {}

func (x *MusicSinger) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicSinger.ProtoReflect.Descriptor instead.
func (*MusicSinger) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{184}
}

func (x *MusicSinger) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *MusicSinger) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *MusicSinger) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *MusicSinger) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *MusicSinger) GetIdolCardSkinId() string {
	if x != nil {
		return x.IdolCardSkinId
	}
	return ""
}

type MusicSingerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MusicSinger `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MusicSingerList) Reset() {
	*x = MusicSingerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicSingerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicSingerList) ProtoMessage() {}

func (x *MusicSingerList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicSingerList.ProtoReflect.Descriptor instead.
func (*MusicSingerList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{185}
}

func (x *MusicSingerList) GetList() []*MusicSinger {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoBackground struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                            string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BgmAssetId                      string                          `protobuf:"bytes,3,opt,name=bgmAssetId,proto3" json:"bgmAssetId,omitempty"`
	Category                        penum.PhotoBackgroundCategory   `protobuf:"varint,4,opt,name=category,proto3,enum=penum.PhotoBackgroundCategory" json:"category,omitempty"`
	MaxCharacterCount               int32                           `protobuf:"varint,5,opt,name=maxCharacterCount,proto3" json:"maxCharacterCount,omitempty"`
	EnableLookTargetPositionNumbers []int32                         `protobuf:"varint,6,rep,packed,name=enableLookTargetPositionNumbers,proto3" json:"enableLookTargetPositionNumbers,omitempty"`
	BackgroundAssetId               string                          `protobuf:"bytes,7,opt,name=backgroundAssetId,proto3" json:"backgroundAssetId,omitempty"`
	TimeTypes                       []penum.PhotoBackgroundTimeType `protobuf:"varint,8,rep,packed,name=timeTypes,proto3,enum=penum.PhotoBackgroundTimeType" json:"timeTypes,omitempty"`
	PhotoBackgroundPrefab           string                          `protobuf:"bytes,9,opt,name=photoBackgroundPrefab,proto3" json:"photoBackgroundPrefab,omitempty"`
	SceneLayoutId                   string                          `protobuf:"bytes,10,opt,name=sceneLayoutId,proto3" json:"sceneLayoutId,omitempty"`
	CostumePhotoGroup               string                          `protobuf:"bytes,11,opt,name=costumePhotoGroup,proto3" json:"costumePhotoGroup,omitempty"`
	NgCostumePhotoGroupId           string                          `protobuf:"bytes,14,opt,name=ngCostumePhotoGroupId,proto3" json:"ngCostumePhotoGroupId,omitempty"`
	ViewConditionSetId              string                          `protobuf:"bytes,12,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId            string                          `protobuf:"bytes,13,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	Order                           int32                           `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *PhotoBackground) Reset() {
	*x = PhotoBackground{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoBackground) ProtoMessage() {}

func (x *PhotoBackground) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoBackground.ProtoReflect.Descriptor instead.
func (*PhotoBackground) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{186}
}

func (x *PhotoBackground) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PhotoBackground) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhotoBackground) GetBgmAssetId() string {
	if x != nil {
		return x.BgmAssetId
	}
	return ""
}

func (x *PhotoBackground) GetCategory() penum.PhotoBackgroundCategory {
	if x != nil {
		return x.Category
	}
	return penum.PhotoBackgroundCategory(0)
}

func (x *PhotoBackground) GetMaxCharacterCount() int32 {
	if x != nil {
		return x.MaxCharacterCount
	}
	return 0
}

func (x *PhotoBackground) GetEnableLookTargetPositionNumbers() []int32 {
	if x != nil {
		return x.EnableLookTargetPositionNumbers
	}
	return nil
}

func (x *PhotoBackground) GetBackgroundAssetId() string {
	if x != nil {
		return x.BackgroundAssetId
	}
	return ""
}

func (x *PhotoBackground) GetTimeTypes() []penum.PhotoBackgroundTimeType {
	if x != nil {
		return x.TimeTypes
	}
	return nil
}

func (x *PhotoBackground) GetPhotoBackgroundPrefab() string {
	if x != nil {
		return x.PhotoBackgroundPrefab
	}
	return ""
}

func (x *PhotoBackground) GetSceneLayoutId() string {
	if x != nil {
		return x.SceneLayoutId
	}
	return ""
}

func (x *PhotoBackground) GetCostumePhotoGroup() string {
	if x != nil {
		return x.CostumePhotoGroup
	}
	return ""
}

func (x *PhotoBackground) GetNgCostumePhotoGroupId() string {
	if x != nil {
		return x.NgCostumePhotoGroupId
	}
	return ""
}

func (x *PhotoBackground) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *PhotoBackground) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *PhotoBackground) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type PhotoBackgroundList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PhotoBackground `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoBackgroundList) Reset() {
	*x = PhotoBackgroundList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoBackgroundList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoBackgroundList) ProtoMessage() {}

func (x *PhotoBackgroundList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoBackgroundList.ProtoReflect.Descriptor instead.
func (*PhotoBackgroundList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{187}
}

func (x *PhotoBackgroundList) GetList() []*PhotoBackground {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoLookTargetVoiceCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId  string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Number       int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	VoiceAssetId string `protobuf:"bytes,3,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *PhotoLookTargetVoiceCharacter) Reset() {
	*x = PhotoLookTargetVoiceCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoLookTargetVoiceCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoLookTargetVoiceCharacter) ProtoMessage() {}

func (x *PhotoLookTargetVoiceCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoLookTargetVoiceCharacter.ProtoReflect.Descriptor instead.
func (*PhotoLookTargetVoiceCharacter) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{188}
}

func (x *PhotoLookTargetVoiceCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *PhotoLookTargetVoiceCharacter) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PhotoLookTargetVoiceCharacter) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type PhotoLookTargetVoiceCharacterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PhotoLookTargetVoiceCharacter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoLookTargetVoiceCharacterList) Reset() {
	*x = PhotoLookTargetVoiceCharacterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoLookTargetVoiceCharacterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoLookTargetVoiceCharacterList) ProtoMessage() {}

func (x *PhotoLookTargetVoiceCharacterList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoLookTargetVoiceCharacterList.ProtoReflect.Descriptor instead.
func (*PhotoLookTargetVoiceCharacterList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{189}
}

func (x *PhotoLookTargetVoiceCharacterList) GetList() []*PhotoLookTargetVoiceCharacter {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoPose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhotoBackgroundId         string                    `protobuf:"bytes,2,opt,name=photoBackgroundId,proto3" json:"photoBackgroundId,omitempty"`
	CameraNumbers             []int32                   `protobuf:"varint,3,rep,packed,name=cameraNumbers,proto3" json:"cameraNumbers,omitempty"`
	PositionNumbers           []int32                   `protobuf:"varint,4,rep,packed,name=positionNumbers,proto3" json:"positionNumbers,omitempty"`
	CharacterId               string                    `protobuf:"bytes,5,opt,name=characterId,proto3" json:"characterId,omitempty"`
	MotionType                penum.PhotoPoseMotionType `protobuf:"varint,6,opt,name=motionType,proto3,enum=penum.PhotoPoseMotionType" json:"motionType,omitempty"`
	Name                      string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	LookTargetType            penum.PhotoLookTargetType `protobuf:"varint,8,opt,name=lookTargetType,proto3,enum=penum.PhotoLookTargetType" json:"lookTargetType,omitempty"`
	MotionAssetIds            []string                  `protobuf:"bytes,9,rep,name=motionAssetIds,proto3" json:"motionAssetIds,omitempty"`
	FacialAssetIds            []string                  `protobuf:"bytes,10,rep,name=facialAssetIds,proto3" json:"facialAssetIds,omitempty"`
	PropAssetIds              []string                  `protobuf:"bytes,11,rep,name=propAssetIds,proto3" json:"propAssetIds,omitempty"`
	PhotoReactionVoiceGroupId string                    `protobuf:"bytes,12,opt,name=photoReactionVoiceGroupId,proto3" json:"photoReactionVoiceGroupId,omitempty"`
	PhotoWaitVoiceGroupId     string                    `protobuf:"bytes,13,opt,name=photoWaitVoiceGroupId,proto3" json:"photoWaitVoiceGroupId,omitempty"`
	ViewConditionSetId        string                    `protobuf:"bytes,14,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId      string                    `protobuf:"bytes,15,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	Order                     int32                     `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *PhotoPose) Reset() {
	*x = PhotoPose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoPose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoPose) ProtoMessage() {}

func (x *PhotoPose) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoPose.ProtoReflect.Descriptor instead.
func (*PhotoPose) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{190}
}

func (x *PhotoPose) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PhotoPose) GetPhotoBackgroundId() string {
	if x != nil {
		return x.PhotoBackgroundId
	}
	return ""
}

func (x *PhotoPose) GetCameraNumbers() []int32 {
	if x != nil {
		return x.CameraNumbers
	}
	return nil
}

func (x *PhotoPose) GetPositionNumbers() []int32 {
	if x != nil {
		return x.PositionNumbers
	}
	return nil
}

func (x *PhotoPose) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *PhotoPose) GetMotionType() penum.PhotoPoseMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.PhotoPoseMotionType(0)
}

func (x *PhotoPose) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhotoPose) GetLookTargetType() penum.PhotoLookTargetType {
	if x != nil {
		return x.LookTargetType
	}
	return penum.PhotoLookTargetType(0)
}

func (x *PhotoPose) GetMotionAssetIds() []string {
	if x != nil {
		return x.MotionAssetIds
	}
	return nil
}

func (x *PhotoPose) GetFacialAssetIds() []string {
	if x != nil {
		return x.FacialAssetIds
	}
	return nil
}

func (x *PhotoPose) GetPropAssetIds() []string {
	if x != nil {
		return x.PropAssetIds
	}
	return nil
}

func (x *PhotoPose) GetPhotoReactionVoiceGroupId() string {
	if x != nil {
		return x.PhotoReactionVoiceGroupId
	}
	return ""
}

func (x *PhotoPose) GetPhotoWaitVoiceGroupId() string {
	if x != nil {
		return x.PhotoWaitVoiceGroupId
	}
	return ""
}

func (x *PhotoPose) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *PhotoPose) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *PhotoPose) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type PhotoPoseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PhotoPose `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoPoseList) Reset() {
	*x = PhotoPoseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoPoseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoPoseList) ProtoMessage() {}

func (x *PhotoPoseList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoPoseList.ProtoReflect.Descriptor instead.
func (*PhotoPoseList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{191}
}

func (x *PhotoPoseList) GetList() []*PhotoPose {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoReactionVoiceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number                         int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	PoseVoiceAssetId               string `protobuf:"bytes,3,opt,name=poseVoiceAssetId,proto3" json:"poseVoiceAssetId,omitempty"`
	PoseVoiceDelayMilliseconds     int32  `protobuf:"varint,4,opt,name=poseVoiceDelayMilliseconds,proto3" json:"poseVoiceDelayMilliseconds,omitempty"`
	ReactionVoiceAssetId           string `protobuf:"bytes,5,opt,name=reactionVoiceAssetId,proto3" json:"reactionVoiceAssetId,omitempty"`
	ReactionVoiceDelayMilliseconds int32  `protobuf:"varint,6,opt,name=reactionVoiceDelayMilliseconds,proto3" json:"reactionVoiceDelayMilliseconds,omitempty"`
}

func (x *PhotoReactionVoiceGroup) Reset() {
	*x = PhotoReactionVoiceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoReactionVoiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoReactionVoiceGroup) ProtoMessage() {}

func (x *PhotoReactionVoiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoReactionVoiceGroup.ProtoReflect.Descriptor instead.
func (*PhotoReactionVoiceGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{192}
}

func (x *PhotoReactionVoiceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PhotoReactionVoiceGroup) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PhotoReactionVoiceGroup) GetPoseVoiceAssetId() string {
	if x != nil {
		return x.PoseVoiceAssetId
	}
	return ""
}

func (x *PhotoReactionVoiceGroup) GetPoseVoiceDelayMilliseconds() int32 {
	if x != nil {
		return x.PoseVoiceDelayMilliseconds
	}
	return 0
}

func (x *PhotoReactionVoiceGroup) GetReactionVoiceAssetId() string {
	if x != nil {
		return x.ReactionVoiceAssetId
	}
	return ""
}

func (x *PhotoReactionVoiceGroup) GetReactionVoiceDelayMilliseconds() int32 {
	if x != nil {
		return x.ReactionVoiceDelayMilliseconds
	}
	return 0
}

type PhotoReactionVoiceGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PhotoReactionVoiceGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoReactionVoiceGroupList) Reset() {
	*x = PhotoReactionVoiceGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoReactionVoiceGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoReactionVoiceGroupList) ProtoMessage() {}

func (x *PhotoReactionVoiceGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoReactionVoiceGroupList.ProtoReflect.Descriptor instead.
func (*PhotoReactionVoiceGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{193}
}

func (x *PhotoReactionVoiceGroupList) GetList() []*PhotoReactionVoiceGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoWaitVoiceCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId  string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Number       int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	VoiceAssetId string `protobuf:"bytes,3,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *PhotoWaitVoiceCharacter) Reset() {
	*x = PhotoWaitVoiceCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWaitVoiceCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWaitVoiceCharacter) ProtoMessage() {}

func (x *PhotoWaitVoiceCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWaitVoiceCharacter.ProtoReflect.Descriptor instead.
func (*PhotoWaitVoiceCharacter) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{194}
}

func (x *PhotoWaitVoiceCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *PhotoWaitVoiceCharacter) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PhotoWaitVoiceCharacter) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type PhotoWaitVoiceCharacterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PhotoWaitVoiceCharacter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoWaitVoiceCharacterList) Reset() {
	*x = PhotoWaitVoiceCharacterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWaitVoiceCharacterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWaitVoiceCharacterList) ProtoMessage() {}

func (x *PhotoWaitVoiceCharacterList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWaitVoiceCharacterList.ProtoReflect.Descriptor instead.
func (*PhotoWaitVoiceCharacterList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{195}
}

func (x *PhotoWaitVoiceCharacterList) GetList() []*PhotoWaitVoiceCharacter {
	if x != nil {
		return x.List
	}
	return nil
}

type PhotoWaitVoiceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number       int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	VoiceAssetId string `protobuf:"bytes,3,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *PhotoWaitVoiceGroup) Reset() {
	*x = PhotoWaitVoiceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWaitVoiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWaitVoiceGroup) ProtoMessage() {}

func (x *PhotoWaitVoiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWaitVoiceGroup.ProtoReflect.Descriptor instead.
func (*PhotoWaitVoiceGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{196}
}

func (x *PhotoWaitVoiceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PhotoWaitVoiceGroup) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PhotoWaitVoiceGroup) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type PhotoWaitVoiceGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PhotoWaitVoiceGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PhotoWaitVoiceGroupList) Reset() {
	*x = PhotoWaitVoiceGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoWaitVoiceGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoWaitVoiceGroupList) ProtoMessage() {}

func (x *PhotoWaitVoiceGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoWaitVoiceGroupList.ProtoReflect.Descriptor instead.
func (*PhotoWaitVoiceGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{197}
}

func (x *PhotoWaitVoiceGroupList) GetList() []*PhotoWaitVoiceGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type Produce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BaseStepLevel                        int32  `protobuf:"varint,3,opt,name=baseStepLevel,proto3" json:"baseStepLevel,omitempty"`
	ChallengeViewConditionSetId          string `protobuf:"bytes,11,opt,name=challengeViewConditionSetId,proto3" json:"challengeViewConditionSetId,omitempty"`
	ViewConditionSetId                   string `protobuf:"bytes,12,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId                 string `protobuf:"bytes,13,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	ExamSettingId                        string `protobuf:"bytes,19,opt,name=examSettingId,proto3" json:"examSettingId,omitempty"`
	ProduceSettingId                     string `protobuf:"bytes,20,opt,name=produceSettingId,proto3" json:"produceSettingId,omitempty"`
	IdolCardParameterGrowthLimit         int32  `protobuf:"varint,21,opt,name=idolCardParameterGrowthLimit,proto3" json:"idolCardParameterGrowthLimit,omitempty"`
	MaxProduceEventCharacterGrowthNumber int32  `protobuf:"varint,22,opt,name=maxProduceEventCharacterGrowthNumber,proto3" json:"maxProduceEventCharacterGrowthNumber,omitempty"`
	Steps                                int32  `protobuf:"varint,23,opt,name=steps,proto3" json:"steps,omitempty"`
	ActionPointQuantity                  int32  `protobuf:"varint,24,opt,name=actionPointQuantity,proto3" json:"actionPointQuantity,omitempty"`
	AssetId                              string `protobuf:"bytes,25,opt,name=assetId,proto3" json:"assetId,omitempty"`
	ProduceNavigationNormalId            string `protobuf:"bytes,26,opt,name=produceNavigationNormalId,proto3" json:"produceNavigationNormalId,omitempty"`
	ProduceNavigationAuditionId          string `protobuf:"bytes,27,opt,name=produceNavigationAuditionId,proto3" json:"produceNavigationAuditionId,omitempty"`
	ProduceNavigationLoseId              string `protobuf:"bytes,28,opt,name=produceNavigationLoseId,proto3" json:"produceNavigationLoseId,omitempty"`
	GradientColor1                       string `protobuf:"bytes,30,opt,name=gradientColor1,proto3" json:"gradientColor1,omitempty"`
	GradientColor2                       string `protobuf:"bytes,31,opt,name=gradientColor2,proto3" json:"gradientColor2,omitempty"`
	Order                                int32  `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Produce) Reset() {
	*x = Produce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Produce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Produce) ProtoMessage() {}

func (x *Produce) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Produce.ProtoReflect.Descriptor instead.
func (*Produce) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{198}
}

func (x *Produce) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Produce) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Produce) GetBaseStepLevel() int32 {
	if x != nil {
		return x.BaseStepLevel
	}
	return 0
}

func (x *Produce) GetChallengeViewConditionSetId() string {
	if x != nil {
		return x.ChallengeViewConditionSetId
	}
	return ""
}

func (x *Produce) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Produce) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Produce) GetExamSettingId() string {
	if x != nil {
		return x.ExamSettingId
	}
	return ""
}

func (x *Produce) GetProduceSettingId() string {
	if x != nil {
		return x.ProduceSettingId
	}
	return ""
}

func (x *Produce) GetIdolCardParameterGrowthLimit() int32 {
	if x != nil {
		return x.IdolCardParameterGrowthLimit
	}
	return 0
}

func (x *Produce) GetMaxProduceEventCharacterGrowthNumber() int32 {
	if x != nil {
		return x.MaxProduceEventCharacterGrowthNumber
	}
	return 0
}

func (x *Produce) GetSteps() int32 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *Produce) GetActionPointQuantity() int32 {
	if x != nil {
		return x.ActionPointQuantity
	}
	return 0
}

func (x *Produce) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Produce) GetProduceNavigationNormalId() string {
	if x != nil {
		return x.ProduceNavigationNormalId
	}
	return ""
}

func (x *Produce) GetProduceNavigationAuditionId() string {
	if x != nil {
		return x.ProduceNavigationAuditionId
	}
	return ""
}

func (x *Produce) GetProduceNavigationLoseId() string {
	if x != nil {
		return x.ProduceNavigationLoseId
	}
	return ""
}

func (x *Produce) GetGradientColor1() string {
	if x != nil {
		return x.GradientColor1
	}
	return ""
}

func (x *Produce) GetGradientColor2() string {
	if x != nil {
		return x.GradientColor2
	}
	return ""
}

func (x *Produce) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProduceAdv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProduceType penum.ProduceType    `protobuf:"varint,1,opt,name=produceType,proto3,enum=penum.ProduceType" json:"produceType,omitempty"`
	Type        penum.ProduceAdvType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.ProduceAdvType" json:"type,omitempty"`
	Title       string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	AssetId     string               `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (x *ProduceAdv) Reset() {
	*x = ProduceAdv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceAdv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceAdv) ProtoMessage() {}

func (x *ProduceAdv) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceAdv.ProtoReflect.Descriptor instead.
func (*ProduceAdv) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{199}
}

func (x *ProduceAdv) GetProduceType() penum.ProduceType {
	if x != nil {
		return x.ProduceType
	}
	return penum.ProduceType(0)
}

func (x *ProduceAdv) GetType() penum.ProduceAdvType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceAdvType(0)
}

func (x *ProduceAdv) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProduceAdv) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ProduceAdvList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceAdv `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceAdvList) Reset() {
	*x = ProduceAdvList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceAdvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceAdvList) ProtoMessage() {}

func (x *ProduceAdvList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceAdvList.ProtoReflect.Descriptor instead.
func (*ProduceAdvList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{200}
}

func (x *ProduceAdvList) GetList() []*ProduceAdv {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpgradeCount               int32                                  `protobuf:"varint,2,opt,name=upgradeCount,proto3" json:"upgradeCount,omitempty"`
	Name                       string                                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AssetId                    string                                 `protobuf:"bytes,5,opt,name=assetId,proto3" json:"assetId,omitempty"`
	IsCharacterAsset           bool                                   `protobuf:"varint,6,opt,name=isCharacterAsset,proto3" json:"isCharacterAsset,omitempty"`
	Rarity                     penum.ProduceCardRarity                `protobuf:"varint,7,opt,name=rarity,proto3,enum=penum.ProduceCardRarity" json:"rarity,omitempty"`
	PlanType                   penum.ProducePlanType                  `protobuf:"varint,8,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	Category                   penum.ProduceCardCategory              `protobuf:"varint,9,opt,name=category,proto3,enum=penum.ProduceCardCategory" json:"category,omitempty"`
	Stamina                    int32                                  `protobuf:"varint,10,opt,name=stamina,proto3" json:"stamina,omitempty"`
	ForceStamina               int32                                  `protobuf:"varint,11,opt,name=forceStamina,proto3" json:"forceStamina,omitempty"`
	CostType                   penum.ExamCostType                     `protobuf:"varint,12,opt,name=costType,proto3,enum=penum.ExamCostType" json:"costType,omitempty"`
	CostValue                  int32                                  `protobuf:"varint,13,opt,name=costValue,proto3" json:"costValue,omitempty"`
	PlayProduceExamTriggerId   string                                 `protobuf:"bytes,17,opt,name=playProduceExamTriggerId,proto3" json:"playProduceExamTriggerId,omitempty"`
	PlayEffects                []*ProduceCard_PlayEffect              `protobuf:"bytes,21,rep,name=playEffects,proto3" json:"playEffects,omitempty"`
	PlayMovePositionType       penum.ProduceCardMovePositionType      `protobuf:"varint,22,opt,name=playMovePositionType,proto3,enum=penum.ProduceCardMovePositionType" json:"playMovePositionType,omitempty"`
	MoveEffectTriggerType      penum.ProduceCardMoveEffectTriggerType `protobuf:"varint,23,opt,name=moveEffectTriggerType,proto3,enum=penum.ProduceCardMoveEffectTriggerType" json:"moveEffectTriggerType,omitempty"`
	MoveProduceExamEffectIds   []string                               `protobuf:"bytes,24,rep,name=moveProduceExamEffectIds,proto3" json:"moveProduceExamEffectIds,omitempty"`
	IsEndTurnLost              bool                                   `protobuf:"varint,25,opt,name=isEndTurnLost,proto3" json:"isEndTurnLost,omitempty"`
	IsInitial                  bool                                   `protobuf:"varint,26,opt,name=isInitial,proto3" json:"isInitial,omitempty"`
	IsRestrict                 bool                                   `protobuf:"varint,27,opt,name=isRestrict,proto3" json:"isRestrict,omitempty"`
	ProduceCardStatusEnchantId string                                 `protobuf:"bytes,28,opt,name=produceCardStatusEnchantId,proto3" json:"produceCardStatusEnchantId,omitempty"`
	SearchTag                  string                                 `protobuf:"bytes,29,opt,name=searchTag,proto3" json:"searchTag,omitempty"`
	LibraryHidden              bool                                   `protobuf:"varint,30,opt,name=libraryHidden,proto3" json:"libraryHidden,omitempty"`
	NoDeckDuplication          bool                                   `protobuf:"varint,31,opt,name=noDeckDuplication,proto3" json:"noDeckDuplication,omitempty"`
	Descriptions               []*pcommon.ProduceDescriptionElement   `protobuf:"bytes,34,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	UnlockProducerLevel        int32                                  `protobuf:"varint,35,opt,name=unlockProducerLevel,proto3" json:"unlockProducerLevel,omitempty"`
	RentalUnlockProducerLevel  int32                                  `protobuf:"varint,36,opt,name=rentalUnlockProducerLevel,proto3" json:"rentalUnlockProducerLevel,omitempty"`
	Evaluation                 int32                                  `protobuf:"varint,37,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	OriginIdolCardId           string                                 `protobuf:"bytes,39,opt,name=originIdolCardId,proto3" json:"originIdolCardId,omitempty"`
	OriginSupportCardId        string                                 `protobuf:"bytes,40,opt,name=originSupportCardId,proto3" json:"originSupportCardId,omitempty"`
	IsInitialDeckProduceCard   bool                                   `protobuf:"varint,41,opt,name=isInitialDeckProduceCard,proto3" json:"isInitialDeckProduceCard,omitempty"`
	EffectGroupIds             []string                               `protobuf:"bytes,42,rep,name=effectGroupIds,proto3" json:"effectGroupIds,omitempty"`
	ViewStartTime              int64                                  `protobuf:"varint,97,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	IsLimited                  bool                                   `protobuf:"varint,99,opt,name=isLimited,proto3" json:"isLimited,omitempty"`
	Order                      int64                                  `protobuf:"varint,100,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ProduceCard) Reset() {
	*x = ProduceCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCard) ProtoMessage() {}

func (x *ProduceCard) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCard.ProtoReflect.Descriptor instead.
func (*ProduceCard) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{201}
}

func (x *ProduceCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCard) GetUpgradeCount() int32 {
	if x != nil {
		return x.UpgradeCount
	}
	return 0
}

func (x *ProduceCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceCard) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ProduceCard) GetIsCharacterAsset() bool {
	if x != nil {
		return x.IsCharacterAsset
	}
	return false
}

func (x *ProduceCard) GetRarity() penum.ProduceCardRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.ProduceCardRarity(0)
}

func (x *ProduceCard) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *ProduceCard) GetCategory() penum.ProduceCardCategory {
	if x != nil {
		return x.Category
	}
	return penum.ProduceCardCategory(0)
}

func (x *ProduceCard) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *ProduceCard) GetForceStamina() int32 {
	if x != nil {
		return x.ForceStamina
	}
	return 0
}

func (x *ProduceCard) GetCostType() penum.ExamCostType {
	if x != nil {
		return x.CostType
	}
	return penum.ExamCostType(0)
}

func (x *ProduceCard) GetCostValue() int32 {
	if x != nil {
		return x.CostValue
	}
	return 0
}

func (x *ProduceCard) GetPlayProduceExamTriggerId() string {
	if x != nil {
		return x.PlayProduceExamTriggerId
	}
	return ""
}

func (x *ProduceCard) GetPlayEffects() []*ProduceCard_PlayEffect {
	if x != nil {
		return x.PlayEffects
	}
	return nil
}

func (x *ProduceCard) GetPlayMovePositionType() penum.ProduceCardMovePositionType {
	if x != nil {
		return x.PlayMovePositionType
	}
	return penum.ProduceCardMovePositionType(0)
}

func (x *ProduceCard) GetMoveEffectTriggerType() penum.ProduceCardMoveEffectTriggerType {
	if x != nil {
		return x.MoveEffectTriggerType
	}
	return penum.ProduceCardMoveEffectTriggerType(0)
}

func (x *ProduceCard) GetMoveProduceExamEffectIds() []string {
	if x != nil {
		return x.MoveProduceExamEffectIds
	}
	return nil
}

func (x *ProduceCard) GetIsEndTurnLost() bool {
	if x != nil {
		return x.IsEndTurnLost
	}
	return false
}

func (x *ProduceCard) GetIsInitial() bool {
	if x != nil {
		return x.IsInitial
	}
	return false
}

func (x *ProduceCard) GetIsRestrict() bool {
	if x != nil {
		return x.IsRestrict
	}
	return false
}

func (x *ProduceCard) GetProduceCardStatusEnchantId() string {
	if x != nil {
		return x.ProduceCardStatusEnchantId
	}
	return ""
}

func (x *ProduceCard) GetSearchTag() string {
	if x != nil {
		return x.SearchTag
	}
	return ""
}

func (x *ProduceCard) GetLibraryHidden() bool {
	if x != nil {
		return x.LibraryHidden
	}
	return false
}

func (x *ProduceCard) GetNoDeckDuplication() bool {
	if x != nil {
		return x.NoDeckDuplication
	}
	return false
}

func (x *ProduceCard) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceCard) GetUnlockProducerLevel() int32 {
	if x != nil {
		return x.UnlockProducerLevel
	}
	return 0
}

func (x *ProduceCard) GetRentalUnlockProducerLevel() int32 {
	if x != nil {
		return x.RentalUnlockProducerLevel
	}
	return 0
}

func (x *ProduceCard) GetEvaluation() int32 {
	if x != nil {
		return x.Evaluation
	}
	return 0
}

func (x *ProduceCard) GetOriginIdolCardId() string {
	if x != nil {
		return x.OriginIdolCardId
	}
	return ""
}

func (x *ProduceCard) GetOriginSupportCardId() string {
	if x != nil {
		return x.OriginSupportCardId
	}
	return ""
}

func (x *ProduceCard) GetIsInitialDeckProduceCard() bool {
	if x != nil {
		return x.IsInitialDeckProduceCard
	}
	return false
}

func (x *ProduceCard) GetEffectGroupIds() []string {
	if x != nil {
		return x.EffectGroupIds
	}
	return nil
}

func (x *ProduceCard) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *ProduceCard) GetIsLimited() bool {
	if x != nil {
		return x.IsLimited
	}
	return false
}

func (x *ProduceCard) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProduceCardGrowEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EffectTypes []penum.ProduceCardGrowEffectType `protobuf:"varint,2,rep,packed,name=effectTypes,proto3,enum=penum.ProduceCardGrowEffectType" json:"effectTypes,omitempty"`
	CostTypes   []penum.ExamCostType              `protobuf:"varint,3,rep,packed,name=costTypes,proto3,enum=penum.ExamCostType" json:"costTypes,omitempty"`
	Values      []int32                           `protobuf:"varint,4,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ProduceCardGrowEffect) Reset() {
	*x = ProduceCardGrowEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardGrowEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardGrowEffect) ProtoMessage() {}

func (x *ProduceCardGrowEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardGrowEffect.ProtoReflect.Descriptor instead.
func (*ProduceCardGrowEffect) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{202}
}

func (x *ProduceCardGrowEffect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCardGrowEffect) GetEffectTypes() []penum.ProduceCardGrowEffectType {
	if x != nil {
		return x.EffectTypes
	}
	return nil
}

func (x *ProduceCardGrowEffect) GetCostTypes() []penum.ExamCostType {
	if x != nil {
		return x.CostTypes
	}
	return nil
}

func (x *ProduceCardGrowEffect) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ProduceCardGrowEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardGrowEffect `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardGrowEffectList) Reset() {
	*x = ProduceCardGrowEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardGrowEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardGrowEffectList) ProtoMessage() {}

func (x *ProduceCardGrowEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardGrowEffectList.ProtoReflect.Descriptor instead.
func (*ProduceCardGrowEffectList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{203}
}

func (x *ProduceCardGrowEffectList) GetList() []*ProduceCardGrowEffect {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*pcommon.ProduceCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardList) Reset() {
	*x = ProduceCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardList) ProtoMessage() {}

func (x *ProduceCardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardList.ProtoReflect.Descriptor instead.
func (*ProduceCardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{204}
}

func (x *ProduceCardList) GetList() []*pcommon.ProduceCard {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardRandomPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceCardId string `protobuf:"bytes,2,opt,name=produceCardId,proto3" json:"produceCardId,omitempty"`
	UpgradeCount  int32  `protobuf:"varint,3,opt,name=upgradeCount,proto3" json:"upgradeCount,omitempty"`
	Ratio         int32  `protobuf:"varint,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (x *ProduceCardRandomPool) Reset() {
	*x = ProduceCardRandomPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardRandomPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardRandomPool) ProtoMessage() {}

func (x *ProduceCardRandomPool) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardRandomPool.ProtoReflect.Descriptor instead.
func (*ProduceCardRandomPool) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{205}
}

func (x *ProduceCardRandomPool) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCardRandomPool) GetProduceCardId() string {
	if x != nil {
		return x.ProduceCardId
	}
	return ""
}

func (x *ProduceCardRandomPool) GetUpgradeCount() int32 {
	if x != nil {
		return x.UpgradeCount
	}
	return 0
}

func (x *ProduceCardRandomPool) GetRatio() int32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

type ProduceCardRandomPoolList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardRandomPool `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardRandomPoolList) Reset() {
	*x = ProduceCardRandomPoolList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardRandomPoolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardRandomPoolList) ProtoMessage() {}

func (x *ProduceCardRandomPoolList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardRandomPoolList.ProtoReflect.Descriptor instead.
func (*ProduceCardRandomPoolList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{206}
}

func (x *ProduceCardRandomPoolList) GetList() []*ProduceCardRandomPool {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Descriptions            []*pcommon.ProduceDescriptionElement `protobuf:"bytes,3,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	ProduceCardIds          []string                             `protobuf:"bytes,4,rep,name=produceCardIds,proto3" json:"produceCardIds,omitempty"`
	UpgradeCounts           []int32                              `protobuf:"varint,5,rep,packed,name=upgradeCounts,proto3" json:"upgradeCounts,omitempty"`
	PlanType                penum.ProducePlanType                `protobuf:"varint,6,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	CardCategories          []penum.ProduceCardCategory          `protobuf:"varint,7,rep,packed,name=cardCategories,proto3,enum=penum.ProduceCardCategory" json:"cardCategories,omitempty"`
	CardStatusType          penum.ProduceCardSearchStatusType    `protobuf:"varint,8,opt,name=cardStatusType,proto3,enum=penum.ProduceCardSearchStatusType" json:"cardStatusType,omitempty"`
	OrderType               penum.ProduceCardOrderType           `protobuf:"varint,9,opt,name=orderType,proto3,enum=penum.ProduceCardOrderType" json:"orderType,omitempty"`
	CardPositionType        penum.ProduceCardPositionType        `protobuf:"varint,10,opt,name=cardPositionType,proto3,enum=penum.ProduceCardPositionType" json:"cardPositionType,omitempty"`
	CardSearchTag           string                               `protobuf:"bytes,11,opt,name=cardSearchTag,proto3" json:"cardSearchTag,omitempty"`
	ProduceCardRandomPoolId string                               `protobuf:"bytes,12,opt,name=produceCardRandomPoolId,proto3" json:"produceCardRandomPoolId,omitempty"`
	LimitCount              int32                                `protobuf:"varint,13,opt,name=limitCount,proto3" json:"limitCount,omitempty"`
	StaminaMinMaxType       penum.ConditionMinMaxType            `protobuf:"varint,14,opt,name=staminaMinMaxType,proto3,enum=penum.ConditionMinMaxType" json:"staminaMinMaxType,omitempty"`
	StaminaMin              int32                                `protobuf:"varint,15,opt,name=staminaMin,proto3" json:"staminaMin,omitempty"`
	StaminaMax              int32                                `protobuf:"varint,16,opt,name=staminaMax,proto3" json:"staminaMax,omitempty"`
	ExamEffectType          penum.ProduceExamEffectType          `protobuf:"varint,17,opt,name=examEffectType,proto3,enum=penum.ProduceExamEffectType" json:"examEffectType,omitempty"`
	EffectGroupIds          []string                             `protobuf:"bytes,18,rep,name=effectGroupIds,proto3" json:"effectGroupIds,omitempty"`
	IsSelf                  bool                                 `protobuf:"varint,19,opt,name=isSelf,proto3" json:"isSelf,omitempty"`
}

func (x *ProduceCardSearch) Reset() {
	*x = ProduceCardSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardSearch) ProtoMessage() {}

func (x *ProduceCardSearch) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardSearch.ProtoReflect.Descriptor instead.
func (*ProduceCardSearch) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{207}
}

func (x *ProduceCardSearch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCardSearch) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceCardSearch) GetProduceCardIds() []string {
	if x != nil {
		return x.ProduceCardIds
	}
	return nil
}

func (x *ProduceCardSearch) GetUpgradeCounts() []int32 {
	if x != nil {
		return x.UpgradeCounts
	}
	return nil
}

func (x *ProduceCardSearch) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *ProduceCardSearch) GetCardCategories() []penum.ProduceCardCategory {
	if x != nil {
		return x.CardCategories
	}
	return nil
}

func (x *ProduceCardSearch) GetCardStatusType() penum.ProduceCardSearchStatusType {
	if x != nil {
		return x.CardStatusType
	}
	return penum.ProduceCardSearchStatusType(0)
}

func (x *ProduceCardSearch) GetOrderType() penum.ProduceCardOrderType {
	if x != nil {
		return x.OrderType
	}
	return penum.ProduceCardOrderType(0)
}

func (x *ProduceCardSearch) GetCardPositionType() penum.ProduceCardPositionType {
	if x != nil {
		return x.CardPositionType
	}
	return penum.ProduceCardPositionType(0)
}

func (x *ProduceCardSearch) GetCardSearchTag() string {
	if x != nil {
		return x.CardSearchTag
	}
	return ""
}

func (x *ProduceCardSearch) GetProduceCardRandomPoolId() string {
	if x != nil {
		return x.ProduceCardRandomPoolId
	}
	return ""
}

func (x *ProduceCardSearch) GetLimitCount() int32 {
	if x != nil {
		return x.LimitCount
	}
	return 0
}

func (x *ProduceCardSearch) GetStaminaMinMaxType() penum.ConditionMinMaxType {
	if x != nil {
		return x.StaminaMinMaxType
	}
	return penum.ConditionMinMaxType(0)
}

func (x *ProduceCardSearch) GetStaminaMin() int32 {
	if x != nil {
		return x.StaminaMin
	}
	return 0
}

func (x *ProduceCardSearch) GetStaminaMax() int32 {
	if x != nil {
		return x.StaminaMax
	}
	return 0
}

func (x *ProduceCardSearch) GetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.ExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *ProduceCardSearch) GetEffectGroupIds() []string {
	if x != nil {
		return x.EffectGroupIds
	}
	return nil
}

func (x *ProduceCardSearch) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

type ProduceCardSearchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardSearch `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardSearchList) Reset() {
	*x = ProduceCardSearchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardSearchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardSearchList) ProtoMessage() {}

func (x *ProduceCardSearchList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardSearchList.ProtoReflect.Descriptor instead.
func (*ProduceCardSearchList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{208}
}

func (x *ProduceCardSearchList) GetList() []*ProduceCardSearch {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardSimulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProduceCardSimulationGroupId string `protobuf:"bytes,1,opt,name=produceCardSimulationGroupId,proto3" json:"produceCardSimulationGroupId,omitempty"`
	ProduceCardId                string `protobuf:"bytes,2,opt,name=produceCardId,proto3" json:"produceCardId,omitempty"`
	ProduceCardUpgradeCount      int32  `protobuf:"varint,3,opt,name=produceCardUpgradeCount,proto3" json:"produceCardUpgradeCount,omitempty"`
	Count                        int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ProduceCardSimulation) Reset() {
	*x = ProduceCardSimulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardSimulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardSimulation) ProtoMessage() {}

func (x *ProduceCardSimulation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardSimulation.ProtoReflect.Descriptor instead.
func (*ProduceCardSimulation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{209}
}

func (x *ProduceCardSimulation) GetProduceCardSimulationGroupId() string {
	if x != nil {
		return x.ProduceCardSimulationGroupId
	}
	return ""
}

func (x *ProduceCardSimulation) GetProduceCardId() string {
	if x != nil {
		return x.ProduceCardId
	}
	return ""
}

func (x *ProduceCardSimulation) GetProduceCardUpgradeCount() int32 {
	if x != nil {
		return x.ProduceCardUpgradeCount
	}
	return 0
}

func (x *ProduceCardSimulation) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ProduceCardSimulationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProduceCardSimulationGroup) Reset() {
	*x = ProduceCardSimulationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardSimulationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardSimulationGroup) ProtoMessage() {}

func (x *ProduceCardSimulationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardSimulationGroup.ProtoReflect.Descriptor instead.
func (*ProduceCardSimulationGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{210}
}

func (x *ProduceCardSimulationGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCardSimulationGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProduceCardSimulationGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardSimulationGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardSimulationGroupList) Reset() {
	*x = ProduceCardSimulationGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardSimulationGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardSimulationGroupList) ProtoMessage() {}

func (x *ProduceCardSimulationGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardSimulationGroupList.ProtoReflect.Descriptor instead.
func (*ProduceCardSimulationGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{211}
}

func (x *ProduceCardSimulationGroupList) GetList() []*ProduceCardSimulationGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardSimulationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardSimulation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardSimulationList) Reset() {
	*x = ProduceCardSimulationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardSimulationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardSimulationList) ProtoMessage() {}

func (x *ProduceCardSimulationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardSimulationList.ProtoReflect.Descriptor instead.
func (*ProduceCardSimulationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{212}
}

func (x *ProduceCardSimulationList) GetList() []*ProduceCardSimulation {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardStatusEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceExamTriggerId string   `protobuf:"bytes,2,opt,name=produceExamTriggerId,proto3" json:"produceExamTriggerId,omitempty"`
	ProduceExamEffectIds []string `protobuf:"bytes,3,rep,name=produceExamEffectIds,proto3" json:"produceExamEffectIds,omitempty"`
}

func (x *ProduceCardStatusEffect) Reset() {
	*x = ProduceCardStatusEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardStatusEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardStatusEffect) ProtoMessage() {}

func (x *ProduceCardStatusEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardStatusEffect.ProtoReflect.Descriptor instead.
func (*ProduceCardStatusEffect) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{213}
}

func (x *ProduceCardStatusEffect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCardStatusEffect) GetProduceExamTriggerId() string {
	if x != nil {
		return x.ProduceExamTriggerId
	}
	return ""
}

func (x *ProduceCardStatusEffect) GetProduceExamEffectIds() []string {
	if x != nil {
		return x.ProduceExamEffectIds
	}
	return nil
}

type ProduceCardStatusEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardStatusEffect `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardStatusEffectList) Reset() {
	*x = ProduceCardStatusEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardStatusEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardStatusEffectList) ProtoMessage() {}

func (x *ProduceCardStatusEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardStatusEffectList.ProtoReflect.Descriptor instead.
func (*ProduceCardStatusEffectList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{214}
}

func (x *ProduceCardStatusEffectList) GetList() []*ProduceCardStatusEffect {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardStatusEnchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TriggerType             penum.ProduceCardStatusEnchantTriggerType `protobuf:"varint,2,opt,name=triggerType,proto3,enum=penum.ProduceCardStatusEnchantTriggerType" json:"triggerType,omitempty"`
	Cost                    int32                                     `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	EffectValue1            int32                                     `protobuf:"varint,4,opt,name=effectValue1,proto3" json:"effectValue1,omitempty"`
	EffectValue2            int32                                     `protobuf:"varint,5,opt,name=effectValue2,proto3" json:"effectValue2,omitempty"`
	EffectTurn              int32                                     `protobuf:"varint,6,opt,name=effectTurn,proto3" json:"effectTurn,omitempty"`
	TriggerValue            int32                                     `protobuf:"varint,7,opt,name=triggerValue,proto3" json:"triggerValue,omitempty"`
	FieldStatusType         penum.ProduceExamFieldStatusType          `protobuf:"varint,8,opt,name=fieldStatusType,proto3,enum=penum.ProduceExamFieldStatusType" json:"fieldStatusType,omitempty"`
	FieldStatusValue        int32                                     `protobuf:"varint,9,opt,name=fieldStatusValue,proto3" json:"fieldStatusValue,omitempty"`
	ProduceExamTriggerId    string                                    `protobuf:"bytes,10,opt,name=produceExamTriggerId,proto3" json:"produceExamTriggerId,omitempty"`
	ProduceCardGrowEffectId string                                    `protobuf:"bytes,11,opt,name=produceCardGrowEffectId,proto3" json:"produceCardGrowEffectId,omitempty"`
	TriggerCount            int32                                     `protobuf:"varint,12,opt,name=triggerCount,proto3" json:"triggerCount,omitempty"`
}

func (x *ProduceCardStatusEnchant) Reset() {
	*x = ProduceCardStatusEnchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardStatusEnchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardStatusEnchant) ProtoMessage() {}

func (x *ProduceCardStatusEnchant) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardStatusEnchant.ProtoReflect.Descriptor instead.
func (*ProduceCardStatusEnchant) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{215}
}

func (x *ProduceCardStatusEnchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCardStatusEnchant) GetTriggerType() penum.ProduceCardStatusEnchantTriggerType {
	if x != nil {
		return x.TriggerType
	}
	return penum.ProduceCardStatusEnchantTriggerType(0)
}

func (x *ProduceCardStatusEnchant) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *ProduceCardStatusEnchant) GetEffectValue1() int32 {
	if x != nil {
		return x.EffectValue1
	}
	return 0
}

func (x *ProduceCardStatusEnchant) GetEffectValue2() int32 {
	if x != nil {
		return x.EffectValue2
	}
	return 0
}

func (x *ProduceCardStatusEnchant) GetEffectTurn() int32 {
	if x != nil {
		return x.EffectTurn
	}
	return 0
}

func (x *ProduceCardStatusEnchant) GetTriggerValue() int32 {
	if x != nil {
		return x.TriggerValue
	}
	return 0
}

func (x *ProduceCardStatusEnchant) GetFieldStatusType() penum.ProduceExamFieldStatusType {
	if x != nil {
		return x.FieldStatusType
	}
	return penum.ProduceExamFieldStatusType(0)
}

func (x *ProduceCardStatusEnchant) GetFieldStatusValue() int32 {
	if x != nil {
		return x.FieldStatusValue
	}
	return 0
}

func (x *ProduceCardStatusEnchant) GetProduceExamTriggerId() string {
	if x != nil {
		return x.ProduceExamTriggerId
	}
	return ""
}

func (x *ProduceCardStatusEnchant) GetProduceCardGrowEffectId() string {
	if x != nil {
		return x.ProduceCardGrowEffectId
	}
	return ""
}

func (x *ProduceCardStatusEnchant) GetTriggerCount() int32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

type ProduceCardStatusEnchantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardStatusEnchant `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardStatusEnchantList) Reset() {
	*x = ProduceCardStatusEnchantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardStatusEnchantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardStatusEnchantList) ProtoMessage() {}

func (x *ProduceCardStatusEnchantList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardStatusEnchantList.ProtoReflect.Descriptor instead.
func (*ProduceCardStatusEnchantList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{216}
}

func (x *ProduceCardStatusEnchantList) GetList() []*ProduceCardStatusEnchant {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceCardTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProduceCardTag) Reset() {
	*x = ProduceCardTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardTag) ProtoMessage() {}

func (x *ProduceCardTag) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardTag.ProtoReflect.Descriptor instead.
func (*ProduceCardTag) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{217}
}

func (x *ProduceCardTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceCardTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProduceCardTagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceCardTag `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceCardTagList) Reset() {
	*x = ProduceCardTagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCardTagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCardTagList) ProtoMessage() {}

func (x *ProduceCardTagList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCardTagList.ProtoReflect.Descriptor instead.
func (*ProduceCardTagList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{218}
}

func (x *ProduceCardTagList) GetList() []*ProduceCardTag {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceChallengeCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProduceId            string `protobuf:"bytes,1,opt,name=produceId,proto3" json:"produceId,omitempty"`
	CharacterId          string `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	UnlockConditionSetId string `protobuf:"bytes,3,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
}

func (x *ProduceChallengeCharacter) Reset() {
	*x = ProduceChallengeCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceChallengeCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceChallengeCharacter) ProtoMessage() {}

func (x *ProduceChallengeCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceChallengeCharacter.ProtoReflect.Descriptor instead.
func (*ProduceChallengeCharacter) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{219}
}

func (x *ProduceChallengeCharacter) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *ProduceChallengeCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceChallengeCharacter) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

type ProduceChallengeCharacterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceChallengeCharacter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceChallengeCharacterList) Reset() {
	*x = ProduceChallengeCharacterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceChallengeCharacterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceChallengeCharacterList) ProtoMessage() {}

func (x *ProduceChallengeCharacterList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceChallengeCharacterList.ProtoReflect.Descriptor instead.
func (*ProduceChallengeCharacterList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{220}
}

func (x *ProduceChallengeCharacterList) GetList() []*ProduceChallengeCharacter {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceChallengeSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceId                   string `protobuf:"bytes,2,opt,name=produceId,proto3" json:"produceId,omitempty"`
	Number                      int32  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	ProduceItemChallengeGroupId string `protobuf:"bytes,4,opt,name=produceItemChallengeGroupId,proto3" json:"produceItemChallengeGroupId,omitempty"`
	UnlockDescription           string `protobuf:"bytes,6,opt,name=unlockDescription,proto3" json:"unlockDescription,omitempty"`
}

func (x *ProduceChallengeSlot) Reset() {
	*x = ProduceChallengeSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceChallengeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceChallengeSlot) ProtoMessage() {}

func (x *ProduceChallengeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceChallengeSlot.ProtoReflect.Descriptor instead.
func (*ProduceChallengeSlot) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{221}
}

func (x *ProduceChallengeSlot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceChallengeSlot) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *ProduceChallengeSlot) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceChallengeSlot) GetProduceItemChallengeGroupId() string {
	if x != nil {
		return x.ProduceItemChallengeGroupId
	}
	return ""
}

func (x *ProduceChallengeSlot) GetUnlockDescription() string {
	if x != nil {
		return x.UnlockDescription
	}
	return ""
}

type ProduceChallengeSlotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceChallengeSlot `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceChallengeSlotList) Reset() {
	*x = ProduceChallengeSlotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceChallengeSlotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceChallengeSlotList) ProtoMessage() {}

func (x *ProduceChallengeSlotList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceChallengeSlotList.ProtoReflect.Descriptor instead.
func (*ProduceChallengeSlotList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{222}
}

func (x *ProduceChallengeSlotList) GetList() []*ProduceChallengeSlot {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SwapName     string                               `protobuf:"bytes,4,opt,name=swapName,proto3" json:"swapName,omitempty"`
	Descriptions []*pcommon.ProduceDescriptionElement `protobuf:"bytes,99,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
}

func (x *ProduceDescription) Reset() {
	*x = ProduceDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescription) ProtoMessage() {}

func (x *ProduceDescription) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescription.ProtoReflect.Descriptor instead.
func (*ProduceDescription) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{223}
}

func (x *ProduceDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceDescription) GetSwapName() string {
	if x != nil {
		return x.SwapName
	}
	return ""
}

func (x *ProduceDescription) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

type ProduceDescriptionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceDescription `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceDescriptionList) Reset() {
	*x = ProduceDescriptionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionList) ProtoMessage() {}

func (x *ProduceDescriptionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionList.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{224}
}

func (x *ProduceDescriptionList) GetList() []*ProduceDescription {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceDescriptionProduceCardGrowEffectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 penum.ProduceCardGrowEffectType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ProduceCardGrowEffectType" json:"type,omitempty"`
	Name                 string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProduceDescriptionId string                          `protobuf:"bytes,3,opt,name=produceDescriptionId,proto3" json:"produceDescriptionId,omitempty"`
}

func (x *ProduceDescriptionProduceCardGrowEffectType) Reset() {
	*x = ProduceDescriptionProduceCardGrowEffectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProduceCardGrowEffectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProduceCardGrowEffectType) ProtoMessage() {}

func (x *ProduceDescriptionProduceCardGrowEffectType) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProduceCardGrowEffectType.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProduceCardGrowEffectType) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{225}
}

func (x *ProduceDescriptionProduceCardGrowEffectType) GetType() penum.ProduceCardGrowEffectType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceCardGrowEffectType(0)
}

func (x *ProduceDescriptionProduceCardGrowEffectType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceDescriptionProduceCardGrowEffectType) GetProduceDescriptionId() string {
	if x != nil {
		return x.ProduceDescriptionId
	}
	return ""
}

type ProduceDescriptionProduceCardGrowEffectTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceDescriptionProduceCardGrowEffectType `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceDescriptionProduceCardGrowEffectTypeList) Reset() {
	*x = ProduceDescriptionProduceCardGrowEffectTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProduceCardGrowEffectTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProduceCardGrowEffectTypeList) ProtoMessage() {}

func (x *ProduceDescriptionProduceCardGrowEffectTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProduceCardGrowEffectTypeList.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProduceCardGrowEffectTypeList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{226}
}

func (x *ProduceDescriptionProduceCardGrowEffectTypeList) GetList() []*ProduceDescriptionProduceCardGrowEffectType {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceDescriptionProduceEffectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 penum.ProduceEffectType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ProduceEffectType" json:"type,omitempty"`
	Name                 string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProduceDescriptionId string                  `protobuf:"bytes,3,opt,name=produceDescriptionId,proto3" json:"produceDescriptionId,omitempty"`
}

func (x *ProduceDescriptionProduceEffectType) Reset() {
	*x = ProduceDescriptionProduceEffectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProduceEffectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProduceEffectType) ProtoMessage() {}

func (x *ProduceDescriptionProduceEffectType) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProduceEffectType.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProduceEffectType) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{227}
}

func (x *ProduceDescriptionProduceEffectType) GetType() penum.ProduceEffectType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceEffectType(0)
}

func (x *ProduceDescriptionProduceEffectType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceDescriptionProduceEffectType) GetProduceDescriptionId() string {
	if x != nil {
		return x.ProduceDescriptionId
	}
	return ""
}

type ProduceDescriptionProduceEffectTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceDescriptionProduceEffectType `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceDescriptionProduceEffectTypeList) Reset() {
	*x = ProduceDescriptionProduceEffectTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProduceEffectTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProduceEffectTypeList) ProtoMessage() {}

func (x *ProduceDescriptionProduceEffectTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProduceEffectTypeList.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProduceEffectTypeList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{228}
}

func (x *ProduceDescriptionProduceEffectTypeList) GetList() []*ProduceDescriptionProduceEffectType {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceDescriptionProduceExamEffectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     penum.ProduceExamEffectType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ProduceExamEffectType" json:"type,omitempty"`
	Name                     string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SwapName                 string                      `protobuf:"bytes,3,opt,name=swapName,proto3" json:"swapName,omitempty"`
	ProduceDescriptionId     string                      `protobuf:"bytes,4,opt,name=produceDescriptionId,proto3" json:"produceDescriptionId,omitempty"`
	ExamProduceDescriptionId string                      `protobuf:"bytes,5,opt,name=examProduceDescriptionId,proto3" json:"examProduceDescriptionId,omitempty"`
	MainBuffMinThresholds    []int32                     `protobuf:"varint,6,rep,packed,name=mainBuffMinThresholds,proto3" json:"mainBuffMinThresholds,omitempty"`
	NoIcon                   bool                        `protobuf:"varint,7,opt,name=noIcon,proto3" json:"noIcon,omitempty"`
	NoReference              bool                        `protobuf:"varint,8,opt,name=noReference,proto3" json:"noReference,omitempty"`
}

func (x *ProduceDescriptionProduceExamEffectType) Reset() {
	*x = ProduceDescriptionProduceExamEffectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProduceExamEffectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProduceExamEffectType) ProtoMessage() {}

func (x *ProduceDescriptionProduceExamEffectType) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProduceExamEffectType.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProduceExamEffectType) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{229}
}

func (x *ProduceDescriptionProduceExamEffectType) GetType() penum.ProduceExamEffectType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceExamEffectType(0)
}

func (x *ProduceDescriptionProduceExamEffectType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceDescriptionProduceExamEffectType) GetSwapName() string {
	if x != nil {
		return x.SwapName
	}
	return ""
}

func (x *ProduceDescriptionProduceExamEffectType) GetProduceDescriptionId() string {
	if x != nil {
		return x.ProduceDescriptionId
	}
	return ""
}

func (x *ProduceDescriptionProduceExamEffectType) GetExamProduceDescriptionId() string {
	if x != nil {
		return x.ExamProduceDescriptionId
	}
	return ""
}

func (x *ProduceDescriptionProduceExamEffectType) GetMainBuffMinThresholds() []int32 {
	if x != nil {
		return x.MainBuffMinThresholds
	}
	return nil
}

func (x *ProduceDescriptionProduceExamEffectType) GetNoIcon() bool {
	if x != nil {
		return x.NoIcon
	}
	return false
}

func (x *ProduceDescriptionProduceExamEffectType) GetNoReference() bool {
	if x != nil {
		return x.NoReference
	}
	return false
}

type ProduceDescriptionProduceExamEffectTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceDescriptionProduceExamEffectType `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceDescriptionProduceExamEffectTypeList) Reset() {
	*x = ProduceDescriptionProduceExamEffectTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProduceExamEffectTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProduceExamEffectTypeList) ProtoMessage() {}

func (x *ProduceDescriptionProduceExamEffectTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProduceExamEffectTypeList.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProduceExamEffectTypeList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{230}
}

func (x *ProduceDescriptionProduceExamEffectTypeList) GetList() []*ProduceDescriptionProduceExamEffectType {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceDescriptionProducePlanType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                           penum.ProducePlanType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ProducePlanType" json:"type,omitempty"`
	Name                           string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProduceDescriptionId           string                `protobuf:"bytes,3,opt,name=produceDescriptionId,proto3" json:"produceDescriptionId,omitempty"`
	PlanDetailProduceDescriptionId string                `protobuf:"bytes,4,opt,name=planDetailProduceDescriptionId,proto3" json:"planDetailProduceDescriptionId,omitempty"`
}

func (x *ProduceDescriptionProducePlanType) Reset() {
	*x = ProduceDescriptionProducePlanType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProducePlanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProducePlanType) ProtoMessage() {}

func (x *ProduceDescriptionProducePlanType) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProducePlanType.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProducePlanType) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{231}
}

func (x *ProduceDescriptionProducePlanType) GetType() penum.ProducePlanType {
	if x != nil {
		return x.Type
	}
	return penum.ProducePlanType(0)
}

func (x *ProduceDescriptionProducePlanType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceDescriptionProducePlanType) GetProduceDescriptionId() string {
	if x != nil {
		return x.ProduceDescriptionId
	}
	return ""
}

func (x *ProduceDescriptionProducePlanType) GetPlanDetailProduceDescriptionId() string {
	if x != nil {
		return x.PlanDetailProduceDescriptionId
	}
	return ""
}

type ProduceDescriptionProducePlanTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceDescriptionProducePlanType `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceDescriptionProducePlanTypeList) Reset() {
	*x = ProduceDescriptionProducePlanTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDescriptionProducePlanTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDescriptionProducePlanTypeList) ProtoMessage() {}

func (x *ProduceDescriptionProducePlanTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDescriptionProducePlanTypeList.ProtoReflect.Descriptor instead.
func (*ProduceDescriptionProducePlanTypeList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{232}
}

func (x *ProduceDescriptionProducePlanTypeList) GetList() []*ProduceDescriptionProducePlanType {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceDrink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId               string                               `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Name                  string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PlanType              penum.ProducePlanType                `protobuf:"varint,5,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	ProduceDrinkEffectIds []string                             `protobuf:"bytes,6,rep,name=produceDrinkEffectIds,proto3" json:"produceDrinkEffectIds,omitempty"`
	Rarity                penum.ProduceDrinkRarity             `protobuf:"varint,7,opt,name=rarity,proto3,enum=penum.ProduceDrinkRarity" json:"rarity,omitempty"`
	Descriptions          []*pcommon.ProduceDescriptionElement `protobuf:"bytes,10,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	UnlockProducerLevel   int32                                `protobuf:"varint,11,opt,name=unlockProducerLevel,proto3" json:"unlockProducerLevel,omitempty"`
	EffectGroupIds        []string                             `protobuf:"bytes,12,rep,name=effectGroupIds,proto3" json:"effectGroupIds,omitempty"`
	Order                 int64                                `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ProduceDrink) Reset() {
	*x = ProduceDrink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDrink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDrink) ProtoMessage() {}

func (x *ProduceDrink) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDrink.ProtoReflect.Descriptor instead.
func (*ProduceDrink) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{233}
}

func (x *ProduceDrink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceDrink) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ProduceDrink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceDrink) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *ProduceDrink) GetProduceDrinkEffectIds() []string {
	if x != nil {
		return x.ProduceDrinkEffectIds
	}
	return nil
}

func (x *ProduceDrink) GetRarity() penum.ProduceDrinkRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.ProduceDrinkRarity(0)
}

func (x *ProduceDrink) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceDrink) GetUnlockProducerLevel() int32 {
	if x != nil {
		return x.UnlockProducerLevel
	}
	return 0
}

func (x *ProduceDrink) GetEffectGroupIds() []string {
	if x != nil {
		return x.EffectGroupIds
	}
	return nil
}

func (x *ProduceDrink) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProduceDrinkEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceEffectId     string `protobuf:"bytes,2,opt,name=produceEffectId,proto3" json:"produceEffectId,omitempty"`
	ProduceExamEffectId string `protobuf:"bytes,3,opt,name=produceExamEffectId,proto3" json:"produceExamEffectId,omitempty"`
}

func (x *ProduceDrinkEffect) Reset() {
	*x = ProduceDrinkEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDrinkEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDrinkEffect) ProtoMessage() {}

func (x *ProduceDrinkEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDrinkEffect.ProtoReflect.Descriptor instead.
func (*ProduceDrinkEffect) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{234}
}

func (x *ProduceDrinkEffect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceDrinkEffect) GetProduceEffectId() string {
	if x != nil {
		return x.ProduceEffectId
	}
	return ""
}

func (x *ProduceDrinkEffect) GetProduceExamEffectId() string {
	if x != nil {
		return x.ProduceExamEffectId
	}
	return ""
}

type ProduceDrinkEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceDrinkEffect `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceDrinkEffectList) Reset() {
	*x = ProduceDrinkEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDrinkEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDrinkEffectList) ProtoMessage() {}

func (x *ProduceDrinkEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDrinkEffectList.ProtoReflect.Descriptor instead.
func (*ProduceDrinkEffectList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{235}
}

func (x *ProduceDrinkEffectList) GetList() []*ProduceDrinkEffect {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceDrinkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceDrink `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceDrinkList) Reset() {
	*x = ProduceDrinkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDrinkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDrinkList) ProtoMessage() {}

func (x *ProduceDrinkList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDrinkList.ProtoReflect.Descriptor instead.
func (*ProduceDrinkList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{236}
}

func (x *ProduceDrinkList) GetList() []*ProduceDrink {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceEffectType          penum.ProduceEffectType        `protobuf:"varint,2,opt,name=produceEffectType,proto3,enum=penum.ProduceEffectType" json:"produceEffectType,omitempty"`
	EffectValueMin             int32                          `protobuf:"varint,4,opt,name=effectValueMin,proto3" json:"effectValueMin,omitempty"`
	EffectValueMax             int32                          `protobuf:"varint,5,opt,name=effectValueMax,proto3" json:"effectValueMax,omitempty"`
	ProduceResourceType        penum.ProduceResourceType      `protobuf:"varint,7,opt,name=produceResourceType,proto3,enum=penum.ProduceResourceType" json:"produceResourceType,omitempty"`
	ProduceRewards             []*ProduceEffect_ProduceReward `protobuf:"bytes,11,rep,name=produceRewards,proto3" json:"produceRewards,omitempty"`
	ProduceCardSearchId        string                         `protobuf:"bytes,12,opt,name=produceCardSearchId,proto3" json:"produceCardSearchId,omitempty"`
	ProduceExamStatusEnchantId string                         `protobuf:"bytes,13,opt,name=produceExamStatusEnchantId,proto3" json:"produceExamStatusEnchantId,omitempty"`
	ProduceStepEventDetailId   string                         `protobuf:"bytes,14,opt,name=produceStepEventDetailId,proto3" json:"produceStepEventDetailId,omitempty"`
	PickRangeType              penum.ProducePickRangeType     `protobuf:"varint,15,opt,name=pickRangeType,proto3,enum=penum.ProducePickRangeType" json:"pickRangeType,omitempty"`
	PickCountMin               int32                          `protobuf:"varint,16,opt,name=pickCountMin,proto3" json:"pickCountMin,omitempty"`
	PickCountMax               int32                          `protobuf:"varint,17,opt,name=pickCountMax,proto3" json:"pickCountMax,omitempty"`
}

func (x *ProduceEffect) Reset() {
	*x = ProduceEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEffect) ProtoMessage() {}

func (x *ProduceEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEffect.ProtoReflect.Descriptor instead.
func (*ProduceEffect) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{237}
}

func (x *ProduceEffect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceEffect) GetProduceEffectType() penum.ProduceEffectType {
	if x != nil {
		return x.ProduceEffectType
	}
	return penum.ProduceEffectType(0)
}

func (x *ProduceEffect) GetEffectValueMin() int32 {
	if x != nil {
		return x.EffectValueMin
	}
	return 0
}

func (x *ProduceEffect) GetEffectValueMax() int32 {
	if x != nil {
		return x.EffectValueMax
	}
	return 0
}

func (x *ProduceEffect) GetProduceResourceType() penum.ProduceResourceType {
	if x != nil {
		return x.ProduceResourceType
	}
	return penum.ProduceResourceType(0)
}

func (x *ProduceEffect) GetProduceRewards() []*ProduceEffect_ProduceReward {
	if x != nil {
		return x.ProduceRewards
	}
	return nil
}

func (x *ProduceEffect) GetProduceCardSearchId() string {
	if x != nil {
		return x.ProduceCardSearchId
	}
	return ""
}

func (x *ProduceEffect) GetProduceExamStatusEnchantId() string {
	if x != nil {
		return x.ProduceExamStatusEnchantId
	}
	return ""
}

func (x *ProduceEffect) GetProduceStepEventDetailId() string {
	if x != nil {
		return x.ProduceStepEventDetailId
	}
	return ""
}

func (x *ProduceEffect) GetPickRangeType() penum.ProducePickRangeType {
	if x != nil {
		return x.PickRangeType
	}
	return penum.ProducePickRangeType(0)
}

func (x *ProduceEffect) GetPickCountMin() int32 {
	if x != nil {
		return x.PickCountMin
	}
	return 0
}

func (x *ProduceEffect) GetPickCountMax() int32 {
	if x != nil {
		return x.PickCountMax
	}
	return 0
}

type ProduceEffectIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              penum.ProduceEffectType   `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ProduceEffectType" json:"type,omitempty"`
	ResourceType      penum.ProduceResourceType `protobuf:"varint,2,opt,name=resourceType,proto3,enum=penum.ProduceResourceType" json:"resourceType,omitempty"`
	IconAssetId       string                    `protobuf:"bytes,3,opt,name=iconAssetId,proto3" json:"iconAssetId,omitempty"`
	BackgroundAssetId string                    `protobuf:"bytes,4,opt,name=backgroundAssetId,proto3" json:"backgroundAssetId,omitempty"`
}

func (x *ProduceEffectIcon) Reset() {
	*x = ProduceEffectIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEffectIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEffectIcon) ProtoMessage() {}

func (x *ProduceEffectIcon) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEffectIcon.ProtoReflect.Descriptor instead.
func (*ProduceEffectIcon) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{238}
}

func (x *ProduceEffectIcon) GetType() penum.ProduceEffectType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceEffectType(0)
}

func (x *ProduceEffectIcon) GetResourceType() penum.ProduceResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ProduceResourceType(0)
}

func (x *ProduceEffectIcon) GetIconAssetId() string {
	if x != nil {
		return x.IconAssetId
	}
	return ""
}

func (x *ProduceEffectIcon) GetBackgroundAssetId() string {
	if x != nil {
		return x.BackgroundAssetId
	}
	return ""
}

type ProduceEffectIconList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceEffectIcon `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceEffectIconList) Reset() {
	*x = ProduceEffectIconList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEffectIconList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEffectIconList) ProtoMessage() {}

func (x *ProduceEffectIconList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEffectIconList.ProtoReflect.Descriptor instead.
func (*ProduceEffectIconList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{239}
}

func (x *ProduceEffectIconList) GetList() []*ProduceEffectIcon {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceEffect `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceEffectList) Reset() {
	*x = ProduceEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEffectList) ProtoMessage() {}

func (x *ProduceEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEffectList.ProtoReflect.Descriptor instead.
func (*ProduceEffectList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{240}
}

func (x *ProduceEffectList) GetList() []*ProduceEffect {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceEventCharacterGrowth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId              string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Number                   int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Title                    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description              string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Vocal                    int32  `protobuf:"varint,6,opt,name=vocal,proto3" json:"vocal,omitempty"`
	Dance                    int32  `protobuf:"varint,7,opt,name=dance,proto3" json:"dance,omitempty"`
	Visual                   int32  `protobuf:"varint,8,opt,name=visual,proto3" json:"visual,omitempty"`
	ProduceStepEventDetailId string `protobuf:"bytes,10,opt,name=produceStepEventDetailId,proto3" json:"produceStepEventDetailId,omitempty"`
}

func (x *ProduceEventCharacterGrowth) Reset() {
	*x = ProduceEventCharacterGrowth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEventCharacterGrowth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEventCharacterGrowth) ProtoMessage() {}

func (x *ProduceEventCharacterGrowth) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEventCharacterGrowth.ProtoReflect.Descriptor instead.
func (*ProduceEventCharacterGrowth) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{241}
}

func (x *ProduceEventCharacterGrowth) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceEventCharacterGrowth) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceEventCharacterGrowth) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProduceEventCharacterGrowth) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProduceEventCharacterGrowth) GetVocal() int32 {
	if x != nil {
		return x.Vocal
	}
	return 0
}

func (x *ProduceEventCharacterGrowth) GetDance() int32 {
	if x != nil {
		return x.Dance
	}
	return 0
}

func (x *ProduceEventCharacterGrowth) GetVisual() int32 {
	if x != nil {
		return x.Visual
	}
	return 0
}

func (x *ProduceEventCharacterGrowth) GetProduceStepEventDetailId() string {
	if x != nil {
		return x.ProduceStepEventDetailId
	}
	return ""
}

type ProduceEventCharacterGrowthList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceEventCharacterGrowth `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceEventCharacterGrowthList) Reset() {
	*x = ProduceEventCharacterGrowthList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEventCharacterGrowthList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEventCharacterGrowthList) ProtoMessage() {}

func (x *ProduceEventCharacterGrowthList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEventCharacterGrowthList.ProtoReflect.Descriptor instead.
func (*ProduceEventCharacterGrowthList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{242}
}

func (x *ProduceEventCharacterGrowthList) GetList() []*ProduceEventCharacterGrowth {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceEventSupportCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCardId            string `protobuf:"bytes,1,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	Number                   int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	SupportCardLevel         int32  `protobuf:"varint,3,opt,name=supportCardLevel,proto3" json:"supportCardLevel,omitempty"`
	ProduceStepEventDetailId string `protobuf:"bytes,6,opt,name=produceStepEventDetailId,proto3" json:"produceStepEventDetailId,omitempty"`
}

func (x *ProduceEventSupportCard) Reset() {
	*x = ProduceEventSupportCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEventSupportCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEventSupportCard) ProtoMessage() {}

func (x *ProduceEventSupportCard) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEventSupportCard.ProtoReflect.Descriptor instead.
func (*ProduceEventSupportCard) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{243}
}

func (x *ProduceEventSupportCard) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *ProduceEventSupportCard) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceEventSupportCard) GetSupportCardLevel() int32 {
	if x != nil {
		return x.SupportCardLevel
	}
	return 0
}

func (x *ProduceEventSupportCard) GetProduceStepEventDetailId() string {
	if x != nil {
		return x.ProduceStepEventDetailId
	}
	return ""
}

type ProduceEventSupportCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceEventSupportCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceEventSupportCardList) Reset() {
	*x = ProduceEventSupportCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEventSupportCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEventSupportCardList) ProtoMessage() {}

func (x *ProduceEventSupportCardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEventSupportCardList.ProtoReflect.Descriptor instead.
func (*ProduceEventSupportCardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{244}
}

func (x *ProduceEventSupportCardList) GetList() []*ProduceEventSupportCard {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamAutoCardSelectEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           penum.ExamPlayType                            `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ExamPlayType" json:"type,omitempty"`
	ExamEffectType penum.ProduceExamEffectType                   `protobuf:"varint,2,opt,name=examEffectType,proto3,enum=penum.ProduceExamEffectType" json:"examEffectType,omitempty"`
	RemainingTerm  int32                                         `protobuf:"varint,3,opt,name=remainingTerm,proto3" json:"remainingTerm,omitempty"`
	EvaluationType penum.ProduceExamAutoCardSelectEvaluationType `protobuf:"varint,4,opt,name=evaluationType,proto3,enum=penum.ProduceExamAutoCardSelectEvaluationType" json:"evaluationType,omitempty"`
	Evaluation     int32                                         `protobuf:"varint,5,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
}

func (x *ProduceExamAutoCardSelectEvaluation) Reset() {
	*x = ProduceExamAutoCardSelectEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoCardSelectEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoCardSelectEvaluation) ProtoMessage() {}

func (x *ProduceExamAutoCardSelectEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoCardSelectEvaluation.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoCardSelectEvaluation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{245}
}

func (x *ProduceExamAutoCardSelectEvaluation) GetType() penum.ExamPlayType {
	if x != nil {
		return x.Type
	}
	return penum.ExamPlayType(0)
}

func (x *ProduceExamAutoCardSelectEvaluation) GetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.ExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *ProduceExamAutoCardSelectEvaluation) GetRemainingTerm() int32 {
	if x != nil {
		return x.RemainingTerm
	}
	return 0
}

func (x *ProduceExamAutoCardSelectEvaluation) GetEvaluationType() penum.ProduceExamAutoCardSelectEvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return penum.ProduceExamAutoCardSelectEvaluationType(0)
}

func (x *ProduceExamAutoCardSelectEvaluation) GetEvaluation() int32 {
	if x != nil {
		return x.Evaluation
	}
	return 0
}

type ProduceExamAutoCardSelectEvaluationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamAutoCardSelectEvaluation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamAutoCardSelectEvaluationList) Reset() {
	*x = ProduceExamAutoCardSelectEvaluationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoCardSelectEvaluationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoCardSelectEvaluationList) ProtoMessage() {}

func (x *ProduceExamAutoCardSelectEvaluationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoCardSelectEvaluationList.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoCardSelectEvaluationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{246}
}

func (x *ProduceExamAutoCardSelectEvaluationList) GetList() []*ProduceExamAutoCardSelectEvaluation {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamAutoEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                               penum.ExamPlayType                  `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ExamPlayType" json:"type,omitempty"`
	ExamEffectType                     penum.ProduceExamEffectType         `protobuf:"varint,2,opt,name=examEffectType,proto3,enum=penum.ProduceExamEffectType" json:"examEffectType,omitempty"`
	RemainingTerm                      int32                               `protobuf:"varint,3,opt,name=remainingTerm,proto3" json:"remainingTerm,omitempty"`
	EvaluationType                     penum.ProduceExamAutoEvaluationType `protobuf:"varint,4,opt,name=evaluationType,proto3,enum=penum.ProduceExamAutoEvaluationType" json:"evaluationType,omitempty"`
	Evaluation                         int32                               `protobuf:"varint,5,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	ExamStatusEnchantCoefficientPermil int32                               `protobuf:"varint,6,opt,name=examStatusEnchantCoefficientPermil,proto3" json:"examStatusEnchantCoefficientPermil,omitempty"`
}

func (x *ProduceExamAutoEvaluation) Reset() {
	*x = ProduceExamAutoEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoEvaluation) ProtoMessage() {}

func (x *ProduceExamAutoEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoEvaluation.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoEvaluation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{247}
}

func (x *ProduceExamAutoEvaluation) GetType() penum.ExamPlayType {
	if x != nil {
		return x.Type
	}
	return penum.ExamPlayType(0)
}

func (x *ProduceExamAutoEvaluation) GetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.ExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *ProduceExamAutoEvaluation) GetRemainingTerm() int32 {
	if x != nil {
		return x.RemainingTerm
	}
	return 0
}

func (x *ProduceExamAutoEvaluation) GetEvaluationType() penum.ProduceExamAutoEvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return penum.ProduceExamAutoEvaluationType(0)
}

func (x *ProduceExamAutoEvaluation) GetEvaluation() int32 {
	if x != nil {
		return x.Evaluation
	}
	return 0
}

func (x *ProduceExamAutoEvaluation) GetExamStatusEnchantCoefficientPermil() int32 {
	if x != nil {
		return x.ExamStatusEnchantCoefficientPermil
	}
	return 0
}

type ProduceExamAutoEvaluationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamAutoEvaluation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamAutoEvaluationList) Reset() {
	*x = ProduceExamAutoEvaluationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoEvaluationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoEvaluationList) ProtoMessage() {}

func (x *ProduceExamAutoEvaluationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoEvaluationList.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoEvaluationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{248}
}

func (x *ProduceExamAutoEvaluationList) GetList() []*ProduceExamAutoEvaluation {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamAutoResourceEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           penum.ExamPlayType                  `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ExamPlayType" json:"type,omitempty"`
	ResourceType   penum.ProduceResourceType           `protobuf:"varint,2,opt,name=resourceType,proto3,enum=penum.ProduceResourceType" json:"resourceType,omitempty"`
	ResourceId     string                              `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	RemainingTerm  int32                               `protobuf:"varint,4,opt,name=remainingTerm,proto3" json:"remainingTerm,omitempty"`
	EvaluationType penum.ProduceExamAutoEvaluationType `protobuf:"varint,5,opt,name=evaluationType,proto3,enum=penum.ProduceExamAutoEvaluationType" json:"evaluationType,omitempty"`
	Addition       int32                               `protobuf:"varint,6,opt,name=addition,proto3" json:"addition,omitempty"`
	Multiplication int32                               `protobuf:"varint,7,opt,name=multiplication,proto3" json:"multiplication,omitempty"`
}

func (x *ProduceExamAutoResourceEvaluation) Reset() {
	*x = ProduceExamAutoResourceEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoResourceEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoResourceEvaluation) ProtoMessage() {}

func (x *ProduceExamAutoResourceEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoResourceEvaluation.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoResourceEvaluation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{249}
}

func (x *ProduceExamAutoResourceEvaluation) GetType() penum.ExamPlayType {
	if x != nil {
		return x.Type
	}
	return penum.ExamPlayType(0)
}

func (x *ProduceExamAutoResourceEvaluation) GetResourceType() penum.ProduceResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ProduceResourceType(0)
}

func (x *ProduceExamAutoResourceEvaluation) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ProduceExamAutoResourceEvaluation) GetRemainingTerm() int32 {
	if x != nil {
		return x.RemainingTerm
	}
	return 0
}

func (x *ProduceExamAutoResourceEvaluation) GetEvaluationType() penum.ProduceExamAutoEvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return penum.ProduceExamAutoEvaluationType(0)
}

func (x *ProduceExamAutoResourceEvaluation) GetAddition() int32 {
	if x != nil {
		return x.Addition
	}
	return 0
}

func (x *ProduceExamAutoResourceEvaluation) GetMultiplication() int32 {
	if x != nil {
		return x.Multiplication
	}
	return 0
}

type ProduceExamAutoResourceEvaluationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamAutoResourceEvaluation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamAutoResourceEvaluationList) Reset() {
	*x = ProduceExamAutoResourceEvaluationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoResourceEvaluationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoResourceEvaluationList) ProtoMessage() {}

func (x *ProduceExamAutoResourceEvaluationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoResourceEvaluationList.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoResourceEvaluationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{250}
}

func (x *ProduceExamAutoResourceEvaluationList) GetList() []*ProduceExamAutoResourceEvaluation {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamAutoTriggerEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                                  penum.ExamPlayType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ExamPlayType" json:"type,omitempty"`
	ExamStatusEnchantProduceExamTriggerId string             `protobuf:"bytes,2,opt,name=examStatusEnchantProduceExamTriggerId,proto3" json:"examStatusEnchantProduceExamTriggerId,omitempty"`
	CoefficientPermil                     int32              `protobuf:"varint,3,opt,name=coefficientPermil,proto3" json:"coefficientPermil,omitempty"`
}

func (x *ProduceExamAutoTriggerEvaluation) Reset() {
	*x = ProduceExamAutoTriggerEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoTriggerEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoTriggerEvaluation) ProtoMessage() {}

func (x *ProduceExamAutoTriggerEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoTriggerEvaluation.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoTriggerEvaluation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{251}
}

func (x *ProduceExamAutoTriggerEvaluation) GetType() penum.ExamPlayType {
	if x != nil {
		return x.Type
	}
	return penum.ExamPlayType(0)
}

func (x *ProduceExamAutoTriggerEvaluation) GetExamStatusEnchantProduceExamTriggerId() string {
	if x != nil {
		return x.ExamStatusEnchantProduceExamTriggerId
	}
	return ""
}

func (x *ProduceExamAutoTriggerEvaluation) GetCoefficientPermil() int32 {
	if x != nil {
		return x.CoefficientPermil
	}
	return 0
}

type ProduceExamAutoTriggerEvaluationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamAutoTriggerEvaluation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamAutoTriggerEvaluationList) Reset() {
	*x = ProduceExamAutoTriggerEvaluationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamAutoTriggerEvaluationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamAutoTriggerEvaluationList) ProtoMessage() {}

func (x *ProduceExamAutoTriggerEvaluationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamAutoTriggerEvaluationList.ProtoReflect.Descriptor instead.
func (*ProduceExamAutoTriggerEvaluationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{252}
}

func (x *ProduceExamAutoTriggerEvaluationList) GetList() []*ProduceExamAutoTriggerEvaluation {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamBattleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Turn                           int32  `protobuf:"varint,3,opt,name=turn,proto3" json:"turn,omitempty"`
	Vocal                          int32  `protobuf:"varint,4,opt,name=vocal,proto3" json:"vocal,omitempty"`
	Dance                          int32  `protobuf:"varint,5,opt,name=dance,proto3" json:"dance,omitempty"`
	Visual                         int32  `protobuf:"varint,6,opt,name=visual,proto3" json:"visual,omitempty"`
	ProduceExamBattleScoreConfigId string `protobuf:"bytes,8,opt,name=produceExamBattleScoreConfigId,proto3" json:"produceExamBattleScoreConfigId,omitempty"`
	VocalExcellent                 int32  `protobuf:"varint,20,opt,name=vocalExcellent,proto3" json:"vocalExcellent,omitempty"`
	DanceExcellent                 int32  `protobuf:"varint,21,opt,name=danceExcellent,proto3" json:"danceExcellent,omitempty"`
	VisualExcellent                int32  `protobuf:"varint,22,opt,name=visualExcellent,proto3" json:"visualExcellent,omitempty"`
	VocalBad                       int32  `protobuf:"varint,23,opt,name=vocalBad,proto3" json:"vocalBad,omitempty"`
	DanceBad                       int32  `protobuf:"varint,24,opt,name=danceBad,proto3" json:"danceBad,omitempty"`
	VisualBad                      int32  `protobuf:"varint,25,opt,name=visualBad,proto3" json:"visualBad,omitempty"`
}

func (x *ProduceExamBattleConfig) Reset() {
	*x = ProduceExamBattleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleConfig) ProtoMessage() {}

func (x *ProduceExamBattleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleConfig.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleConfig) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{253}
}

func (x *ProduceExamBattleConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamBattleConfig) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetVocal() int32 {
	if x != nil {
		return x.Vocal
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetDance() int32 {
	if x != nil {
		return x.Dance
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetVisual() int32 {
	if x != nil {
		return x.Visual
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetProduceExamBattleScoreConfigId() string {
	if x != nil {
		return x.ProduceExamBattleScoreConfigId
	}
	return ""
}

func (x *ProduceExamBattleConfig) GetVocalExcellent() int32 {
	if x != nil {
		return x.VocalExcellent
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetDanceExcellent() int32 {
	if x != nil {
		return x.DanceExcellent
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetVisualExcellent() int32 {
	if x != nil {
		return x.VisualExcellent
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetVocalBad() int32 {
	if x != nil {
		return x.VocalBad
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetDanceBad() int32 {
	if x != nil {
		return x.DanceBad
	}
	return 0
}

func (x *ProduceExamBattleConfig) GetVisualBad() int32 {
	if x != nil {
		return x.VisualBad
	}
	return 0
}

type ProduceExamBattleConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamBattleConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamBattleConfigList) Reset() {
	*x = ProduceExamBattleConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleConfigList) ProtoMessage() {}

func (x *ProduceExamBattleConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleConfigList.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleConfigList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{254}
}

func (x *ProduceExamBattleConfigList) GetList() []*ProduceExamBattleConfig {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamBattleNpcGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number                    int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	CharacterId               string `protobuf:"bytes,3,opt,name=characterId,proto3" json:"characterId,omitempty"`
	ProduceExamBattleNpcMobId string `protobuf:"bytes,4,opt,name=produceExamBattleNpcMobId,proto3" json:"produceExamBattleNpcMobId,omitempty"`
	ScoreMin                  int32  `protobuf:"varint,5,opt,name=scoreMin,proto3" json:"scoreMin,omitempty"`
	ScoreMax                  int32  `protobuf:"varint,6,opt,name=scoreMax,proto3" json:"scoreMax,omitempty"`
	VocalPermil               int32  `protobuf:"varint,7,opt,name=vocalPermil,proto3" json:"vocalPermil,omitempty"`
	DancePermil               int32  `protobuf:"varint,8,opt,name=dancePermil,proto3" json:"dancePermil,omitempty"`
	VisualPermil              int32  `protobuf:"varint,9,opt,name=visualPermil,proto3" json:"visualPermil,omitempty"`
	OpScorePermil             int32  `protobuf:"varint,10,opt,name=opScorePermil,proto3" json:"opScorePermil,omitempty"`
	MidScorePermil            int32  `protobuf:"varint,11,opt,name=midScorePermil,proto3" json:"midScorePermil,omitempty"`
	EdScorePermil             int32  `protobuf:"varint,12,opt,name=edScorePermil,proto3" json:"edScorePermil,omitempty"`
}

func (x *ProduceExamBattleNpcGroup) Reset() {
	*x = ProduceExamBattleNpcGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleNpcGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleNpcGroup) ProtoMessage() {}

func (x *ProduceExamBattleNpcGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleNpcGroup.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleNpcGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{255}
}

func (x *ProduceExamBattleNpcGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamBattleNpcGroup) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceExamBattleNpcGroup) GetProduceExamBattleNpcMobId() string {
	if x != nil {
		return x.ProduceExamBattleNpcMobId
	}
	return ""
}

func (x *ProduceExamBattleNpcGroup) GetScoreMin() int32 {
	if x != nil {
		return x.ScoreMin
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetScoreMax() int32 {
	if x != nil {
		return x.ScoreMax
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetVocalPermil() int32 {
	if x != nil {
		return x.VocalPermil
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetDancePermil() int32 {
	if x != nil {
		return x.DancePermil
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetVisualPermil() int32 {
	if x != nil {
		return x.VisualPermil
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetOpScorePermil() int32 {
	if x != nil {
		return x.OpScorePermil
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetMidScorePermil() int32 {
	if x != nil {
		return x.MidScorePermil
	}
	return 0
}

func (x *ProduceExamBattleNpcGroup) GetEdScorePermil() int32 {
	if x != nil {
		return x.EdScorePermil
	}
	return 0
}

type ProduceExamBattleNpcGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamBattleNpcGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamBattleNpcGroupList) Reset() {
	*x = ProduceExamBattleNpcGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleNpcGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleNpcGroupList) ProtoMessage() {}

func (x *ProduceExamBattleNpcGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleNpcGroupList.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleNpcGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{256}
}

func (x *ProduceExamBattleNpcGroupList) GetList() []*ProduceExamBattleNpcGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamBattleNpcMob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AssetId string `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (x *ProduceExamBattleNpcMob) Reset() {
	*x = ProduceExamBattleNpcMob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleNpcMob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleNpcMob) ProtoMessage() {}

func (x *ProduceExamBattleNpcMob) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleNpcMob.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleNpcMob) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{257}
}

func (x *ProduceExamBattleNpcMob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamBattleNpcMob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceExamBattleNpcMob) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ProduceExamBattleNpcMobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamBattleNpcMob `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamBattleNpcMobList) Reset() {
	*x = ProduceExamBattleNpcMobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleNpcMobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleNpcMobList) ProtoMessage() {}

func (x *ProduceExamBattleNpcMobList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleNpcMobList.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleNpcMobList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{258}
}

func (x *ProduceExamBattleNpcMobList) GetList() []*ProduceExamBattleNpcMob {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamBattleScoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Parameter    int32  `protobuf:"varint,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	VocalPermil  int32  `protobuf:"varint,3,opt,name=vocalPermil,proto3" json:"vocalPermil,omitempty"`
	DancePermil  int32  `protobuf:"varint,4,opt,name=dancePermil,proto3" json:"dancePermil,omitempty"`
	VisualPermil int32  `protobuf:"varint,5,opt,name=visualPermil,proto3" json:"visualPermil,omitempty"`
}

func (x *ProduceExamBattleScoreConfig) Reset() {
	*x = ProduceExamBattleScoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleScoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleScoreConfig) ProtoMessage() {}

func (x *ProduceExamBattleScoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleScoreConfig.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleScoreConfig) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{259}
}

func (x *ProduceExamBattleScoreConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamBattleScoreConfig) GetParameter() int32 {
	if x != nil {
		return x.Parameter
	}
	return 0
}

func (x *ProduceExamBattleScoreConfig) GetVocalPermil() int32 {
	if x != nil {
		return x.VocalPermil
	}
	return 0
}

func (x *ProduceExamBattleScoreConfig) GetDancePermil() int32 {
	if x != nil {
		return x.DancePermil
	}
	return 0
}

func (x *ProduceExamBattleScoreConfig) GetVisualPermil() int32 {
	if x != nil {
		return x.VisualPermil
	}
	return 0
}

type ProduceExamBattleScoreConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamBattleScoreConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamBattleScoreConfigList) Reset() {
	*x = ProduceExamBattleScoreConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamBattleScoreConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamBattleScoreConfigList) ProtoMessage() {}

func (x *ProduceExamBattleScoreConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamBattleScoreConfigList.ProtoReflect.Descriptor instead.
func (*ProduceExamBattleScoreConfigList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{260}
}

func (x *ProduceExamBattleScoreConfigList) GetList() []*ProduceExamBattleScoreConfig {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EffectType                 penum.ProduceExamEffectType          `protobuf:"varint,2,opt,name=effectType,proto3,enum=penum.ProduceExamEffectType" json:"effectType,omitempty"`
	Descriptions               []*pcommon.ProduceDescriptionElement `protobuf:"bytes,4,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	EffectValue1               int32                                `protobuf:"varint,5,opt,name=effectValue1,proto3" json:"effectValue1,omitempty"`
	EffectValue2               int32                                `protobuf:"varint,6,opt,name=effectValue2,proto3" json:"effectValue2,omitempty"`
	EffectCount                int32                                `protobuf:"varint,7,opt,name=effectCount,proto3" json:"effectCount,omitempty"`
	EffectTurn                 int32                                `protobuf:"varint,8,opt,name=effectTurn,proto3" json:"effectTurn,omitempty"`
	TargetProduceCardId        string                               `protobuf:"bytes,9,opt,name=targetProduceCardId,proto3" json:"targetProduceCardId,omitempty"`
	TargetUpgradeCount         int32                                `protobuf:"varint,10,opt,name=targetUpgradeCount,proto3" json:"targetUpgradeCount,omitempty"`
	TargetExamEffectType       penum.ProduceExamEffectType          `protobuf:"varint,11,opt,name=targetExamEffectType,proto3,enum=penum.ProduceExamEffectType" json:"targetExamEffectType,omitempty"`
	ProduceCardSearchId        string                               `protobuf:"bytes,12,opt,name=produceCardSearchId,proto3" json:"produceCardSearchId,omitempty"`
	MovePositionType           penum.ProduceCardMovePositionType    `protobuf:"varint,13,opt,name=movePositionType,proto3,enum=penum.ProduceCardMovePositionType" json:"movePositionType,omitempty"`
	PickRangeType              penum.ProducePickRangeType           `protobuf:"varint,14,opt,name=pickRangeType,proto3,enum=penum.ProducePickRangeType" json:"pickRangeType,omitempty"`
	PickCountMin               int32                                `protobuf:"varint,15,opt,name=pickCountMin,proto3" json:"pickCountMin,omitempty"`
	PickCountMax               int32                                `protobuf:"varint,16,opt,name=pickCountMax,proto3" json:"pickCountMax,omitempty"`
	ChainProduceExamEffectId   string                               `protobuf:"bytes,17,opt,name=chainProduceExamEffectId,proto3" json:"chainProduceExamEffectId,omitempty"`
	ProduceExamStatusEnchantId string                               `protobuf:"bytes,18,opt,name=produceExamStatusEnchantId,proto3" json:"produceExamStatusEnchantId,omitempty"`
	ProduceCardStatusEnchantId string                               `protobuf:"bytes,19,opt,name=produceCardStatusEnchantId,proto3" json:"produceCardStatusEnchantId,omitempty"`
	ProduceCardGrowEffectId    string                               `protobuf:"bytes,20,opt,name=produceCardGrowEffectId,proto3" json:"produceCardGrowEffectId,omitempty"`
}

func (x *ProduceExamEffect) Reset() {
	*x = ProduceExamEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamEffect) ProtoMessage() {}

func (x *ProduceExamEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamEffect.ProtoReflect.Descriptor instead.
func (*ProduceExamEffect) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{261}
}

func (x *ProduceExamEffect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamEffect) GetEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.EffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *ProduceExamEffect) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceExamEffect) GetEffectValue1() int32 {
	if x != nil {
		return x.EffectValue1
	}
	return 0
}

func (x *ProduceExamEffect) GetEffectValue2() int32 {
	if x != nil {
		return x.EffectValue2
	}
	return 0
}

func (x *ProduceExamEffect) GetEffectCount() int32 {
	if x != nil {
		return x.EffectCount
	}
	return 0
}

func (x *ProduceExamEffect) GetEffectTurn() int32 {
	if x != nil {
		return x.EffectTurn
	}
	return 0
}

func (x *ProduceExamEffect) GetTargetProduceCardId() string {
	if x != nil {
		return x.TargetProduceCardId
	}
	return ""
}

func (x *ProduceExamEffect) GetTargetUpgradeCount() int32 {
	if x != nil {
		return x.TargetUpgradeCount
	}
	return 0
}

func (x *ProduceExamEffect) GetTargetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.TargetExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *ProduceExamEffect) GetProduceCardSearchId() string {
	if x != nil {
		return x.ProduceCardSearchId
	}
	return ""
}

func (x *ProduceExamEffect) GetMovePositionType() penum.ProduceCardMovePositionType {
	if x != nil {
		return x.MovePositionType
	}
	return penum.ProduceCardMovePositionType(0)
}

func (x *ProduceExamEffect) GetPickRangeType() penum.ProducePickRangeType {
	if x != nil {
		return x.PickRangeType
	}
	return penum.ProducePickRangeType(0)
}

func (x *ProduceExamEffect) GetPickCountMin() int32 {
	if x != nil {
		return x.PickCountMin
	}
	return 0
}

func (x *ProduceExamEffect) GetPickCountMax() int32 {
	if x != nil {
		return x.PickCountMax
	}
	return 0
}

func (x *ProduceExamEffect) GetChainProduceExamEffectId() string {
	if x != nil {
		return x.ChainProduceExamEffectId
	}
	return ""
}

func (x *ProduceExamEffect) GetProduceExamStatusEnchantId() string {
	if x != nil {
		return x.ProduceExamStatusEnchantId
	}
	return ""
}

func (x *ProduceExamEffect) GetProduceCardStatusEnchantId() string {
	if x != nil {
		return x.ProduceCardStatusEnchantId
	}
	return ""
}

func (x *ProduceExamEffect) GetProduceCardGrowEffectId() string {
	if x != nil {
		return x.ProduceCardGrowEffectId
	}
	return ""
}

type ProduceExamEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamEffect `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamEffectList) Reset() {
	*x = ProduceExamEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamEffectList) ProtoMessage() {}

func (x *ProduceExamEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamEffectList.ProtoReflect.Descriptor instead.
func (*ProduceExamEffectList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{262}
}

func (x *ProduceExamEffectList) GetList() []*ProduceExamEffect {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamGimmickEffectGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Priority                int32                                `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	RemainingTurnPermil     int32                                `protobuf:"varint,5,opt,name=remainingTurnPermil,proto3" json:"remainingTurnPermil,omitempty"`
	StartTurn               int32                                `protobuf:"varint,6,opt,name=startTurn,proto3" json:"startTurn,omitempty"`
	RemainingTurn           int32                                `protobuf:"varint,7,opt,name=remainingTurn,proto3" json:"remainingTurn,omitempty"`
	FieldStatusType         penum.ProduceExamFieldStatusType     `protobuf:"varint,8,opt,name=fieldStatusType,proto3,enum=penum.ProduceExamFieldStatusType" json:"fieldStatusType,omitempty"`
	FieldStatusValue        int32                                `protobuf:"varint,9,opt,name=fieldStatusValue,proto3" json:"fieldStatusValue,omitempty"`
	FieldStatusCheckType    penum.ProduceExamTriggerCheckType    `protobuf:"varint,10,opt,name=fieldStatusCheckType,proto3,enum=penum.ProduceExamTriggerCheckType" json:"fieldStatusCheckType,omitempty"`
	ProduceExamEffectId     string                               `protobuf:"bytes,11,opt,name=produceExamEffectId,proto3" json:"produceExamEffectId,omitempty"`
	Descriptions            []*pcommon.ProduceDescriptionElement `protobuf:"bytes,13,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	IsPositive              bool                                 `protobuf:"varint,14,opt,name=isPositive,proto3" json:"isPositive,omitempty"`
	FieldStatusDescriptions []*pcommon.ProduceDescriptionElement `protobuf:"bytes,15,rep,name=fieldStatusDescriptions,proto3" json:"fieldStatusDescriptions,omitempty"`
	EffectDescriptions      []*pcommon.ProduceDescriptionElement `protobuf:"bytes,16,rep,name=effectDescriptions,proto3" json:"effectDescriptions,omitempty"`
}

func (x *ProduceExamGimmickEffectGroup) Reset() {
	*x = ProduceExamGimmickEffectGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamGimmickEffectGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamGimmickEffectGroup) ProtoMessage() {}

func (x *ProduceExamGimmickEffectGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamGimmickEffectGroup.ProtoReflect.Descriptor instead.
func (*ProduceExamGimmickEffectGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{263}
}

func (x *ProduceExamGimmickEffectGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamGimmickEffectGroup) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ProduceExamGimmickEffectGroup) GetRemainingTurnPermil() int32 {
	if x != nil {
		return x.RemainingTurnPermil
	}
	return 0
}

func (x *ProduceExamGimmickEffectGroup) GetStartTurn() int32 {
	if x != nil {
		return x.StartTurn
	}
	return 0
}

func (x *ProduceExamGimmickEffectGroup) GetRemainingTurn() int32 {
	if x != nil {
		return x.RemainingTurn
	}
	return 0
}

func (x *ProduceExamGimmickEffectGroup) GetFieldStatusType() penum.ProduceExamFieldStatusType {
	if x != nil {
		return x.FieldStatusType
	}
	return penum.ProduceExamFieldStatusType(0)
}

func (x *ProduceExamGimmickEffectGroup) GetFieldStatusValue() int32 {
	if x != nil {
		return x.FieldStatusValue
	}
	return 0
}

func (x *ProduceExamGimmickEffectGroup) GetFieldStatusCheckType() penum.ProduceExamTriggerCheckType {
	if x != nil {
		return x.FieldStatusCheckType
	}
	return penum.ProduceExamTriggerCheckType(0)
}

func (x *ProduceExamGimmickEffectGroup) GetProduceExamEffectId() string {
	if x != nil {
		return x.ProduceExamEffectId
	}
	return ""
}

func (x *ProduceExamGimmickEffectGroup) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceExamGimmickEffectGroup) GetIsPositive() bool {
	if x != nil {
		return x.IsPositive
	}
	return false
}

func (x *ProduceExamGimmickEffectGroup) GetFieldStatusDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.FieldStatusDescriptions
	}
	return nil
}

func (x *ProduceExamGimmickEffectGroup) GetEffectDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.EffectDescriptions
	}
	return nil
}

type ProduceExamGimmickEffectGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamGimmickEffectGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamGimmickEffectGroupList) Reset() {
	*x = ProduceExamGimmickEffectGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamGimmickEffectGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamGimmickEffectGroupList) ProtoMessage() {}

func (x *ProduceExamGimmickEffectGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamGimmickEffectGroupList.ProtoReflect.Descriptor instead.
func (*ProduceExamGimmickEffectGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{264}
}

func (x *ProduceExamGimmickEffectGroupList) GetList() []*ProduceExamGimmickEffectGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamStatusEnchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId              string                               `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Descriptions         []*pcommon.ProduceDescriptionElement `protobuf:"bytes,5,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	ProduceExamTriggerId string                               `protobuf:"bytes,7,opt,name=produceExamTriggerId,proto3" json:"produceExamTriggerId,omitempty"`
	ProduceExamEffectIds []string                             `protobuf:"bytes,8,rep,name=produceExamEffectIds,proto3" json:"produceExamEffectIds,omitempty"`
}

func (x *ProduceExamStatusEnchant) Reset() {
	*x = ProduceExamStatusEnchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamStatusEnchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamStatusEnchant) ProtoMessage() {}

func (x *ProduceExamStatusEnchant) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamStatusEnchant.ProtoReflect.Descriptor instead.
func (*ProduceExamStatusEnchant) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{265}
}

func (x *ProduceExamStatusEnchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamStatusEnchant) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ProduceExamStatusEnchant) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceExamStatusEnchant) GetProduceExamTriggerId() string {
	if x != nil {
		return x.ProduceExamTriggerId
	}
	return ""
}

func (x *ProduceExamStatusEnchant) GetProduceExamEffectIds() []string {
	if x != nil {
		return x.ProduceExamEffectIds
	}
	return nil
}

type ProduceExamStatusEnchantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamStatusEnchant `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamStatusEnchantList) Reset() {
	*x = ProduceExamStatusEnchantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamStatusEnchantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamStatusEnchantList) ProtoMessage() {}

func (x *ProduceExamStatusEnchantList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamStatusEnchantList.ProtoReflect.Descriptor instead.
func (*ProduceExamStatusEnchantList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{266}
}

func (x *ProduceExamStatusEnchantList) GetList() []*ProduceExamStatusEnchant {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceExamTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhaseTypes                      []penum.ProduceExamPhaseType         `protobuf:"varint,2,rep,packed,name=phaseTypes,proto3,enum=penum.ProduceExamPhaseType" json:"phaseTypes,omitempty"`
	PhaseValues                     []int32                              `protobuf:"varint,4,rep,packed,name=phaseValues,proto3" json:"phaseValues,omitempty"`
	FieldStatusCheckTypes           []penum.ProduceExamTriggerCheckType  `protobuf:"varint,5,rep,packed,name=fieldStatusCheckTypes,proto3,enum=penum.ProduceExamTriggerCheckType" json:"fieldStatusCheckTypes,omitempty"`
	FieldStatusTypes                []penum.ProduceExamFieldStatusType   `protobuf:"varint,6,rep,packed,name=fieldStatusTypes,proto3,enum=penum.ProduceExamFieldStatusType" json:"fieldStatusTypes,omitempty"`
	FieldStatusValues               []int32                              `protobuf:"varint,7,rep,packed,name=fieldStatusValues,proto3" json:"fieldStatusValues,omitempty"`
	FieldStatusProduceCardSearchIds []string                             `protobuf:"bytes,8,rep,name=fieldStatusProduceCardSearchIds,proto3" json:"fieldStatusProduceCardSearchIds,omitempty"`
	ProduceCardSearchId             string                               `protobuf:"bytes,9,opt,name=produceCardSearchId,proto3" json:"produceCardSearchId,omitempty"`
	UpperSearchCount                int32                                `protobuf:"varint,10,opt,name=upperSearchCount,proto3" json:"upperSearchCount,omitempty"`
	LowerSearchCount                int32                                `protobuf:"varint,11,opt,name=lowerSearchCount,proto3" json:"lowerSearchCount,omitempty"`
	CardMovePositionType            penum.ProduceCardMovePositionType    `protobuf:"varint,12,opt,name=cardMovePositionType,proto3,enum=penum.ProduceCardMovePositionType" json:"cardMovePositionType,omitempty"`
	EffectTypes                     []penum.ProduceExamEffectType        `protobuf:"varint,13,rep,packed,name=effectTypes,proto3,enum=penum.ProduceExamEffectType" json:"effectTypes,omitempty"`
	LessonType                      penum.ProduceStepLessonType          `protobuf:"varint,14,opt,name=lessonType,proto3,enum=penum.ProduceStepLessonType" json:"lessonType,omitempty"`
	Descriptions                    []*pcommon.ProduceDescriptionElement `protobuf:"bytes,15,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
}

func (x *ProduceExamTrigger) Reset() {
	*x = ProduceExamTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamTrigger) ProtoMessage() {}

func (x *ProduceExamTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamTrigger.ProtoReflect.Descriptor instead.
func (*ProduceExamTrigger) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{267}
}

func (x *ProduceExamTrigger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceExamTrigger) GetPhaseTypes() []penum.ProduceExamPhaseType {
	if x != nil {
		return x.PhaseTypes
	}
	return nil
}

func (x *ProduceExamTrigger) GetPhaseValues() []int32 {
	if x != nil {
		return x.PhaseValues
	}
	return nil
}

func (x *ProduceExamTrigger) GetFieldStatusCheckTypes() []penum.ProduceExamTriggerCheckType {
	if x != nil {
		return x.FieldStatusCheckTypes
	}
	return nil
}

func (x *ProduceExamTrigger) GetFieldStatusTypes() []penum.ProduceExamFieldStatusType {
	if x != nil {
		return x.FieldStatusTypes
	}
	return nil
}

func (x *ProduceExamTrigger) GetFieldStatusValues() []int32 {
	if x != nil {
		return x.FieldStatusValues
	}
	return nil
}

func (x *ProduceExamTrigger) GetFieldStatusProduceCardSearchIds() []string {
	if x != nil {
		return x.FieldStatusProduceCardSearchIds
	}
	return nil
}

func (x *ProduceExamTrigger) GetProduceCardSearchId() string {
	if x != nil {
		return x.ProduceCardSearchId
	}
	return ""
}

func (x *ProduceExamTrigger) GetUpperSearchCount() int32 {
	if x != nil {
		return x.UpperSearchCount
	}
	return 0
}

func (x *ProduceExamTrigger) GetLowerSearchCount() int32 {
	if x != nil {
		return x.LowerSearchCount
	}
	return 0
}

func (x *ProduceExamTrigger) GetCardMovePositionType() penum.ProduceCardMovePositionType {
	if x != nil {
		return x.CardMovePositionType
	}
	return penum.ProduceCardMovePositionType(0)
}

func (x *ProduceExamTrigger) GetEffectTypes() []penum.ProduceExamEffectType {
	if x != nil {
		return x.EffectTypes
	}
	return nil
}

func (x *ProduceExamTrigger) GetLessonType() penum.ProduceStepLessonType {
	if x != nil {
		return x.LessonType
	}
	return penum.ProduceStepLessonType(0)
}

func (x *ProduceExamTrigger) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

type ProduceExamTriggerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceExamTrigger `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceExamTriggerList) Reset() {
	*x = ProduceExamTriggerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceExamTriggerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceExamTriggerList) ProtoMessage() {}

func (x *ProduceExamTriggerList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceExamTriggerList.ProtoReflect.Descriptor instead.
func (*ProduceExamTriggerList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{268}
}

func (x *ProduceExamTriggerList) GetList() []*ProduceExamTrigger {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                       penum.ProduceType `protobuf:"varint,3,opt,name=type,proto3,enum=penum.ProduceType" json:"type,omitempty"`
	ProduceIds                 []string          `protobuf:"bytes,4,rep,name=produceIds,proto3" json:"produceIds,omitempty"`
	AssetId                    string            `protobuf:"bytes,5,opt,name=assetId,proto3" json:"assetId,omitempty"`
	ViewConditionSetId         string            `protobuf:"bytes,6,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId       string            `protobuf:"bytes,7,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	FailedProduceMemoryAssetId string            `protobuf:"bytes,8,opt,name=failedProduceMemoryAssetId,proto3" json:"failedProduceMemoryAssetId,omitempty"`
	Description                string            `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Order                      int32             `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ProduceGroup) Reset() {
	*x = ProduceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceGroup) ProtoMessage() {}

func (x *ProduceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceGroup.ProtoReflect.Descriptor instead.
func (*ProduceGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{269}
}

func (x *ProduceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceGroup) GetType() penum.ProduceType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceType(0)
}

func (x *ProduceGroup) GetProduceIds() []string {
	if x != nil {
		return x.ProduceIds
	}
	return nil
}

func (x *ProduceGroup) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ProduceGroup) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *ProduceGroup) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *ProduceGroup) GetFailedProduceMemoryAssetId() string {
	if x != nil {
		return x.FailedProduceMemoryAssetId
	}
	return ""
}

func (x *ProduceGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProduceGroup) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProduceGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceGroupList) Reset() {
	*x = ProduceGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceGroupList) ProtoMessage() {}

func (x *ProduceGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceGroupList.ProtoReflect.Descriptor instead.
func (*ProduceGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{270}
}

func (x *ProduceGroupList) GetList() []*ProduceGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceHighScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order int32  `protobuf:"varint,104,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ProduceHighScore) Reset() {
	*x = ProduceHighScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceHighScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceHighScore) ProtoMessage() {}

func (x *ProduceHighScore) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceHighScore.ProtoReflect.Descriptor instead.
func (*ProduceHighScore) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{271}
}

func (x *ProduceHighScore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceHighScore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceHighScore) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProduceHighScoreList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceHighScore `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceHighScoreList) Reset() {
	*x = ProduceHighScoreList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceHighScoreList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceHighScoreList) ProtoMessage() {}

func (x *ProduceHighScoreList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceHighScoreList.ProtoReflect.Descriptor instead.
func (*ProduceHighScoreList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{272}
}

func (x *ProduceHighScoreList) GetList() []*ProduceHighScore {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId              string                               `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Rarity               penum.ProduceItemRarity              `protobuf:"varint,3,opt,name=rarity,proto3,enum=penum.ProduceItemRarity" json:"rarity,omitempty"`
	Name                 string                               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PlanType             penum.ProducePlanType                `protobuf:"varint,6,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	FireLimit            int32                                `protobuf:"varint,7,opt,name=fireLimit,proto3" json:"fireLimit,omitempty"`
	ProduceTriggerId     string                               `protobuf:"bytes,8,opt,name=produceTriggerId,proto3" json:"produceTriggerId,omitempty"`
	ProduceTriggerIds    []string                             `protobuf:"bytes,9,rep,name=produceTriggerIds,proto3" json:"produceTriggerIds,omitempty"`
	ProduceItemEffectIds []string                             `protobuf:"bytes,10,rep,name=produceItemEffectIds,proto3" json:"produceItemEffectIds,omitempty"`
	Skills               []*ProduceItem_Skill                 `protobuf:"bytes,11,rep,name=skills,proto3" json:"skills,omitempty"`
	LibraryHidden        bool                                 `protobuf:"varint,12,opt,name=libraryHidden,proto3" json:"libraryHidden,omitempty"`
	Descriptions         []*pcommon.ProduceDescriptionElement `protobuf:"bytes,15,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	Evaluation           int32                                `protobuf:"varint,16,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	IsExamEffect         bool                                 `protobuf:"varint,17,opt,name=isExamEffect,proto3" json:"isExamEffect,omitempty"`
	OriginIdolCardId     string                               `protobuf:"bytes,18,opt,name=originIdolCardId,proto3" json:"originIdolCardId,omitempty"`
	OriginSupportCardId  string                               `protobuf:"bytes,19,opt,name=originSupportCardId,proto3" json:"originSupportCardId,omitempty"`
	IsUpgraded           bool                                 `protobuf:"varint,20,opt,name=isUpgraded,proto3" json:"isUpgraded,omitempty"`
	EffectGroupIds       []string                             `protobuf:"bytes,21,rep,name=effectGroupIds,proto3" json:"effectGroupIds,omitempty"`
	IsChallenge          bool                                 `protobuf:"varint,22,opt,name=isChallenge,proto3" json:"isChallenge,omitempty"`
	ViewStartTime        int64                                `protobuf:"varint,97,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	IsLimited            bool                                 `protobuf:"varint,99,opt,name=isLimited,proto3" json:"isLimited,omitempty"`
	Order                int64                                `protobuf:"varint,100,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ProduceItem) Reset() {
	*x = ProduceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItem) ProtoMessage() {}

func (x *ProduceItem) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItem.ProtoReflect.Descriptor instead.
func (*ProduceItem) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{273}
}

func (x *ProduceItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceItem) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ProduceItem) GetRarity() penum.ProduceItemRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.ProduceItemRarity(0)
}

func (x *ProduceItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceItem) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *ProduceItem) GetFireLimit() int32 {
	if x != nil {
		return x.FireLimit
	}
	return 0
}

func (x *ProduceItem) GetProduceTriggerId() string {
	if x != nil {
		return x.ProduceTriggerId
	}
	return ""
}

func (x *ProduceItem) GetProduceTriggerIds() []string {
	if x != nil {
		return x.ProduceTriggerIds
	}
	return nil
}

func (x *ProduceItem) GetProduceItemEffectIds() []string {
	if x != nil {
		return x.ProduceItemEffectIds
	}
	return nil
}

func (x *ProduceItem) GetSkills() []*ProduceItem_Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ProduceItem) GetLibraryHidden() bool {
	if x != nil {
		return x.LibraryHidden
	}
	return false
}

func (x *ProduceItem) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceItem) GetEvaluation() int32 {
	if x != nil {
		return x.Evaluation
	}
	return 0
}

func (x *ProduceItem) GetIsExamEffect() bool {
	if x != nil {
		return x.IsExamEffect
	}
	return false
}

func (x *ProduceItem) GetOriginIdolCardId() string {
	if x != nil {
		return x.OriginIdolCardId
	}
	return ""
}

func (x *ProduceItem) GetOriginSupportCardId() string {
	if x != nil {
		return x.OriginSupportCardId
	}
	return ""
}

func (x *ProduceItem) GetIsUpgraded() bool {
	if x != nil {
		return x.IsUpgraded
	}
	return false
}

func (x *ProduceItem) GetEffectGroupIds() []string {
	if x != nil {
		return x.EffectGroupIds
	}
	return nil
}

func (x *ProduceItem) GetIsChallenge() bool {
	if x != nil {
		return x.IsChallenge
	}
	return false
}

func (x *ProduceItem) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *ProduceItem) GetIsLimited() bool {
	if x != nil {
		return x.IsLimited
	}
	return false
}

func (x *ProduceItem) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProduceItemChallengeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceItemId      string `protobuf:"bytes,2,opt,name=produceItemId,proto3" json:"produceItemId,omitempty"`
	LessonLimitUpScore int32  `protobuf:"varint,3,opt,name=lessonLimitUpScore,proto3" json:"lessonLimitUpScore,omitempty"`
}

func (x *ProduceItemChallengeGroup) Reset() {
	*x = ProduceItemChallengeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemChallengeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemChallengeGroup) ProtoMessage() {}

func (x *ProduceItemChallengeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemChallengeGroup.ProtoReflect.Descriptor instead.
func (*ProduceItemChallengeGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{274}
}

func (x *ProduceItemChallengeGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceItemChallengeGroup) GetProduceItemId() string {
	if x != nil {
		return x.ProduceItemId
	}
	return ""
}

func (x *ProduceItemChallengeGroup) GetLessonLimitUpScore() int32 {
	if x != nil {
		return x.LessonLimitUpScore
	}
	return 0
}

type ProduceItemChallengeGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceItemChallengeGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceItemChallengeGroupList) Reset() {
	*x = ProduceItemChallengeGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemChallengeGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemChallengeGroupList) ProtoMessage() {}

func (x *ProduceItemChallengeGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemChallengeGroupList.ProtoReflect.Descriptor instead.
func (*ProduceItemChallengeGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{275}
}

func (x *ProduceItemChallengeGroupList) GetList() []*ProduceItemChallengeGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceItemEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EffectType                 penum.ProduceItemEffectType `protobuf:"varint,2,opt,name=effectType,proto3,enum=penum.ProduceItemEffectType" json:"effectType,omitempty"`
	EffectTurn                 int32                       `protobuf:"varint,3,opt,name=effectTurn,proto3" json:"effectTurn,omitempty"`
	EffectCount                int32                       `protobuf:"varint,4,opt,name=effectCount,proto3" json:"effectCount,omitempty"`
	ProduceEffectId            string                      `protobuf:"bytes,5,opt,name=produceEffectId,proto3" json:"produceEffectId,omitempty"`
	ProduceExamStatusEnchantId string                      `protobuf:"bytes,6,opt,name=produceExamStatusEnchantId,proto3" json:"produceExamStatusEnchantId,omitempty"`
}

func (x *ProduceItemEffect) Reset() {
	*x = ProduceItemEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemEffect) ProtoMessage() {}

func (x *ProduceItemEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemEffect.ProtoReflect.Descriptor instead.
func (*ProduceItemEffect) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{276}
}

func (x *ProduceItemEffect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceItemEffect) GetEffectType() penum.ProduceItemEffectType {
	if x != nil {
		return x.EffectType
	}
	return penum.ProduceItemEffectType(0)
}

func (x *ProduceItemEffect) GetEffectTurn() int32 {
	if x != nil {
		return x.EffectTurn
	}
	return 0
}

func (x *ProduceItemEffect) GetEffectCount() int32 {
	if x != nil {
		return x.EffectCount
	}
	return 0
}

func (x *ProduceItemEffect) GetProduceEffectId() string {
	if x != nil {
		return x.ProduceEffectId
	}
	return ""
}

func (x *ProduceItemEffect) GetProduceExamStatusEnchantId() string {
	if x != nil {
		return x.ProduceExamStatusEnchantId
	}
	return ""
}

type ProduceItemEffectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceItemEffect `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceItemEffectList) Reset() {
	*x = ProduceItemEffectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemEffectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemEffectList) ProtoMessage() {}

func (x *ProduceItemEffectList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemEffectList.ProtoReflect.Descriptor instead.
func (*ProduceItemEffectList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{277}
}

func (x *ProduceItemEffectList) GetList() []*ProduceItemEffect {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*pcommon.ProduceItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceItemList) Reset() {
	*x = ProduceItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemList) ProtoMessage() {}

func (x *ProduceItemList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemList.ProtoReflect.Descriptor instead.
func (*ProduceItemList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{278}
}

func (x *ProduceItemList) GetList() []*pcommon.ProduceItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceItemSimulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProduceItemSimulationGroupId string `protobuf:"bytes,1,opt,name=produceItemSimulationGroupId,proto3" json:"produceItemSimulationGroupId,omitempty"`
	ProduceItemId                string `protobuf:"bytes,2,opt,name=produceItemId,proto3" json:"produceItemId,omitempty"`
}

func (x *ProduceItemSimulation) Reset() {
	*x = ProduceItemSimulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemSimulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemSimulation) ProtoMessage() {}

func (x *ProduceItemSimulation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemSimulation.ProtoReflect.Descriptor instead.
func (*ProduceItemSimulation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{279}
}

func (x *ProduceItemSimulation) GetProduceItemSimulationGroupId() string {
	if x != nil {
		return x.ProduceItemSimulationGroupId
	}
	return ""
}

func (x *ProduceItemSimulation) GetProduceItemId() string {
	if x != nil {
		return x.ProduceItemId
	}
	return ""
}

type ProduceItemSimulationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProduceItemSimulationGroup) Reset() {
	*x = ProduceItemSimulationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemSimulationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemSimulationGroup) ProtoMessage() {}

func (x *ProduceItemSimulationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemSimulationGroup.ProtoReflect.Descriptor instead.
func (*ProduceItemSimulationGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{280}
}

func (x *ProduceItemSimulationGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceItemSimulationGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProduceItemSimulationGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceItemSimulationGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceItemSimulationGroupList) Reset() {
	*x = ProduceItemSimulationGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemSimulationGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemSimulationGroupList) ProtoMessage() {}

func (x *ProduceItemSimulationGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemSimulationGroupList.ProtoReflect.Descriptor instead.
func (*ProduceItemSimulationGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{281}
}

func (x *ProduceItemSimulationGroupList) GetList() []*ProduceItemSimulationGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceItemSimulationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceItemSimulation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceItemSimulationList) Reset() {
	*x = ProduceItemSimulationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItemSimulationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItemSimulationList) ProtoMessage() {}

func (x *ProduceItemSimulationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItemSimulationList.ProtoReflect.Descriptor instead.
func (*ProduceItemSimulationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{282}
}

func (x *ProduceItemSimulationList) GetList() []*ProduceItemSimulation {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Produce `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceList) Reset() {
	*x = ProduceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceList) ProtoMessage() {}

func (x *ProduceList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceList.ProtoReflect.Descriptor instead.
func (*ProduceList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{283}
}

func (x *ProduceList) GetList() []*Produce {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicId            string                `protobuf:"bytes,1,opt,name=musicId,proto3" json:"musicId,omitempty"`
	Type               penum.ProduceLiveType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.ProduceLiveType" json:"type,omitempty"`
	ThumbnailAssetId   string                `protobuf:"bytes,6,opt,name=thumbnailAssetId,proto3" json:"thumbnailAssetId,omitempty"`
	EnvironmentAssetId string                `protobuf:"bytes,7,opt,name=environmentAssetId,proto3" json:"environmentAssetId,omitempty"`
	TimelineAssetId    string                `protobuf:"bytes,8,opt,name=timelineAssetId,proto3" json:"timelineAssetId,omitempty"`
	BeforeAdvAssetId   string                `protobuf:"bytes,9,opt,name=beforeAdvAssetId,proto3" json:"beforeAdvAssetId,omitempty"`
	AfterAdvAssetId    string                `protobuf:"bytes,10,opt,name=afterAdvAssetId,proto3" json:"afterAdvAssetId,omitempty"`
	LiveMusicAssetId   string                `protobuf:"bytes,11,opt,name=liveMusicAssetId,proto3" json:"liveMusicAssetId,omitempty"`
	MotionAssetIds     []string              `protobuf:"bytes,12,rep,name=motionAssetIds,proto3" json:"motionAssetIds,omitempty"`
}

func (x *ProduceLive) Reset() {
	*x = ProduceLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceLive) ProtoMessage() {}

func (x *ProduceLive) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceLive.ProtoReflect.Descriptor instead.
func (*ProduceLive) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{284}
}

func (x *ProduceLive) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *ProduceLive) GetType() penum.ProduceLiveType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceLiveType(0)
}

func (x *ProduceLive) GetThumbnailAssetId() string {
	if x != nil {
		return x.ThumbnailAssetId
	}
	return ""
}

func (x *ProduceLive) GetEnvironmentAssetId() string {
	if x != nil {
		return x.EnvironmentAssetId
	}
	return ""
}

func (x *ProduceLive) GetTimelineAssetId() string {
	if x != nil {
		return x.TimelineAssetId
	}
	return ""
}

func (x *ProduceLive) GetBeforeAdvAssetId() string {
	if x != nil {
		return x.BeforeAdvAssetId
	}
	return ""
}

func (x *ProduceLive) GetAfterAdvAssetId() string {
	if x != nil {
		return x.AfterAdvAssetId
	}
	return ""
}

func (x *ProduceLive) GetLiveMusicAssetId() string {
	if x != nil {
		return x.LiveMusicAssetId
	}
	return ""
}

func (x *ProduceLive) GetMotionAssetIds() []string {
	if x != nil {
		return x.MotionAssetIds
	}
	return nil
}

type ProduceLiveCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId        string                `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Type               penum.ProduceLiveType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.ProduceLiveType" json:"type,omitempty"`
	MusicId            string                `protobuf:"bytes,3,opt,name=musicId,proto3" json:"musicId,omitempty"`
	ThumbnailAssetId   string                `protobuf:"bytes,6,opt,name=thumbnailAssetId,proto3" json:"thumbnailAssetId,omitempty"`
	EnvironmentAssetId string                `protobuf:"bytes,7,opt,name=environmentAssetId,proto3" json:"environmentAssetId,omitempty"`
	TimelineAssetId    string                `protobuf:"bytes,8,opt,name=timelineAssetId,proto3" json:"timelineAssetId,omitempty"`
	MotionAssetIds     []string              `protobuf:"bytes,9,rep,name=motionAssetIds,proto3" json:"motionAssetIds,omitempty"`
	LiveMusicAssetId   string                `protobuf:"bytes,10,opt,name=liveMusicAssetId,proto3" json:"liveMusicAssetId,omitempty"`
	BeforeAdvAssetId   string                `protobuf:"bytes,11,opt,name=beforeAdvAssetId,proto3" json:"beforeAdvAssetId,omitempty"`
	AfterAdvAssetId    string                `protobuf:"bytes,12,opt,name=afterAdvAssetId,proto3" json:"afterAdvAssetId,omitempty"`
}

func (x *ProduceLiveCommon) Reset() {
	*x = ProduceLiveCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceLiveCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceLiveCommon) ProtoMessage() {}

func (x *ProduceLiveCommon) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceLiveCommon.ProtoReflect.Descriptor instead.
func (*ProduceLiveCommon) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{285}
}

func (x *ProduceLiveCommon) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceLiveCommon) GetType() penum.ProduceLiveType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceLiveType(0)
}

func (x *ProduceLiveCommon) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *ProduceLiveCommon) GetThumbnailAssetId() string {
	if x != nil {
		return x.ThumbnailAssetId
	}
	return ""
}

func (x *ProduceLiveCommon) GetEnvironmentAssetId() string {
	if x != nil {
		return x.EnvironmentAssetId
	}
	return ""
}

func (x *ProduceLiveCommon) GetTimelineAssetId() string {
	if x != nil {
		return x.TimelineAssetId
	}
	return ""
}

func (x *ProduceLiveCommon) GetMotionAssetIds() []string {
	if x != nil {
		return x.MotionAssetIds
	}
	return nil
}

func (x *ProduceLiveCommon) GetLiveMusicAssetId() string {
	if x != nil {
		return x.LiveMusicAssetId
	}
	return ""
}

func (x *ProduceLiveCommon) GetBeforeAdvAssetId() string {
	if x != nil {
		return x.BeforeAdvAssetId
	}
	return ""
}

func (x *ProduceLiveCommon) GetAfterAdvAssetId() string {
	if x != nil {
		return x.AfterAdvAssetId
	}
	return ""
}

type ProduceLiveCommonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceLiveCommon `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceLiveCommonList) Reset() {
	*x = ProduceLiveCommonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceLiveCommonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceLiveCommonList) ProtoMessage() {}

func (x *ProduceLiveCommonList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceLiveCommonList.ProtoReflect.Descriptor instead.
func (*ProduceLiveCommonList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{286}
}

func (x *ProduceLiveCommonList) GetList() []*ProduceLiveCommon {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceLiveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceLive `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceLiveList) Reset() {
	*x = ProduceLiveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceLiveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceLiveList) ProtoMessage() {}

func (x *ProduceLiveList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceLiveList.ProtoReflect.Descriptor instead.
func (*ProduceLiveList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{287}
}

func (x *ProduceLiveList) GetList() []*ProduceLive {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceNavigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number      int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ProduceNavigation) Reset() {
	*x = ProduceNavigation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceNavigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceNavigation) ProtoMessage() {}

func (x *ProduceNavigation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceNavigation.ProtoReflect.Descriptor instead.
func (*ProduceNavigation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{288}
}

func (x *ProduceNavigation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceNavigation) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceNavigation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ProduceNavigationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceNavigation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceNavigationList) Reset() {
	*x = ProduceNavigationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceNavigationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceNavigationList) ProtoMessage() {}

func (x *ProduceNavigationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceNavigationList.ProtoReflect.Descriptor instead.
func (*ProduceNavigationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{289}
}

func (x *ProduceNavigationList) GetList() []*ProduceNavigation {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceResultMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   string                `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	LiveType      penum.ProduceLiveType `protobuf:"varint,2,opt,name=liveType,proto3,enum=penum.ProduceLiveType" json:"liveType,omitempty"`
	Number        int32                 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	MotionAssetId string                `protobuf:"bytes,4,opt,name=motionAssetId,proto3" json:"motionAssetId,omitempty"`
	FacialAssetId string                `protobuf:"bytes,5,opt,name=facialAssetId,proto3" json:"facialAssetId,omitempty"`
	VoiceAssetId  string                `protobuf:"bytes,6,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *ProduceResultMotion) Reset() {
	*x = ProduceResultMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceResultMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceResultMotion) ProtoMessage() {}

func (x *ProduceResultMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceResultMotion.ProtoReflect.Descriptor instead.
func (*ProduceResultMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{290}
}

func (x *ProduceResultMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceResultMotion) GetLiveType() penum.ProduceLiveType {
	if x != nil {
		return x.LiveType
	}
	return penum.ProduceLiveType(0)
}

func (x *ProduceResultMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceResultMotion) GetMotionAssetId() string {
	if x != nil {
		return x.MotionAssetId
	}
	return ""
}

func (x *ProduceResultMotion) GetFacialAssetId() string {
	if x != nil {
		return x.FacialAssetId
	}
	return ""
}

func (x *ProduceResultMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type ProduceResultMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceResultMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceResultMotionList) Reset() {
	*x = ProduceResultMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceResultMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceResultMotionList) ProtoMessage() {}

func (x *ProduceResultMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceResultMotionList.ProtoReflect.Descriptor instead.
func (*ProduceResultMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{291}
}

func (x *ProduceResultMotionList) GetList() []*ProduceResultMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceScheduleBackground struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationType      penum.ProduceScheduleLocationType `protobuf:"varint,1,opt,name=locationType,proto3,enum=penum.ProduceScheduleLocationType" json:"locationType,omitempty"`
	BackgroundAssetId string                            `protobuf:"bytes,2,opt,name=backgroundAssetId,proto3" json:"backgroundAssetId,omitempty"`
	SceneLayoutId     string                            `protobuf:"bytes,3,opt,name=sceneLayoutId,proto3" json:"sceneLayoutId,omitempty"`
}

func (x *ProduceScheduleBackground) Reset() {
	*x = ProduceScheduleBackground{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceScheduleBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceScheduleBackground) ProtoMessage() {}

func (x *ProduceScheduleBackground) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceScheduleBackground.ProtoReflect.Descriptor instead.
func (*ProduceScheduleBackground) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{292}
}

func (x *ProduceScheduleBackground) GetLocationType() penum.ProduceScheduleLocationType {
	if x != nil {
		return x.LocationType
	}
	return penum.ProduceScheduleLocationType(0)
}

func (x *ProduceScheduleBackground) GetBackgroundAssetId() string {
	if x != nil {
		return x.BackgroundAssetId
	}
	return ""
}

func (x *ProduceScheduleBackground) GetSceneLayoutId() string {
	if x != nil {
		return x.SceneLayoutId
	}
	return ""
}

type ProduceScheduleBackgroundList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceScheduleBackground `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceScheduleBackgroundList) Reset() {
	*x = ProduceScheduleBackgroundList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceScheduleBackgroundList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceScheduleBackgroundList) ProtoMessage() {}

func (x *ProduceScheduleBackgroundList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceScheduleBackgroundList.ProtoReflect.Descriptor instead.
func (*ProduceScheduleBackgroundList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{293}
}

func (x *ProduceScheduleBackgroundList) GetList() []*ProduceScheduleBackground {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceScheduleMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId       string                                 `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	LocationType      penum.ProduceScheduleLocationType      `protobuf:"varint,2,opt,name=locationType,proto3,enum=penum.ProduceScheduleLocationType" json:"locationType,omitempty"`
	StaminaMotionType penum.ProduceScheduleStaminaMotionType `protobuf:"varint,3,opt,name=staminaMotionType,proto3,enum=penum.ProduceScheduleStaminaMotionType" json:"staminaMotionType,omitempty"`
	MotionType        penum.ProduceScheduleMotionType        `protobuf:"varint,4,opt,name=motionType,proto3,enum=penum.ProduceScheduleMotionType" json:"motionType,omitempty"`
	Number            int32                                  `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	FacialAssetIds    []string                               `protobuf:"bytes,6,rep,name=facialAssetIds,proto3" json:"facialAssetIds,omitempty"`
	BodyAssetIds      []string                               `protobuf:"bytes,7,rep,name=bodyAssetIds,proto3" json:"bodyAssetIds,omitempty"`
	VoiceAssetId      string                                 `protobuf:"bytes,8,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *ProduceScheduleMotion) Reset() {
	*x = ProduceScheduleMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceScheduleMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceScheduleMotion) ProtoMessage() {}

func (x *ProduceScheduleMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceScheduleMotion.ProtoReflect.Descriptor instead.
func (*ProduceScheduleMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{294}
}

func (x *ProduceScheduleMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceScheduleMotion) GetLocationType() penum.ProduceScheduleLocationType {
	if x != nil {
		return x.LocationType
	}
	return penum.ProduceScheduleLocationType(0)
}

func (x *ProduceScheduleMotion) GetStaminaMotionType() penum.ProduceScheduleStaminaMotionType {
	if x != nil {
		return x.StaminaMotionType
	}
	return penum.ProduceScheduleStaminaMotionType(0)
}

func (x *ProduceScheduleMotion) GetMotionType() penum.ProduceScheduleMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.ProduceScheduleMotionType(0)
}

func (x *ProduceScheduleMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceScheduleMotion) GetFacialAssetIds() []string {
	if x != nil {
		return x.FacialAssetIds
	}
	return nil
}

func (x *ProduceScheduleMotion) GetBodyAssetIds() []string {
	if x != nil {
		return x.BodyAssetIds
	}
	return nil
}

func (x *ProduceScheduleMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type ProduceScheduleMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceScheduleMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceScheduleMotionList) Reset() {
	*x = ProduceScheduleMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceScheduleMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceScheduleMotionList) ProtoMessage() {}

func (x *ProduceScheduleMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceScheduleMotionList.ProtoReflect.Descriptor instead.
func (*ProduceScheduleMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{295}
}

func (x *ProduceScheduleMotionList) GetList() []*ProduceScheduleMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InitialProducePoint                  int32  `protobuf:"varint,5,opt,name=initialProducePoint,proto3" json:"initialProducePoint,omitempty"`
	ProduceDrinkPossessLimit             int32  `protobuf:"varint,7,opt,name=produceDrinkPossessLimit,proto3" json:"produceDrinkPossessLimit,omitempty"`
	RefreshStaminaRecoveryPermil         int32  `protobuf:"varint,8,opt,name=refreshStaminaRecoveryPermil,proto3" json:"refreshStaminaRecoveryPermil,omitempty"`
	ExamStartAlertStaminaThreshold       int32  `protobuf:"varint,23,opt,name=examStartAlertStaminaThreshold,proto3" json:"examStartAlertStaminaThreshold,omitempty"`
	ContinueCount                        int32  `protobuf:"varint,26,opt,name=continueCount,proto3" json:"continueCount,omitempty"`
	ProduceAuditionTrendAssessmentPermil int32  `protobuf:"varint,64,opt,name=produceAuditionTrendAssessmentPermil,proto3" json:"produceAuditionTrendAssessmentPermil,omitempty"`
}

func (x *ProduceSetting) Reset() {
	*x = ProduceSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSetting) ProtoMessage() {}

func (x *ProduceSetting) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSetting.ProtoReflect.Descriptor instead.
func (*ProduceSetting) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{296}
}

func (x *ProduceSetting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceSetting) GetInitialProducePoint() int32 {
	if x != nil {
		return x.InitialProducePoint
	}
	return 0
}

func (x *ProduceSetting) GetProduceDrinkPossessLimit() int32 {
	if x != nil {
		return x.ProduceDrinkPossessLimit
	}
	return 0
}

func (x *ProduceSetting) GetRefreshStaminaRecoveryPermil() int32 {
	if x != nil {
		return x.RefreshStaminaRecoveryPermil
	}
	return 0
}

func (x *ProduceSetting) GetExamStartAlertStaminaThreshold() int32 {
	if x != nil {
		return x.ExamStartAlertStaminaThreshold
	}
	return 0
}

func (x *ProduceSetting) GetContinueCount() int32 {
	if x != nil {
		return x.ContinueCount
	}
	return 0
}

func (x *ProduceSetting) GetProduceAuditionTrendAssessmentPermil() int32 {
	if x != nil {
		return x.ProduceAuditionTrendAssessmentPermil
	}
	return 0
}

type ProduceSettingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceSetting `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceSettingList) Reset() {
	*x = ProduceSettingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSettingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSettingList) ProtoMessage() {}

func (x *ProduceSettingList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSettingList.ProtoReflect.Descriptor instead.
func (*ProduceSettingList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{297}
}

func (x *ProduceSettingList) GetList() []*ProduceSetting {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level                 int32                                `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Rarity                penum.SkillRarity                    `protobuf:"varint,5,opt,name=rarity,proto3,enum=penum.SkillRarity" json:"rarity,omitempty"`
	Tag                   string                               `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	PlanType              penum.ProducePlanType                `protobuf:"varint,7,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	ActivationCount       int32                                `protobuf:"varint,8,opt,name=activationCount,proto3" json:"activationCount,omitempty"`
	ProduceEffectId1      string                               `protobuf:"bytes,9,opt,name=produceEffectId1,proto3" json:"produceEffectId1,omitempty"`
	ProduceTriggerId1     string                               `protobuf:"bytes,10,opt,name=produceTriggerId1,proto3" json:"produceTriggerId1,omitempty"`
	ActivationRatePermil1 int32                                `protobuf:"varint,11,opt,name=activationRatePermil1,proto3" json:"activationRatePermil1,omitempty"`
	ProduceEffectId2      string                               `protobuf:"bytes,12,opt,name=produceEffectId2,proto3" json:"produceEffectId2,omitempty"`
	ProduceTriggerId2     string                               `protobuf:"bytes,13,opt,name=produceTriggerId2,proto3" json:"produceTriggerId2,omitempty"`
	ActivationRatePermil2 int32                                `protobuf:"varint,14,opt,name=activationRatePermil2,proto3" json:"activationRatePermil2,omitempty"`
	ProduceEffectId3      string                               `protobuf:"bytes,15,opt,name=produceEffectId3,proto3" json:"produceEffectId3,omitempty"`
	ProduceTriggerId3     string                               `protobuf:"bytes,16,opt,name=produceTriggerId3,proto3" json:"produceTriggerId3,omitempty"`
	ActivationRatePermil3 int32                                `protobuf:"varint,17,opt,name=activationRatePermil3,proto3" json:"activationRatePermil3,omitempty"`
	Descriptions          []*pcommon.ProduceDescriptionElement `protobuf:"bytes,20,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
}

func (x *ProduceSkill) Reset() {
	*x = ProduceSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSkill) ProtoMessage() {}

func (x *ProduceSkill) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSkill.ProtoReflect.Descriptor instead.
func (*ProduceSkill) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{298}
}

func (x *ProduceSkill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceSkill) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProduceSkill) GetRarity() penum.SkillRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.SkillRarity(0)
}

func (x *ProduceSkill) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ProduceSkill) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *ProduceSkill) GetActivationCount() int32 {
	if x != nil {
		return x.ActivationCount
	}
	return 0
}

func (x *ProduceSkill) GetProduceEffectId1() string {
	if x != nil {
		return x.ProduceEffectId1
	}
	return ""
}

func (x *ProduceSkill) GetProduceTriggerId1() string {
	if x != nil {
		return x.ProduceTriggerId1
	}
	return ""
}

func (x *ProduceSkill) GetActivationRatePermil1() int32 {
	if x != nil {
		return x.ActivationRatePermil1
	}
	return 0
}

func (x *ProduceSkill) GetProduceEffectId2() string {
	if x != nil {
		return x.ProduceEffectId2
	}
	return ""
}

func (x *ProduceSkill) GetProduceTriggerId2() string {
	if x != nil {
		return x.ProduceTriggerId2
	}
	return ""
}

func (x *ProduceSkill) GetActivationRatePermil2() int32 {
	if x != nil {
		return x.ActivationRatePermil2
	}
	return 0
}

func (x *ProduceSkill) GetProduceEffectId3() string {
	if x != nil {
		return x.ProduceEffectId3
	}
	return ""
}

func (x *ProduceSkill) GetProduceTriggerId3() string {
	if x != nil {
		return x.ProduceTriggerId3
	}
	return ""
}

func (x *ProduceSkill) GetActivationRatePermil3() int32 {
	if x != nil {
		return x.ActivationRatePermil3
	}
	return 0
}

func (x *ProduceSkill) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

type ProduceSkillList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceSkill `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceSkillList) Reset() {
	*x = ProduceSkillList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSkillList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSkillList) ProtoMessage() {}

func (x *ProduceSkillList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSkillList.ProtoReflect.Descriptor instead.
func (*ProduceSkillList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{299}
}

func (x *ProduceSkillList) GetList() []*ProduceSkill {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStartMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   string                       `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	MotionType    penum.ProduceStartMotionType `protobuf:"varint,2,opt,name=motionType,proto3,enum=penum.ProduceStartMotionType" json:"motionType,omitempty"`
	Number        int32                        `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	MotionAssetId string                       `protobuf:"bytes,4,opt,name=motionAssetId,proto3" json:"motionAssetId,omitempty"`
	FacialAssetId string                       `protobuf:"bytes,5,opt,name=facialAssetId,proto3" json:"facialAssetId,omitempty"`
	VoiceAssetId  string                       `protobuf:"bytes,6,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *ProduceStartMotion) Reset() {
	*x = ProduceStartMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStartMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStartMotion) ProtoMessage() {}

func (x *ProduceStartMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStartMotion.ProtoReflect.Descriptor instead.
func (*ProduceStartMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{300}
}

func (x *ProduceStartMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceStartMotion) GetMotionType() penum.ProduceStartMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.ProduceStartMotionType(0)
}

func (x *ProduceStartMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceStartMotion) GetMotionAssetId() string {
	if x != nil {
		return x.MotionAssetId
	}
	return ""
}

func (x *ProduceStartMotion) GetFacialAssetId() string {
	if x != nil {
		return x.FacialAssetId
	}
	return ""
}

func (x *ProduceStartMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type ProduceStartMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStartMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStartMotionList) Reset() {
	*x = ProduceStartMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStartMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStartMotionList) ProtoMessage() {}

func (x *ProduceStartMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStartMotionList.ProtoReflect.Descriptor instead.
func (*ProduceStartMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{301}
}

func (x *ProduceStartMotionList) GetList() []*ProduceStartMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStepAuditionDifficulty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProduceId                       string                `protobuf:"bytes,2,opt,name=produceId,proto3" json:"produceId,omitempty"`
	StepType                        penum.ProduceStepType `protobuf:"varint,3,opt,name=stepType,proto3,enum=penum.ProduceStepType" json:"stepType,omitempty"`
	Number                          int32                 `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	RankThreshold                   int32                 `protobuf:"varint,5,opt,name=rankThreshold,proto3" json:"rankThreshold,omitempty"`
	ParameterBaseLine               int32                 `protobuf:"varint,6,opt,name=parameterBaseLine,proto3" json:"parameterBaseLine,omitempty"`
	BaseScore                       int32                 `protobuf:"varint,7,opt,name=baseScore,proto3" json:"baseScore,omitempty"`
	ForceEndScore                   int32                 `protobuf:"varint,8,opt,name=forceEndScore,proto3" json:"forceEndScore,omitempty"`
	ProduceExamBattleNpcGroupId     string                `protobuf:"bytes,9,opt,name=produceExamBattleNpcGroupId,proto3" json:"produceExamBattleNpcGroupId,omitempty"`
	ProduceExamBattleConfigId       string                `protobuf:"bytes,11,opt,name=produceExamBattleConfigId,proto3" json:"produceExamBattleConfigId,omitempty"`
	ProduceExamGimmickEffectGroupId string                `protobuf:"bytes,12,opt,name=produceExamGimmickEffectGroupId,proto3" json:"produceExamGimmickEffectGroupId,omitempty"`
}

func (x *ProduceStepAuditionDifficulty) Reset() {
	*x = ProduceStepAuditionDifficulty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepAuditionDifficulty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepAuditionDifficulty) ProtoMessage() {}

func (x *ProduceStepAuditionDifficulty) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepAuditionDifficulty.ProtoReflect.Descriptor instead.
func (*ProduceStepAuditionDifficulty) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{302}
}

func (x *ProduceStepAuditionDifficulty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceStepAuditionDifficulty) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *ProduceStepAuditionDifficulty) GetStepType() penum.ProduceStepType {
	if x != nil {
		return x.StepType
	}
	return penum.ProduceStepType(0)
}

func (x *ProduceStepAuditionDifficulty) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceStepAuditionDifficulty) GetRankThreshold() int32 {
	if x != nil {
		return x.RankThreshold
	}
	return 0
}

func (x *ProduceStepAuditionDifficulty) GetParameterBaseLine() int32 {
	if x != nil {
		return x.ParameterBaseLine
	}
	return 0
}

func (x *ProduceStepAuditionDifficulty) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *ProduceStepAuditionDifficulty) GetForceEndScore() int32 {
	if x != nil {
		return x.ForceEndScore
	}
	return 0
}

func (x *ProduceStepAuditionDifficulty) GetProduceExamBattleNpcGroupId() string {
	if x != nil {
		return x.ProduceExamBattleNpcGroupId
	}
	return ""
}

func (x *ProduceStepAuditionDifficulty) GetProduceExamBattleConfigId() string {
	if x != nil {
		return x.ProduceExamBattleConfigId
	}
	return ""
}

func (x *ProduceStepAuditionDifficulty) GetProduceExamGimmickEffectGroupId() string {
	if x != nil {
		return x.ProduceExamGimmickEffectGroupId
	}
	return ""
}

type ProduceStepAuditionDifficultyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStepAuditionDifficulty `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStepAuditionDifficultyList) Reset() {
	*x = ProduceStepAuditionDifficultyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepAuditionDifficultyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepAuditionDifficultyList) ProtoMessage() {}

func (x *ProduceStepAuditionDifficultyList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepAuditionDifficultyList.ProtoReflect.Descriptor instead.
func (*ProduceStepAuditionDifficultyList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{303}
}

func (x *ProduceStepAuditionDifficultyList) GetList() []*ProduceStepAuditionDifficulty {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStepAuditionMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   string                              `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	StepType      penum.ProduceStepType               `protobuf:"varint,2,opt,name=stepType,proto3,enum=penum.ProduceStepType" json:"stepType,omitempty"`
	MotionType    penum.ProduceStepAuditionMotionType `protobuf:"varint,3,opt,name=motionType,proto3,enum=penum.ProduceStepAuditionMotionType" json:"motionType,omitempty"`
	Number        int32                               `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	FacialAssetId string                              `protobuf:"bytes,5,opt,name=facialAssetId,proto3" json:"facialAssetId,omitempty"`
	BodyAssetId   string                              `protobuf:"bytes,6,opt,name=bodyAssetId,proto3" json:"bodyAssetId,omitempty"`
	VoiceAssetId  string                              `protobuf:"bytes,7,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
	SceneLayoutId string                              `protobuf:"bytes,8,opt,name=sceneLayoutId,proto3" json:"sceneLayoutId,omitempty"`
	CameraId      string                              `protobuf:"bytes,9,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
}

func (x *ProduceStepAuditionMotion) Reset() {
	*x = ProduceStepAuditionMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepAuditionMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepAuditionMotion) ProtoMessage() {}

func (x *ProduceStepAuditionMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepAuditionMotion.ProtoReflect.Descriptor instead.
func (*ProduceStepAuditionMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{304}
}

func (x *ProduceStepAuditionMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceStepAuditionMotion) GetStepType() penum.ProduceStepType {
	if x != nil {
		return x.StepType
	}
	return penum.ProduceStepType(0)
}

func (x *ProduceStepAuditionMotion) GetMotionType() penum.ProduceStepAuditionMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.ProduceStepAuditionMotionType(0)
}

func (x *ProduceStepAuditionMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceStepAuditionMotion) GetFacialAssetId() string {
	if x != nil {
		return x.FacialAssetId
	}
	return ""
}

func (x *ProduceStepAuditionMotion) GetBodyAssetId() string {
	if x != nil {
		return x.BodyAssetId
	}
	return ""
}

func (x *ProduceStepAuditionMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

func (x *ProduceStepAuditionMotion) GetSceneLayoutId() string {
	if x != nil {
		return x.SceneLayoutId
	}
	return ""
}

func (x *ProduceStepAuditionMotion) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type ProduceStepAuditionMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStepAuditionMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStepAuditionMotionList) Reset() {
	*x = ProduceStepAuditionMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepAuditionMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepAuditionMotionList) ProtoMessage() {}

func (x *ProduceStepAuditionMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepAuditionMotionList.ProtoReflect.Descriptor instead.
func (*ProduceStepAuditionMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{305}
}

func (x *ProduceStepAuditionMotionList) GetList() []*ProduceStepAuditionMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStepEventDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SuggestionType                penum.ProduceEventSuggestionType     `protobuf:"varint,2,opt,name=suggestionType,proto3,enum=penum.ProduceEventSuggestionType" json:"suggestionType,omitempty"`
	ProduceStoryId                string                               `protobuf:"bytes,3,opt,name=produceStoryId,proto3" json:"produceStoryId,omitempty"`
	ProduceEffectIds              []string                             `protobuf:"bytes,4,rep,name=produceEffectIds,proto3" json:"produceEffectIds,omitempty"`
	ProduceStepEventSuggestionIds []string                             `protobuf:"bytes,5,rep,name=produceStepEventSuggestionIds,proto3" json:"produceStepEventSuggestionIds,omitempty"`
	SupportCardId                 string                               `protobuf:"bytes,9,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	Descriptions                  []*pcommon.ProduceDescriptionElement `protobuf:"bytes,11,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	EventType                     penum.ProduceEventType               `protobuf:"varint,12,opt,name=eventType,proto3,enum=penum.ProduceEventType" json:"eventType,omitempty"`
}

func (x *ProduceStepEventDetail) Reset() {
	*x = ProduceStepEventDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepEventDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepEventDetail) ProtoMessage() {}

func (x *ProduceStepEventDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepEventDetail.ProtoReflect.Descriptor instead.
func (*ProduceStepEventDetail) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{306}
}

func (x *ProduceStepEventDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceStepEventDetail) GetSuggestionType() penum.ProduceEventSuggestionType {
	if x != nil {
		return x.SuggestionType
	}
	return penum.ProduceEventSuggestionType(0)
}

func (x *ProduceStepEventDetail) GetProduceStoryId() string {
	if x != nil {
		return x.ProduceStoryId
	}
	return ""
}

func (x *ProduceStepEventDetail) GetProduceEffectIds() []string {
	if x != nil {
		return x.ProduceEffectIds
	}
	return nil
}

func (x *ProduceStepEventDetail) GetProduceStepEventSuggestionIds() []string {
	if x != nil {
		return x.ProduceStepEventSuggestionIds
	}
	return nil
}

func (x *ProduceStepEventDetail) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *ProduceStepEventDetail) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *ProduceStepEventDetail) GetEventType() penum.ProduceEventType {
	if x != nil {
		return x.EventType
	}
	return penum.ProduceEventType(0)
}

type ProduceStepEventDetailList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStepEventDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStepEventDetailList) Reset() {
	*x = ProduceStepEventDetailList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepEventDetailList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepEventDetailList) ProtoMessage() {}

func (x *ProduceStepEventDetailList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepEventDetailList.ProtoReflect.Descriptor instead.
func (*ProduceStepEventDetailList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{307}
}

func (x *ProduceStepEventDetailList) GetList() []*ProduceStepEventDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStepEventSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProducePoint                int32                                `protobuf:"varint,2,opt,name=producePoint,proto3" json:"producePoint,omitempty"`
	Stamina                     int32                                `protobuf:"varint,3,opt,name=stamina,proto3" json:"stamina,omitempty"`
	ProduceCardId               string                               `protobuf:"bytes,4,opt,name=produceCardId,proto3" json:"produceCardId,omitempty"`
	ProduceCardUpgradeCount     int32                                `protobuf:"varint,5,opt,name=produceCardUpgradeCount,proto3" json:"produceCardUpgradeCount,omitempty"`
	ProduceEffectIds            []string                             `protobuf:"bytes,6,rep,name=produceEffectIds,proto3" json:"produceEffectIds,omitempty"`
	StepType                    penum.ProduceStepType                `protobuf:"varint,7,opt,name=stepType,proto3,enum=penum.ProduceStepType" json:"stepType,omitempty"`
	StepId                      string                               `protobuf:"bytes,8,opt,name=stepId,proto3" json:"stepId,omitempty"`
	SuccessProbabilityPermyriad int32                                `protobuf:"varint,9,opt,name=successProbabilityPermyriad,proto3" json:"successProbabilityPermyriad,omitempty"`
	SuccessProduceEffectIds     []string                             `protobuf:"bytes,10,rep,name=successProduceEffectIds,proto3" json:"successProduceEffectIds,omitempty"`
	SuccessStepType             penum.ProduceStepType                `protobuf:"varint,11,opt,name=successStepType,proto3,enum=penum.ProduceStepType" json:"successStepType,omitempty"`
	SuccessStepId               string                               `protobuf:"bytes,12,opt,name=successStepId,proto3" json:"successStepId,omitempty"`
	FailProduceEffectIds        []string                             `protobuf:"bytes,13,rep,name=failProduceEffectIds,proto3" json:"failProduceEffectIds,omitempty"`
	FailStepType                penum.ProduceStepType                `protobuf:"varint,14,opt,name=failStepType,proto3,enum=penum.ProduceStepType" json:"failStepType,omitempty"`
	FailStepId                  string                               `protobuf:"bytes,15,opt,name=failStepId,proto3" json:"failStepId,omitempty"`
	AlwaysSuccessful            bool                                 `protobuf:"varint,17,opt,name=alwaysSuccessful,proto3" json:"alwaysSuccessful,omitempty"`
	ProduceEffectFireStep       int32                                `protobuf:"varint,18,opt,name=produceEffectFireStep,proto3" json:"produceEffectFireStep,omitempty"`
	IsCampaign                  bool                                 `protobuf:"varint,19,opt,name=isCampaign,proto3" json:"isCampaign,omitempty"`
	Descriptions                []*pcommon.ProduceDescriptionElement `protobuf:"bytes,20,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
}

func (x *ProduceStepEventSuggestion) Reset() {
	*x = ProduceStepEventSuggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepEventSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepEventSuggestion) ProtoMessage() {}

func (x *ProduceStepEventSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepEventSuggestion.ProtoReflect.Descriptor instead.
func (*ProduceStepEventSuggestion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{308}
}

func (x *ProduceStepEventSuggestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceStepEventSuggestion) GetProducePoint() int32 {
	if x != nil {
		return x.ProducePoint
	}
	return 0
}

func (x *ProduceStepEventSuggestion) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *ProduceStepEventSuggestion) GetProduceCardId() string {
	if x != nil {
		return x.ProduceCardId
	}
	return ""
}

func (x *ProduceStepEventSuggestion) GetProduceCardUpgradeCount() int32 {
	if x != nil {
		return x.ProduceCardUpgradeCount
	}
	return 0
}

func (x *ProduceStepEventSuggestion) GetProduceEffectIds() []string {
	if x != nil {
		return x.ProduceEffectIds
	}
	return nil
}

func (x *ProduceStepEventSuggestion) GetStepType() penum.ProduceStepType {
	if x != nil {
		return x.StepType
	}
	return penum.ProduceStepType(0)
}

func (x *ProduceStepEventSuggestion) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

func (x *ProduceStepEventSuggestion) GetSuccessProbabilityPermyriad() int32 {
	if x != nil {
		return x.SuccessProbabilityPermyriad
	}
	return 0
}

func (x *ProduceStepEventSuggestion) GetSuccessProduceEffectIds() []string {
	if x != nil {
		return x.SuccessProduceEffectIds
	}
	return nil
}

func (x *ProduceStepEventSuggestion) GetSuccessStepType() penum.ProduceStepType {
	if x != nil {
		return x.SuccessStepType
	}
	return penum.ProduceStepType(0)
}

func (x *ProduceStepEventSuggestion) GetSuccessStepId() string {
	if x != nil {
		return x.SuccessStepId
	}
	return ""
}

func (x *ProduceStepEventSuggestion) GetFailProduceEffectIds() []string {
	if x != nil {
		return x.FailProduceEffectIds
	}
	return nil
}

func (x *ProduceStepEventSuggestion) GetFailStepType() penum.ProduceStepType {
	if x != nil {
		return x.FailStepType
	}
	return penum.ProduceStepType(0)
}

func (x *ProduceStepEventSuggestion) GetFailStepId() string {
	if x != nil {
		return x.FailStepId
	}
	return ""
}

func (x *ProduceStepEventSuggestion) GetAlwaysSuccessful() bool {
	if x != nil {
		return x.AlwaysSuccessful
	}
	return false
}

func (x *ProduceStepEventSuggestion) GetProduceEffectFireStep() int32 {
	if x != nil {
		return x.ProduceEffectFireStep
	}
	return 0
}

func (x *ProduceStepEventSuggestion) GetIsCampaign() bool {
	if x != nil {
		return x.IsCampaign
	}
	return false
}

func (x *ProduceStepEventSuggestion) GetDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

type ProduceStepEventSuggestionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStepEventSuggestion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStepEventSuggestionList) Reset() {
	*x = ProduceStepEventSuggestionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepEventSuggestionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepEventSuggestionList) ProtoMessage() {}

func (x *ProduceStepEventSuggestionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepEventSuggestionList.ProtoReflect.Descriptor instead.
func (*ProduceStepEventSuggestionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{309}
}

func (x *ProduceStepEventSuggestionList) GetList() []*ProduceStepEventSuggestion {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStepLesson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProduceStepLessonLevelId string `protobuf:"bytes,4,opt,name=produceStepLessonLevelId,proto3" json:"produceStepLessonLevelId,omitempty"`
}

func (x *ProduceStepLesson) Reset() {
	*x = ProduceStepLesson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepLesson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepLesson) ProtoMessage() {}

func (x *ProduceStepLesson) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepLesson.ProtoReflect.Descriptor instead.
func (*ProduceStepLesson) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{310}
}

func (x *ProduceStepLesson) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceStepLesson) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProduceStepLesson) GetProduceStepLessonLevelId() string {
	if x != nil {
		return x.ProduceStepLessonLevelId
	}
	return ""
}

type ProduceStepLessonLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProgressLevel          int32  `protobuf:"varint,2,opt,name=progressLevel,proto3" json:"progressLevel,omitempty"`
	LimitTurn              int32  `protobuf:"varint,4,opt,name=limitTurn,proto3" json:"limitTurn,omitempty"`
	SuccessThreshold       int32  `protobuf:"varint,5,opt,name=successThreshold,proto3" json:"successThreshold,omitempty"`
	ResultTargetValueLimit int32  `protobuf:"varint,6,opt,name=resultTargetValueLimit,proto3" json:"resultTargetValueLimit,omitempty"`
}

func (x *ProduceStepLessonLevel) Reset() {
	*x = ProduceStepLessonLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepLessonLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepLessonLevel) ProtoMessage() {}

func (x *ProduceStepLessonLevel) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepLessonLevel.ProtoReflect.Descriptor instead.
func (*ProduceStepLessonLevel) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{311}
}

func (x *ProduceStepLessonLevel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceStepLessonLevel) GetProgressLevel() int32 {
	if x != nil {
		return x.ProgressLevel
	}
	return 0
}

func (x *ProduceStepLessonLevel) GetLimitTurn() int32 {
	if x != nil {
		return x.LimitTurn
	}
	return 0
}

func (x *ProduceStepLessonLevel) GetSuccessThreshold() int32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *ProduceStepLessonLevel) GetResultTargetValueLimit() int32 {
	if x != nil {
		return x.ResultTargetValueLimit
	}
	return 0
}

type ProduceStepLessonLevelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStepLessonLevel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStepLessonLevelList) Reset() {
	*x = ProduceStepLessonLevelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepLessonLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepLessonLevelList) ProtoMessage() {}

func (x *ProduceStepLessonLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepLessonLevelList.ProtoReflect.Descriptor instead.
func (*ProduceStepLessonLevelList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{312}
}

func (x *ProduceStepLessonLevelList) GetList() []*ProduceStepLessonLevel {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStepLessonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStepLesson `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStepLessonList) Reset() {
	*x = ProduceStepLessonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepLessonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepLessonList) ProtoMessage() {}

func (x *ProduceStepLessonList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepLessonList.ProtoReflect.Descriptor instead.
func (*ProduceStepLessonList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{313}
}

func (x *ProduceStepLessonList) GetList() []*ProduceStepLesson {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStepTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   string                     `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	StepType      penum.ProduceStepType      `protobuf:"varint,2,opt,name=stepType,proto3,enum=penum.ProduceStepType" json:"stepType,omitempty"`
	StepPhaseType penum.ProduceStepPhaseType `protobuf:"varint,3,opt,name=stepPhaseType,proto3,enum=penum.ProduceStepPhaseType" json:"stepPhaseType,omitempty"`
	Number        int32                      `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	CostumeHeadId string                     `protobuf:"bytes,5,opt,name=costumeHeadId,proto3" json:"costumeHeadId,omitempty"`
	CostumeId     string                     `protobuf:"bytes,6,opt,name=costumeId,proto3" json:"costumeId,omitempty"`
	AdvAssetId    string                     `protobuf:"bytes,7,opt,name=advAssetId,proto3" json:"advAssetId,omitempty"`
	VoiceAssetId  string                     `protobuf:"bytes,8,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *ProduceStepTransition) Reset() {
	*x = ProduceStepTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepTransition) ProtoMessage() {}

func (x *ProduceStepTransition) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepTransition.ProtoReflect.Descriptor instead.
func (*ProduceStepTransition) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{314}
}

func (x *ProduceStepTransition) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceStepTransition) GetStepType() penum.ProduceStepType {
	if x != nil {
		return x.StepType
	}
	return penum.ProduceStepType(0)
}

func (x *ProduceStepTransition) GetStepPhaseType() penum.ProduceStepPhaseType {
	if x != nil {
		return x.StepPhaseType
	}
	return penum.ProduceStepPhaseType(0)
}

func (x *ProduceStepTransition) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceStepTransition) GetCostumeHeadId() string {
	if x != nil {
		return x.CostumeHeadId
	}
	return ""
}

func (x *ProduceStepTransition) GetCostumeId() string {
	if x != nil {
		return x.CostumeId
	}
	return ""
}

func (x *ProduceStepTransition) GetAdvAssetId() string {
	if x != nil {
		return x.AdvAssetId
	}
	return ""
}

func (x *ProduceStepTransition) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type ProduceStepTransitionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStepTransition `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStepTransitionList) Reset() {
	*x = ProduceStepTransitionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStepTransitionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStepTransitionList) ProtoMessage() {}

func (x *ProduceStepTransitionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStepTransitionList.ProtoReflect.Descriptor instead.
func (*ProduceStepTransitionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{315}
}

func (x *ProduceStepTransitionList) GetList() []*ProduceStepTransition {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceStory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                                         penum.ProduceStoryType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.ProduceStoryType" json:"type,omitempty"`
	Title                                        string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	AdvAssetId                                   string                 `protobuf:"bytes,4,opt,name=advAssetId,proto3" json:"advAssetId,omitempty"`
	ProduceEventHintProduceConditionDescriptions []string               `protobuf:"bytes,5,rep,name=produceEventHintProduceConditionDescriptions,proto3" json:"produceEventHintProduceConditionDescriptions,omitempty"`
	ViewConditionSetId                           string                 `protobuf:"bytes,6,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId                         string                 `protobuf:"bytes,7,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	Order                                        int32                  `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ProduceStory) Reset() {
	*x = ProduceStory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStory) ProtoMessage() {}

func (x *ProduceStory) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStory.ProtoReflect.Descriptor instead.
func (*ProduceStory) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{316}
}

func (x *ProduceStory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceStory) GetType() penum.ProduceStoryType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceStoryType(0)
}

func (x *ProduceStory) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProduceStory) GetAdvAssetId() string {
	if x != nil {
		return x.AdvAssetId
	}
	return ""
}

func (x *ProduceStory) GetProduceEventHintProduceConditionDescriptions() []string {
	if x != nil {
		return x.ProduceEventHintProduceConditionDescriptions
	}
	return nil
}

func (x *ProduceStory) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *ProduceStory) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *ProduceStory) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProduceStoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceStory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceStoryList) Reset() {
	*x = ProduceStoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStoryList) ProtoMessage() {}

func (x *ProduceStoryList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStoryList.ProtoReflect.Descriptor instead.
func (*ProduceStoryList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{317}
}

func (x *ProduceStoryList) GetList() []*ProduceStory {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhaseType penum.ProducePhaseType `protobuf:"varint,2,opt,name=phaseType,proto3,enum=penum.ProducePhaseType" json:"phaseType,omitempty"`
}

func (x *ProduceTrigger) Reset() {
	*x = ProduceTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceTrigger) ProtoMessage() {}

func (x *ProduceTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceTrigger.ProtoReflect.Descriptor instead.
func (*ProduceTrigger) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{318}
}

func (x *ProduceTrigger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProduceTrigger) GetPhaseType() penum.ProducePhaseType {
	if x != nil {
		return x.PhaseType
	}
	return penum.ProducePhaseType(0)
}

type ProduceTriggerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceTrigger `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceTriggerList) Reset() {
	*x = ProduceTriggerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceTriggerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceTriggerList) ProtoMessage() {}

func (x *ProduceTriggerList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceTriggerList.ProtoReflect.Descriptor instead.
func (*ProduceTriggerList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{319}
}

func (x *ProduceTriggerList) GetList() []*ProduceTrigger {
	if x != nil {
		return x.List
	}
	return nil
}

type ProduceWeekMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   string `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Number        int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	CostumeHeadId string `protobuf:"bytes,3,opt,name=costumeHeadId,proto3" json:"costumeHeadId,omitempty"`
	CostumeId     string `protobuf:"bytes,4,opt,name=costumeId,proto3" json:"costumeId,omitempty"`
	AdvAssetId    string `protobuf:"bytes,5,opt,name=advAssetId,proto3" json:"advAssetId,omitempty"`
	VoiceAssetId  string `protobuf:"bytes,6,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *ProduceWeekMotion) Reset() {
	*x = ProduceWeekMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceWeekMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceWeekMotion) ProtoMessage() {}

func (x *ProduceWeekMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceWeekMotion.ProtoReflect.Descriptor instead.
func (*ProduceWeekMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{320}
}

func (x *ProduceWeekMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *ProduceWeekMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProduceWeekMotion) GetCostumeHeadId() string {
	if x != nil {
		return x.CostumeHeadId
	}
	return ""
}

func (x *ProduceWeekMotion) GetCostumeId() string {
	if x != nil {
		return x.CostumeId
	}
	return ""
}

func (x *ProduceWeekMotion) GetAdvAssetId() string {
	if x != nil {
		return x.AdvAssetId
	}
	return ""
}

func (x *ProduceWeekMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type ProduceWeekMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProduceWeekMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProduceWeekMotionList) Reset() {
	*x = ProduceWeekMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceWeekMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceWeekMotionList) ProtoMessage() {}

func (x *ProduceWeekMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceWeekMotionList.ProtoReflect.Descriptor instead.
func (*ProduceWeekMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{321}
}

func (x *ProduceWeekMotionList) GetList() []*ProduceWeekMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type ProducerLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level         int32                         `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	TotalExp      int32                         `protobuf:"varint,2,opt,name=totalExp,proto3" json:"totalExp,omitempty"`
	UnlockTargets []*ProducerLevel_UnlockTarget `protobuf:"bytes,9,rep,name=unlockTargets,proto3" json:"unlockTargets,omitempty"`
	Reward        *pcommon.Reward               `protobuf:"bytes,13,opt,name=reward,proto3" json:"reward,omitempty"`
	BonusRewards  []*pcommon.Reward             `protobuf:"bytes,17,rep,name=bonusRewards,proto3" json:"bonusRewards,omitempty"`
}

func (x *ProducerLevel) Reset() {
	*x = ProducerLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerLevel) ProtoMessage() {}

func (x *ProducerLevel) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerLevel.ProtoReflect.Descriptor instead.
func (*ProducerLevel) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{322}
}

func (x *ProducerLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProducerLevel) GetTotalExp() int32 {
	if x != nil {
		return x.TotalExp
	}
	return 0
}

func (x *ProducerLevel) GetUnlockTargets() []*ProducerLevel_UnlockTarget {
	if x != nil {
		return x.UnlockTargets
	}
	return nil
}

func (x *ProducerLevel) GetReward() *pcommon.Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ProducerLevel) GetBonusRewards() []*pcommon.Reward {
	if x != nil {
		return x.BonusRewards
	}
	return nil
}

type ProducerLevelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ProducerLevel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ProducerLevelList) Reset() {
	*x = ProducerLevelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerLevelList) ProtoMessage() {}

func (x *ProducerLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerLevelList.ProtoReflect.Descriptor instead.
func (*ProducerLevelList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{323}
}

func (x *ProducerLevelList) GetList() []*ProducerLevel {
	if x != nil {
		return x.List
	}
	return nil
}

type PvpRateCommonProduceCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanType     penum.ProducePlanType  `protobuf:"varint,2,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	ProduceCards []*pcommon.ProduceCard `protobuf:"bytes,6,rep,name=produceCards,proto3" json:"produceCards,omitempty"`
}

func (x *PvpRateCommonProduceCard) Reset() {
	*x = PvpRateCommonProduceCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateCommonProduceCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateCommonProduceCard) ProtoMessage() {}

func (x *PvpRateCommonProduceCard) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateCommonProduceCard.ProtoReflect.Descriptor instead.
func (*PvpRateCommonProduceCard) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{324}
}

func (x *PvpRateCommonProduceCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PvpRateCommonProduceCard) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *PvpRateCommonProduceCard) GetProduceCards() []*pcommon.ProduceCard {
	if x != nil {
		return x.ProduceCards
	}
	return nil
}

type PvpRateCommonProduceCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PvpRateCommonProduceCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PvpRateCommonProduceCardList) Reset() {
	*x = PvpRateCommonProduceCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateCommonProduceCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateCommonProduceCardList) ProtoMessage() {}

func (x *PvpRateCommonProduceCardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateCommonProduceCardList.ProtoReflect.Descriptor instead.
func (*PvpRateCommonProduceCardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{325}
}

func (x *PvpRateCommonProduceCardList) GetList() []*PvpRateCommonProduceCard {
	if x != nil {
		return x.List
	}
	return nil
}

type PvpRateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description                    string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Vocal                          int32                  `protobuf:"varint,3,opt,name=vocal,proto3" json:"vocal,omitempty"`
	Dance                          int32                  `protobuf:"varint,4,opt,name=dance,proto3" json:"dance,omitempty"`
	Visual                         int32                  `protobuf:"varint,5,opt,name=visual,proto3" json:"visual,omitempty"`
	ExamSettingId                  string                 `protobuf:"bytes,6,opt,name=examSettingId,proto3" json:"examSettingId,omitempty"`
	ProduceExamBattleScoreConfigId string                 `protobuf:"bytes,7,opt,name=produceExamBattleScoreConfigId,proto3" json:"produceExamBattleScoreConfigId,omitempty"`
	ExamBattleFirstRankBonusPermil int32                  `protobuf:"varint,8,opt,name=examBattleFirstRankBonusPermil,proto3" json:"examBattleFirstRankBonusPermil,omitempty"`
	PvpRateCommonProduceCardId     string                 `protobuf:"bytes,9,opt,name=pvpRateCommonProduceCardId,proto3" json:"pvpRateCommonProduceCardId,omitempty"`
	WinTimelineAssetId             string                 `protobuf:"bytes,10,opt,name=winTimelineAssetId,proto3" json:"winTimelineAssetId,omitempty"`
	LoseTimelineAssetId            string                 `protobuf:"bytes,11,opt,name=loseTimelineAssetId,proto3" json:"loseTimelineAssetId,omitempty"`
	StartTimelineInitialTimePermil int32                  `protobuf:"varint,12,opt,name=startTimelineInitialTimePermil,proto3" json:"startTimelineInitialTimePermil,omitempty"`
	TopAssetId                     string                 `protobuf:"bytes,13,opt,name=topAssetId,proto3" json:"topAssetId,omitempty"`
	Stages                         []*PvpRateConfig_Stage `protobuf:"bytes,199,rep,name=stages,proto3" json:"stages,omitempty"`
}

func (x *PvpRateConfig) Reset() {
	*x = PvpRateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateConfig) ProtoMessage() {}

func (x *PvpRateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateConfig.ProtoReflect.Descriptor instead.
func (*PvpRateConfig) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{326}
}

func (x *PvpRateConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PvpRateConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PvpRateConfig) GetVocal() int32 {
	if x != nil {
		return x.Vocal
	}
	return 0
}

func (x *PvpRateConfig) GetDance() int32 {
	if x != nil {
		return x.Dance
	}
	return 0
}

func (x *PvpRateConfig) GetVisual() int32 {
	if x != nil {
		return x.Visual
	}
	return 0
}

func (x *PvpRateConfig) GetExamSettingId() string {
	if x != nil {
		return x.ExamSettingId
	}
	return ""
}

func (x *PvpRateConfig) GetProduceExamBattleScoreConfigId() string {
	if x != nil {
		return x.ProduceExamBattleScoreConfigId
	}
	return ""
}

func (x *PvpRateConfig) GetExamBattleFirstRankBonusPermil() int32 {
	if x != nil {
		return x.ExamBattleFirstRankBonusPermil
	}
	return 0
}

func (x *PvpRateConfig) GetPvpRateCommonProduceCardId() string {
	if x != nil {
		return x.PvpRateCommonProduceCardId
	}
	return ""
}

func (x *PvpRateConfig) GetWinTimelineAssetId() string {
	if x != nil {
		return x.WinTimelineAssetId
	}
	return ""
}

func (x *PvpRateConfig) GetLoseTimelineAssetId() string {
	if x != nil {
		return x.LoseTimelineAssetId
	}
	return ""
}

func (x *PvpRateConfig) GetStartTimelineInitialTimePermil() int32 {
	if x != nil {
		return x.StartTimelineInitialTimePermil
	}
	return 0
}

func (x *PvpRateConfig) GetTopAssetId() string {
	if x != nil {
		return x.TopAssetId
	}
	return ""
}

func (x *PvpRateConfig) GetStages() []*PvpRateConfig_Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

type PvpRateConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PvpRateConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PvpRateConfigList) Reset() {
	*x = PvpRateConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateConfigList) ProtoMessage() {}

func (x *PvpRateConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateConfigList.ProtoReflect.Descriptor instead.
func (*PvpRateConfigList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{327}
}

func (x *PvpRateConfigList) GetList() []*PvpRateConfig {
	if x != nil {
		return x.List
	}
	return nil
}

type PvpRateMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   string                  `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	MotionType    penum.PvpRateMotionType `protobuf:"varint,2,opt,name=motionType,proto3,enum=penum.PvpRateMotionType" json:"motionType,omitempty"`
	Number        int32                   `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	FacialAssetId string                  `protobuf:"bytes,5,opt,name=facialAssetId,proto3" json:"facialAssetId,omitempty"`
	BodyAssetId   string                  `protobuf:"bytes,6,opt,name=bodyAssetId,proto3" json:"bodyAssetId,omitempty"`
	VoiceAssetId  string                  `protobuf:"bytes,7,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
	SceneLayoutId string                  `protobuf:"bytes,8,opt,name=sceneLayoutId,proto3" json:"sceneLayoutId,omitempty"`
	CameraId      string                  `protobuf:"bytes,9,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
}

func (x *PvpRateMotion) Reset() {
	*x = PvpRateMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateMotion) ProtoMessage() {}

func (x *PvpRateMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateMotion.ProtoReflect.Descriptor instead.
func (*PvpRateMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{328}
}

func (x *PvpRateMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *PvpRateMotion) GetMotionType() penum.PvpRateMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.PvpRateMotionType(0)
}

func (x *PvpRateMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PvpRateMotion) GetFacialAssetId() string {
	if x != nil {
		return x.FacialAssetId
	}
	return ""
}

func (x *PvpRateMotion) GetBodyAssetId() string {
	if x != nil {
		return x.BodyAssetId
	}
	return ""
}

func (x *PvpRateMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

func (x *PvpRateMotion) GetSceneLayoutId() string {
	if x != nil {
		return x.SceneLayoutId
	}
	return ""
}

func (x *PvpRateMotion) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type PvpRateMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PvpRateMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PvpRateMotionList) Reset() {
	*x = PvpRateMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateMotionList) ProtoMessage() {}

func (x *PvpRateMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateMotionList.ProtoReflect.Descriptor instead.
func (*PvpRateMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{329}
}

func (x *PvpRateMotionList) GetList() []*PvpRateMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type PvpRateUnitSlotUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade             penum.PvpRateGrade `protobuf:"varint,1,opt,name=grade,proto3,enum=penum.PvpRateGrade" json:"grade,omitempty"`
	SlotCountPerStage []int32            `protobuf:"varint,2,rep,packed,name=slotCountPerStage,proto3" json:"slotCountPerStage,omitempty"`
}

func (x *PvpRateUnitSlotUnlock) Reset() {
	*x = PvpRateUnitSlotUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateUnitSlotUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateUnitSlotUnlock) ProtoMessage() {}

func (x *PvpRateUnitSlotUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateUnitSlotUnlock.ProtoReflect.Descriptor instead.
func (*PvpRateUnitSlotUnlock) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{330}
}

func (x *PvpRateUnitSlotUnlock) GetGrade() penum.PvpRateGrade {
	if x != nil {
		return x.Grade
	}
	return penum.PvpRateGrade(0)
}

func (x *PvpRateUnitSlotUnlock) GetSlotCountPerStage() []int32 {
	if x != nil {
		return x.SlotCountPerStage
	}
	return nil
}

type PvpRateUnitSlotUnlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PvpRateUnitSlotUnlock `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PvpRateUnitSlotUnlockList) Reset() {
	*x = PvpRateUnitSlotUnlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateUnitSlotUnlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateUnitSlotUnlockList) ProtoMessage() {}

func (x *PvpRateUnitSlotUnlockList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateUnitSlotUnlockList.ProtoReflect.Descriptor instead.
func (*PvpRateUnitSlotUnlockList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{331}
}

func (x *PvpRateUnitSlotUnlockList) GetList() []*PvpRateUnitSlotUnlock {
	if x != nil {
		return x.List
	}
	return nil
}

type ResultGradePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      penum.ResultGradeType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ResultGradeType" json:"type,omitempty"`
	Grade     penum.ResultGrade     `protobuf:"varint,2,opt,name=grade,proto3,enum=penum.ResultGrade" json:"grade,omitempty"`
	Threshold int32                 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *ResultGradePattern) Reset() {
	*x = ResultGradePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultGradePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultGradePattern) ProtoMessage() {}

func (x *ResultGradePattern) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultGradePattern.ProtoReflect.Descriptor instead.
func (*ResultGradePattern) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{332}
}

func (x *ResultGradePattern) GetType() penum.ResultGradeType {
	if x != nil {
		return x.Type
	}
	return penum.ResultGradeType(0)
}

func (x *ResultGradePattern) GetGrade() penum.ResultGrade {
	if x != nil {
		return x.Grade
	}
	return penum.ResultGrade(0)
}

func (x *ResultGradePattern) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type ResultGradePatternList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ResultGradePattern `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ResultGradePatternList) Reset() {
	*x = ResultGradePatternList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultGradePatternList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultGradePatternList) ProtoMessage() {}

func (x *ResultGradePatternList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultGradePatternList.ProtoReflect.Descriptor instead.
func (*ResultGradePatternList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{333}
}

func (x *ResultGradePatternList) GetList() []*ResultGradePattern {
	if x != nil {
		return x.List
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         penum.RuleType     `protobuf:"varint,1,opt,name=type,proto3,enum=penum.RuleType" json:"type,omitempty"`
	PlatformType penum.PlatformType `protobuf:"varint,2,opt,name=platformType,proto3,enum=penum.PlatformType" json:"platformType,omitempty"`
	Number       int32              `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Html         string             `protobuf:"bytes,4,opt,name=html,proto3" json:"html,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{334}
}

func (x *Rule) GetType() penum.RuleType {
	if x != nil {
		return x.Type
	}
	return penum.RuleType(0)
}

func (x *Rule) GetPlatformType() penum.PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return penum.PlatformType(0)
}

func (x *Rule) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Rule) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type RuleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Rule `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RuleList) Reset() {
	*x = RuleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleList) ProtoMessage() {}

func (x *RuleList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleList.ProtoReflect.Descriptor instead.
func (*RuleList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{335}
}

func (x *RuleList) GetList() []*Rule {
	if x != nil {
		return x.List
	}
	return nil
}

type SeminarExamTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamEffectType       penum.ProduceExamEffectType `protobuf:"varint,1,opt,name=examEffectType,proto3,enum=penum.ProduceExamEffectType" json:"examEffectType,omitempty"`
	IsLessonInt          int32                       `protobuf:"varint,3,opt,name=isLessonInt,proto3" json:"isLessonInt,omitempty"`
	Description          string                      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	SeminarExamGroupId   string                      `protobuf:"bytes,5,opt,name=seminarExamGroupId,proto3" json:"seminarExamGroupId,omitempty"`
	SeminarExamId        string                      `protobuf:"bytes,6,opt,name=seminarExamId,proto3" json:"seminarExamId,omitempty"`
	SeminarExamGroupName string                      `protobuf:"bytes,7,opt,name=seminarExamGroupName,proto3" json:"seminarExamGroupName,omitempty"`
	SeminarExamName      string                      `protobuf:"bytes,8,opt,name=seminarExamName,proto3" json:"seminarExamName,omitempty"`
	ProduceIds           []string                    `protobuf:"bytes,9,rep,name=produceIds,proto3" json:"produceIds,omitempty"`
	Rewards              []*pcommon.Reward           `protobuf:"bytes,10,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *SeminarExamTransition) Reset() {
	*x = SeminarExamTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeminarExamTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeminarExamTransition) ProtoMessage() {}

func (x *SeminarExamTransition) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeminarExamTransition.ProtoReflect.Descriptor instead.
func (*SeminarExamTransition) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{336}
}

func (x *SeminarExamTransition) GetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.ExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *SeminarExamTransition) GetIsLessonInt() int32 {
	if x != nil {
		return x.IsLessonInt
	}
	return 0
}

func (x *SeminarExamTransition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeminarExamTransition) GetSeminarExamGroupId() string {
	if x != nil {
		return x.SeminarExamGroupId
	}
	return ""
}

func (x *SeminarExamTransition) GetSeminarExamId() string {
	if x != nil {
		return x.SeminarExamId
	}
	return ""
}

func (x *SeminarExamTransition) GetSeminarExamGroupName() string {
	if x != nil {
		return x.SeminarExamGroupName
	}
	return ""
}

func (x *SeminarExamTransition) GetSeminarExamName() string {
	if x != nil {
		return x.SeminarExamName
	}
	return ""
}

func (x *SeminarExamTransition) GetProduceIds() []string {
	if x != nil {
		return x.ProduceIds
	}
	return nil
}

func (x *SeminarExamTransition) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SeminarExamTransitionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SeminarExamTransition `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SeminarExamTransitionList) Reset() {
	*x = SeminarExamTransitionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeminarExamTransitionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeminarExamTransitionList) ProtoMessage() {}

func (x *SeminarExamTransitionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeminarExamTransitionList.ProtoReflect.Descriptor instead.
func (*SeminarExamTransitionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{337}
}

func (x *SeminarExamTransitionList) GetList() []*SeminarExamTransition {
	if x != nil {
		return x.List
	}
	return nil
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                                       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GiftDefaultLimitCount                                    int32    `protobuf:"varint,2,opt,name=giftDefaultLimitCount,proto3" json:"giftDefaultLimitCount,omitempty"`
	GiftHistoryDefaultLimitCount                             int32    `protobuf:"varint,3,opt,name=giftHistoryDefaultLimitCount,proto3" json:"giftHistoryDefaultLimitCount,omitempty"`
	MeishiLimitCount                                         int32    `protobuf:"varint,4,opt,name=meishiLimitCount,proto3" json:"meishiLimitCount,omitempty"`
	MeishiObjectLimitCount                                   int32    `protobuf:"varint,5,opt,name=meishiObjectLimitCount,proto3" json:"meishiObjectLimitCount,omitempty"`
	MeishiFolderLimitCount                                   int32    `protobuf:"varint,6,opt,name=meishiFolderLimitCount,proto3" json:"meishiFolderLimitCount,omitempty"`
	NewLabelTTL                                              int32    `protobuf:"varint,8,opt,name=newLabelTTL,proto3" json:"newLabelTTL,omitempty"`
	WorkSkipLimit                                            int32    `protobuf:"varint,10,opt,name=workSkipLimit,proto3" json:"workSkipLimit,omitempty"`
	WorkSkipConsumeMinutes                                   int32    `protobuf:"varint,11,opt,name=workSkipConsumeMinutes,proto3" json:"workSkipConsumeMinutes,omitempty"`
	ProfileBirthdayUpdateIntervalDays                        int32    `protobuf:"varint,12,opt,name=profileBirthdayUpdateIntervalDays,proto3" json:"profileBirthdayUpdateIntervalDays,omitempty"`
	ResetTimingHour                                          int32    `protobuf:"varint,13,opt,name=resetTimingHour,proto3" json:"resetTimingHour,omitempty"`
	ResetTimingMinute                                        int32    `protobuf:"varint,14,opt,name=resetTimingMinute,proto3" json:"resetTimingMinute,omitempty"`
	ResetTimingWeek                                          string   `protobuf:"bytes,15,opt,name=resetTimingWeek,proto3" json:"resetTimingWeek,omitempty"`
	ResetTimingDay                                           int32    `protobuf:"varint,16,opt,name=resetTimingDay,proto3" json:"resetTimingDay,omitempty"`
	InitialUserMeishiBaseAssetID                             string   `protobuf:"bytes,20,opt,name=initialUserMeishiBaseAssetID,proto3" json:"initialUserMeishiBaseAssetID,omitempty"`
	RosterIgnoreReportDearnessLevels                         []int32  `protobuf:"varint,21,rep,packed,name=rosterIgnoreReportDearnessLevels,proto3" json:"rosterIgnoreReportDearnessLevels,omitempty"`
	MemoryLimitCount                                         int32    `protobuf:"varint,22,opt,name=memoryLimitCount,proto3" json:"memoryLimitCount,omitempty"`
	PhotoLimitCount                                          int32    `protobuf:"varint,23,opt,name=photoLimitCount,proto3" json:"photoLimitCount,omitempty"`
	ActionPointRecoveryMinutes                               int32    `protobuf:"varint,24,opt,name=actionPointRecoveryMinutes,proto3" json:"actionPointRecoveryMinutes,omitempty"`
	ActionPointMaxValue                                      int32    `protobuf:"varint,25,opt,name=actionPointMaxValue,proto3" json:"actionPointMaxValue,omitempty"`
	MoneyHomeDisplayPermil                                   int32    `protobuf:"varint,27,opt,name=moneyHomeDisplayPermil,proto3" json:"moneyHomeDisplayPermil,omitempty"`
	MoneyReceivableMinimumMinutes                            int32    `protobuf:"varint,29,opt,name=moneyReceivableMinimumMinutes,proto3" json:"moneyReceivableMinimumMinutes,omitempty"`
	WorkExcellentRewardQuantityCoefficientPermil             int32    `protobuf:"varint,30,opt,name=workExcellentRewardQuantityCoefficientPermil,proto3" json:"workExcellentRewardQuantityCoefficientPermil,omitempty"`
	FanCountLimit                                            int64    `protobuf:"varint,31,opt,name=fanCountLimit,proto3" json:"fanCountLimit,omitempty"`
	WorkFineCharacterMaxCountInDay                           int32    `protobuf:"varint,32,opt,name=workFineCharacterMaxCountInDay,proto3" json:"workFineCharacterMaxCountInDay,omitempty"`
	WorkFineProbabilityPermil                                int32    `protobuf:"varint,33,opt,name=workFineProbabilityPermil,proto3" json:"workFineProbabilityPermil,omitempty"`
	WorkFineFixDays                                          int32    `protobuf:"varint,34,opt,name=workFineFixDays,proto3" json:"workFineFixDays,omitempty"`
	FriendBaseFollowLimitCount                               int32    `protobuf:"varint,35,opt,name=friendBaseFollowLimitCount,proto3" json:"friendBaseFollowLimitCount,omitempty"`
	FriendFollowerLimitCount                                 int32    `protobuf:"varint,36,opt,name=friendFollowerLimitCount,proto3" json:"friendFollowerLimitCount,omitempty"`
	FriendCoinMaxDailyAccumulationCount                      int32    `protobuf:"varint,42,opt,name=friendCoinMaxDailyAccumulationCount,proto3" json:"friendCoinMaxDailyAccumulationCount,omitempty"`
	FriendCoinSupportCardRentalRewardQuantity                int32    `protobuf:"varint,43,opt,name=friendCoinSupportCardRentalRewardQuantity,proto3" json:"friendCoinSupportCardRentalRewardQuantity,omitempty"`
	FriendCoinMemoryRentalRewardQuantity                     int32    `protobuf:"varint,44,opt,name=friendCoinMemoryRentalRewardQuantity,proto3" json:"friendCoinMemoryRentalRewardQuantity,omitempty"`
	MemoryPowerParameterCoefficientPermil                    int32    `protobuf:"varint,45,opt,name=memoryPowerParameterCoefficientPermil,proto3" json:"memoryPowerParameterCoefficientPermil,omitempty"`
	MemoryPowerStaminaCoefficientPermil                      int32    `protobuf:"varint,46,opt,name=memoryPowerStaminaCoefficientPermil,proto3" json:"memoryPowerStaminaCoefficientPermil,omitempty"`
	MemoryPowerProduceResourceEvaluationCoefficientPermil    int32    `protobuf:"varint,47,opt,name=memoryPowerProduceResourceEvaluationCoefficientPermil,proto3" json:"memoryPowerProduceResourceEvaluationCoefficientPermil,omitempty"`
	SeminarExamSettingID                                     string   `protobuf:"bytes,50,opt,name=seminarExamSettingID,proto3" json:"seminarExamSettingID,omitempty"`
	InitialUserName                                          string   `protobuf:"bytes,53,opt,name=initialUserName,proto3" json:"initialUserName,omitempty"`
	TowerExamSettingID                                       string   `protobuf:"bytes,54,opt,name=towerExamSettingID,proto3" json:"towerExamSettingID,omitempty"`
	CoinGashaNoticeDrawCount                                 int32    `protobuf:"varint,55,opt,name=coinGashaNoticeDrawCount,proto3" json:"coinGashaNoticeDrawCount,omitempty"`
	JewelShopID                                              string   `protobuf:"bytes,56,opt,name=jewelShopID,proto3" json:"jewelShopID,omitempty"`
	MissionPassPointExchangeJewel                            int32    `protobuf:"varint,58,opt,name=missionPassPointExchangeJewel,proto3" json:"missionPassPointExchangeJewel,omitempty"`
	OfficialXURL                                             string   `protobuf:"bytes,60,opt,name=officialXURL,proto3" json:"officialXURL,omitempty"`
	IosFaqURL                                                string   `protobuf:"bytes,61,opt,name=iosFaqURL,proto3" json:"iosFaqURL,omitempty"`
	AndroidFaqURL                                            string   `protobuf:"bytes,62,opt,name=androidFaqURL,proto3" json:"androidFaqURL,omitempty"`
	InitialAchievementID                                     string   `protobuf:"bytes,63,opt,name=initialAchievementID,proto3" json:"initialAchievementID,omitempty"`
	InviteUserActiveMaxCount                                 int32    `protobuf:"varint,65,opt,name=inviteUserActiveMaxCount,proto3" json:"inviteUserActiveMaxCount,omitempty"`
	InvitationEnterCodeRewardJewelQuantity                   int32    `protobuf:"varint,66,opt,name=invitationEnterCodeRewardJewelQuantity,proto3" json:"invitationEnterCodeRewardJewelQuantity,omitempty"`
	InvitationEnterCodeRewardProvideConditionSetID           string   `protobuf:"bytes,67,opt,name=invitationEnterCodeRewardProvideConditionSetID,proto3" json:"invitationEnterCodeRewardProvideConditionSetID,omitempty"`
	IosInquiryURL                                            string   `protobuf:"bytes,68,opt,name=iosInquiryURL,proto3" json:"iosInquiryURL,omitempty"`
	AndroidInquiryURL                                        string   `protobuf:"bytes,69,opt,name=androidInquiryURL,proto3" json:"androidInquiryURL,omitempty"`
	InvitationEnterCodeConditionSetID                        string   `protobuf:"bytes,71,opt,name=invitationEnterCodeConditionSetID,proto3" json:"invitationEnterCodeConditionSetID,omitempty"`
	UserDeleteInquiryURL                                     string   `protobuf:"bytes,72,opt,name=userDeleteInquiryURL,proto3" json:"userDeleteInquiryURL,omitempty"`
	InvitationNoticeID                                       string   `protobuf:"bytes,75,opt,name=invitationNoticeID,proto3" json:"invitationNoticeID,omitempty"`
	BanWarningMessage                                        string   `protobuf:"bytes,77,opt,name=banWarningMessage,proto3" json:"banWarningMessage,omitempty"`
	SeminarInitialParameter                                  int32    `protobuf:"varint,78,opt,name=seminarInitialParameter,proto3" json:"seminarInitialParameter,omitempty"`
	MemoryCreateAbilityRToSsrPermil                          int32    `protobuf:"varint,81,opt,name=memoryCreateAbilityRToSsrPermil,proto3" json:"memoryCreateAbilityRToSsrPermil,omitempty"`
	MemoryCreateAbilitySrToSsrPermil                         int32    `protobuf:"varint,82,opt,name=memoryCreateAbilitySrToSsrPermil,proto3" json:"memoryCreateAbilitySrToSsrPermil,omitempty"`
	MemoryCreateProduceCardSrToSsrPermil                     int32    `protobuf:"varint,83,opt,name=memoryCreateProduceCardSrToSsrPermil,proto3" json:"memoryCreateProduceCardSrToSsrPermil,omitempty"`
	MemoryCreateExamBattleProduceCardSrToSsrPermil           int32    `protobuf:"varint,84,opt,name=memoryCreateExamBattleProduceCardSrToSsrPermil,proto3" json:"memoryCreateExamBattleProduceCardSrToSsrPermil,omitempty"`
	MusicHotDisplayCount                                     int32    `protobuf:"varint,85,opt,name=musicHotDisplayCount,proto3" json:"musicHotDisplayCount,omitempty"`
	HomeDailyMissionGroupID                                  string   `protobuf:"bytes,86,opt,name=homeDailyMissionGroupID,proto3" json:"homeDailyMissionGroupID,omitempty"`
	HomeWeeklyMissionGroupID                                 string   `protobuf:"bytes,87,opt,name=homeWeeklyMissionGroupID,proto3" json:"homeWeeklyMissionGroupID,omitempty"`
	MemoryCreateParameterSmall                               int32    `protobuf:"varint,88,opt,name=memoryCreateParameterSmall,proto3" json:"memoryCreateParameterSmall,omitempty"`
	MemoryCreateParameterMiddle                              int32    `protobuf:"varint,89,opt,name=memoryCreateParameterMiddle,proto3" json:"memoryCreateParameterMiddle,omitempty"`
	MemoryCreateParameterLarge                               int32    `protobuf:"varint,90,opt,name=memoryCreateParameterLarge,proto3" json:"memoryCreateParameterLarge,omitempty"`
	TowerViewConditionSetID                                  string   `protobuf:"bytes,92,opt,name=towerViewConditionSetID,proto3" json:"towerViewConditionSetID,omitempty"`
	SeminarViewConditionSetID                                string   `protobuf:"bytes,93,opt,name=seminarViewConditionSetID,proto3" json:"seminarViewConditionSetID,omitempty"`
	StoryEventTipsAssetIDs                                   []string `protobuf:"bytes,94,rep,name=storyEventTipsAssetIDs,proto3" json:"storyEventTipsAssetIDs,omitempty"`
	StoryEventPointLimit                                     int32    `protobuf:"varint,95,opt,name=storyEventPointLimit,proto3" json:"storyEventPointLimit,omitempty"`
	SeminarGuidanceViewConditionSetID                        string   `protobuf:"bytes,96,opt,name=seminarGuidanceViewConditionSetID,proto3" json:"seminarGuidanceViewConditionSetID,omitempty"`
	OfficialWebSiteURL                                       string   `protobuf:"bytes,97,opt,name=officialWebSiteURL,proto3" json:"officialWebSiteURL,omitempty"`
	IPPortalWebSiteURL                                       string   `protobuf:"bytes,98,opt,name=iPPortalWebSiteURL,proto3" json:"iPPortalWebSiteURL,omitempty"`
	PhotoNameLengthLimit                                     int32    `protobuf:"varint,99,opt,name=photoNameLengthLimit,proto3" json:"photoNameLengthLimit,omitempty"`
	HomeEventEndTimeDisplayHour                              int32    `protobuf:"varint,100,opt,name=homeEventEndTimeDisplayHour,proto3" json:"homeEventEndTimeDisplayHour,omitempty"`
	IdolCardPieceExchangeItemID                              string   `protobuf:"bytes,101,opt,name=idolCardPieceExchangeItemID,proto3" json:"idolCardPieceExchangeItemID,omitempty"`
	StoryEventMainStoryTipsAssetIDs                          []string `protobuf:"bytes,103,rep,name=storyEventMainStoryTipsAssetIDs,proto3" json:"storyEventMainStoryTipsAssetIDs,omitempty"`
	OfficialDiscordURL                                       string   `protobuf:"bytes,105,opt,name=officialDiscordURL,proto3" json:"officialDiscordURL,omitempty"`
	OfficialYouTubeIdolMasterURL                             string   `protobuf:"bytes,106,opt,name=officialYouTubeIdolMasterURL,proto3" json:"officialYouTubeIdolMasterURL,omitempty"`
	OfficialYouTubeHatsuBoshiURL                             string   `protobuf:"bytes,107,opt,name=officialYouTubeHatsuBoshiURL,proto3" json:"officialYouTubeHatsuBoshiURL,omitempty"`
	StoryEventGuildMissionTipAssetIDs                        []string `protobuf:"bytes,108,rep,name=storyEventGuildMissionTipAssetIDs,proto3" json:"storyEventGuildMissionTipAssetIDs,omitempty"`
	PhotoPoseWaitVoicePlayIntervalSeconds                    int32    `protobuf:"varint,109,opt,name=photoPoseWaitVoicePlayIntervalSeconds,proto3" json:"photoPoseWaitVoicePlayIntervalSeconds,omitempty"`
	PhotoBackgroundDefaultBGMAssetID                         string   `protobuf:"bytes,110,opt,name=photoBackgroundDefaultBGMAssetID,proto3" json:"photoBackgroundDefaultBGMAssetID,omitempty"`
	PhotoMaxShootingCount                                    int32    `protobuf:"varint,111,opt,name=photoMaxShootingCount,proto3" json:"photoMaxShootingCount,omitempty"`
	PhotoAutoShootingCount                                   int32    `protobuf:"varint,112,opt,name=photoAutoShootingCount,proto3" json:"photoAutoShootingCount,omitempty"`
	MeishiEditCustomUnlockConditionSetID                     string   `protobuf:"bytes,113,opt,name=meishiEditCustomUnlockConditionSetID,proto3" json:"meishiEditCustomUnlockConditionSetID,omitempty"`
	PhotoIdolViewConditionSetID                              string   `protobuf:"bytes,114,opt,name=photoIdolViewConditionSetID,proto3" json:"photoIdolViewConditionSetID,omitempty"`
	ProduceDailyMemoryRentalLimit                            int32    `protobuf:"varint,1001,opt,name=produceDailyMemoryRentalLimit,proto3" json:"produceDailyMemoryRentalLimit,omitempty"`
	ProduceDailyFreeContinueCount                            int32    `protobuf:"varint,1002,opt,name=produceDailyFreeContinueCount,proto3" json:"produceDailyFreeContinueCount,omitempty"`
	ProduceContinueItemID                                    string   `protobuf:"bytes,1003,opt,name=produceContinueItemID,proto3" json:"produceContinueItemID,omitempty"`
	ProduceStartShopWarningProducePointQuantity              int32    `protobuf:"varint,1004,opt,name=produceStartShopWarningProducePointQuantity,proto3" json:"produceStartShopWarningProducePointQuantity,omitempty"`
	ProduceParameterOutGameDisplayLimit                      int32    `protobuf:"varint,1005,opt,name=produceParameterOutGameDisplayLimit,proto3" json:"produceParameterOutGameDisplayLimit,omitempty"`
	ProduceParameterInGameDisplayLimit                       int32    `protobuf:"varint,1006,opt,name=produceParameterInGameDisplayLimit,proto3" json:"produceParameterInGameDisplayLimit,omitempty"`
	ProducePointLimit                                        int32    `protobuf:"varint,1007,opt,name=producePointLimit,proto3" json:"producePointLimit,omitempty"`
	ProduceMaxStaminaLimit                                   int32    `protobuf:"varint,1008,opt,name=produceMaxStaminaLimit,proto3" json:"produceMaxStaminaLimit,omitempty"`
	ProduceCardLimitCount                                    int32    `protobuf:"varint,1009,opt,name=produceCardLimitCount,proto3" json:"produceCardLimitCount,omitempty"`
	ProduceRankingDisplayCount                               int32    `protobuf:"varint,1011,opt,name=produceRankingDisplayCount,proto3" json:"produceRankingDisplayCount,omitempty"`
	ProduceAuditionScoreUpMiddle                             int32    `protobuf:"varint,1017,opt,name=produceAuditionScoreUpMiddle,proto3" json:"produceAuditionScoreUpMiddle,omitempty"`
	ProduceAuditionScoreUpLarge                              int32    `protobuf:"varint,1018,opt,name=produceAuditionScoreUpLarge,proto3" json:"produceAuditionScoreUpLarge,omitempty"`
	ProduceExamBattleScorePenaltyMinPermil                   int32    `protobuf:"varint,1019,opt,name=produceExamBattleScorePenaltyMinPermil,proto3" json:"produceExamBattleScorePenaltyMinPermil,omitempty"`
	ProduceExamBattleScorePenaltyMaxPermil                   int32    `protobuf:"varint,1020,opt,name=produceExamBattleScorePenaltyMaxPermil,proto3" json:"produceExamBattleScorePenaltyMaxPermil,omitempty"`
	ProduceSupportCardRecommendLevelCoefficientPermils       []int32  `protobuf:"varint,1021,rep,packed,name=produceSupportCardRecommendLevelCoefficientPermils,proto3" json:"produceSupportCardRecommendLevelCoefficientPermils,omitempty"`
	ProduceSupportCardRecommendTypeNegativeCoefficientPermil int32    `protobuf:"varint,1022,opt,name=produceSupportCardRecommendTypeNegativeCoefficientPermil,proto3" json:"produceSupportCardRecommendTypeNegativeCoefficientPermil,omitempty"`
	ProducePictureBookLiveProduceGroupID                     string   `protobuf:"bytes,1023,opt,name=producePictureBookLiveProduceGroupID,proto3" json:"producePictureBookLiveProduceGroupID,omitempty"`
	ProduceRevealSpLessonStepCount                           int32    `protobuf:"varint,1024,opt,name=produceRevealSpLessonStepCount,proto3" json:"produceRevealSpLessonStepCount,omitempty"`
	Produce3DTapSkipConditionSetID                           string   `protobuf:"bytes,1025,opt,name=produce3DTapSkipConditionSetID,proto3" json:"produce3DTapSkipConditionSetID,omitempty"`
	ProduceLessonParameterUpMiddle                           int32    `protobuf:"varint,1026,opt,name=produceLessonParameterUpMiddle,proto3" json:"produceLessonParameterUpMiddle,omitempty"`
	ProduceLessonParameterUpLarge                            int32    `protobuf:"varint,1027,opt,name=produceLessonParameterUpLarge,proto3" json:"produceLessonParameterUpLarge,omitempty"`
	ProduceExamProduceCardSuggestMinutes                     int32    `protobuf:"varint,1028,opt,name=produceExamProduceCardSuggestMinutes,proto3" json:"produceExamProduceCardSuggestMinutes,omitempty"`
	ProduceScheduleSelectPlaceStaminaThreshold               int32    `protobuf:"varint,1029,opt,name=produceScheduleSelectPlaceStaminaThreshold,proto3" json:"produceScheduleSelectPlaceStaminaThreshold,omitempty"`
	ProduceMemoryRerollCount                                 int32    `protobuf:"varint,1033,opt,name=produceMemoryRerollCount,proto3" json:"produceMemoryRerollCount,omitempty"`
	GashaPickupStoryCampaignCharacterDearnessLevel           int32    `protobuf:"varint,1101,opt,name=gashaPickupStoryCampaignCharacterDearnessLevel,proto3" json:"gashaPickupStoryCampaignCharacterDearnessLevel,omitempty"`
	GashaAnimationReversalSsrPermil                          int32    `protobuf:"varint,1102,opt,name=gashaAnimationReversalSsrPermil,proto3" json:"gashaAnimationReversalSsrPermil,omitempty"`
	GashaAnimationReversalPickUpProduceIdolSsrPermil         int32    `protobuf:"varint,1103,opt,name=gashaAnimationReversalPickUpProduceIdolSsrPermil,proto3" json:"gashaAnimationReversalPickUpProduceIdolSsrPermil,omitempty"`
	TutorialSetNameAdvIndex                                  int32    `protobuf:"varint,1205,opt,name=tutorialSetNameAdvIndex,proto3" json:"tutorialSetNameAdvIndex,omitempty"`
	TutorialIdolCardSkinSelectRewardID                       string   `protobuf:"bytes,1206,opt,name=tutorialIdolCardSkinSelectRewardID,proto3" json:"tutorialIdolCardSkinSelectRewardID,omitempty"`
	ShopPurchasableLimitAmountThreshold1                     int32    `protobuf:"varint,1301,opt,name=shopPurchasableLimitAmountThreshold1,proto3" json:"shopPurchasableLimitAmountThreshold1,omitempty"`
	ShopPurchasableLimitAmountThreshold2                     int32    `protobuf:"varint,1302,opt,name=shopPurchasableLimitAmountThreshold2,proto3" json:"shopPurchasableLimitAmountThreshold2,omitempty"`
	ShopPurchaseAlertThreshold                               int32    `protobuf:"varint,1303,opt,name=shopPurchaseAlertThreshold,proto3" json:"shopPurchaseAlertThreshold,omitempty"`
	JewelMaxQuantityForPaid                                  int32    `protobuf:"varint,1304,opt,name=jewelMaxQuantityForPaid,proto3" json:"jewelMaxQuantityForPaid,omitempty"`
	JewelMaxQuantityForFree                                  int32    `protobuf:"varint,1305,opt,name=jewelMaxQuantityForFree,proto3" json:"jewelMaxQuantityForFree,omitempty"`
	ShopPurchasableLimitAgeThreshold1                        int32    `protobuf:"varint,1306,opt,name=shopPurchasableLimitAgeThreshold1,proto3" json:"shopPurchasableLimitAgeThreshold1,omitempty"`
	ShopPurchasableLimitAgeThreshold2                        int32    `protobuf:"varint,1307,opt,name=shopPurchasableLimitAgeThreshold2,proto3" json:"shopPurchasableLimitAgeThreshold2,omitempty"`
	GuildMemberLimitCount                                    int32    `protobuf:"varint,1401,opt,name=guildMemberLimitCount,proto3" json:"guildMemberLimitCount,omitempty"`
	GuildJoinRequestLimitCount                               int32    `protobuf:"varint,1402,opt,name=guildJoinRequestLimitCount,proto3" json:"guildJoinRequestLimitCount,omitempty"`
	GuildJoinRequestReceiveLimitCount                        int32    `protobuf:"varint,1403,opt,name=guildJoinRequestReceiveLimitCount,proto3" json:"guildJoinRequestReceiveLimitCount,omitempty"`
	GuildRestrictJoinHour                                    int32    `protobuf:"varint,1404,opt,name=guildRestrictJoinHour,proto3" json:"guildRestrictJoinHour,omitempty"`
	GuildRestrictEstablishHour                               int32    `protobuf:"varint,1405,opt,name=guildRestrictEstablishHour,proto3" json:"guildRestrictEstablishHour,omitempty"`
	GuildRestrictDonationRequestHour                         int32    `protobuf:"varint,1408,opt,name=guildRestrictDonationRequestHour,proto3" json:"guildRestrictDonationRequestHour,omitempty"`
	GuildDonationRequestReceiveMaxQuantity                   int32    `protobuf:"varint,1409,opt,name=guildDonationRequestReceiveMaxQuantity,proto3" json:"guildDonationRequestReceiveMaxQuantity,omitempty"`
	GuildDonationLimitCount                                  int32    `protobuf:"varint,1410,opt,name=guildDonationLimitCount,proto3" json:"guildDonationLimitCount,omitempty"`
	GuildNameLengthLimit                                     int32    `protobuf:"varint,1413,opt,name=guildNameLengthLimit,proto3" json:"guildNameLengthLimit,omitempty"`
	GuildDescriptionLengthLimit                              int32    `protobuf:"varint,1414,opt,name=guildDescriptionLengthLimit,proto3" json:"guildDescriptionLengthLimit,omitempty"`
	GuildLeaderMessageLengthLimit                            int32    `protobuf:"varint,1415,opt,name=guildLeaderMessageLengthLimit,proto3" json:"guildLeaderMessageLengthLimit,omitempty"`
	ProfileNameLengthLimit                                   int32    `protobuf:"varint,1601,opt,name=profileNameLengthLimit,proto3" json:"profileNameLengthLimit,omitempty"`
	ProfileCommentLengthLimit                                int32    `protobuf:"varint,1602,opt,name=profileCommentLengthLimit,proto3" json:"profileCommentLengthLimit,omitempty"`
	PvpRateMemoryRecommendParameterCoefficientPermil         int32    `protobuf:"varint,1741,opt,name=pvpRateMemoryRecommendParameterCoefficientPermil,proto3" json:"pvpRateMemoryRecommendParameterCoefficientPermil,omitempty"`
	PvpRateMemoryRecommendStaminaCoefficientPermil           int32    `protobuf:"varint,1742,opt,name=pvpRateMemoryRecommendStaminaCoefficientPermil,proto3" json:"pvpRateMemoryRecommendStaminaCoefficientPermil,omitempty"`
	PvpRateMemoryRecommendProduceCardCoefficientPermil       int32    `protobuf:"varint,1743,opt,name=pvpRateMemoryRecommendProduceCardCoefficientPermil,proto3" json:"pvpRateMemoryRecommendProduceCardCoefficientPermil,omitempty"`
	PvpRateMemoryRecommendProduceItemCoefficientPermil       int32    `protobuf:"varint,1744,opt,name=pvpRateMemoryRecommendProduceItemCoefficientPermil,proto3" json:"pvpRateMemoryRecommendProduceItemCoefficientPermil,omitempty"`
	PvpRateExamBattleAllSkipUnlockConditionSetID             string   `protobuf:"bytes,1745,opt,name=pvpRateExamBattleAllSkipUnlockConditionSetID,proto3" json:"pvpRateExamBattleAllSkipUnlockConditionSetID,omitempty"`
	PvpRateRehearsalViewConditionSetID                       string   `protobuf:"bytes,1747,opt,name=pvpRateRehearsalViewConditionSetID,proto3" json:"pvpRateRehearsalViewConditionSetID,omitempty"`
	PvpRateRankingDisplayCount                               int32    `protobuf:"varint,1748,opt,name=pvpRateRankingDisplayCount,proto3" json:"pvpRateRankingDisplayCount,omitempty"`
	ExamBattleSubMemoryParameterPermil                       int32    `protobuf:"varint,1801,opt,name=examBattleSubMemoryParameterPermil,proto3" json:"examBattleSubMemoryParameterPermil,omitempty"`
	ExamBattleSubMemoryStaminaPermil                         int32    `protobuf:"varint,1802,opt,name=examBattleSubMemoryStaminaPermil,proto3" json:"examBattleSubMemoryStaminaPermil,omitempty"`
	ExamBattleConditionThresholdMultipleScore                int32    `protobuf:"varint,1803,opt,name=examBattleConditionThresholdMultipleScore,proto3" json:"examBattleConditionThresholdMultipleScore,omitempty"`
	PushDailyMissionNotifyHour                               int32    `protobuf:"varint,1901,opt,name=pushDailyMissionNotifyHour,proto3" json:"pushDailyMissionNotifyHour,omitempty"`
	PushDailyMissionNotifyMinutes                            int32    `protobuf:"varint,1902,opt,name=pushDailyMissionNotifyMinutes,proto3" json:"pushDailyMissionNotifyMinutes,omitempty"`
	PushDailyMissionDoNotNotifyNoLoginDay                    int32    `protobuf:"varint,1903,opt,name=pushDailyMissionDoNotNotifyNoLoginDay,proto3" json:"pushDailyMissionDoNotNotifyNoLoginDay,omitempty"`
	PushNoLoginNotifyLatestIntervalHour                      int32    `protobuf:"varint,1904,opt,name=pushNoLoginNotifyLatestIntervalHour,proto3" json:"pushNoLoginNotifyLatestIntervalHour,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{338}
}

func (x *Setting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Setting) GetGiftDefaultLimitCount() int32 {
	if x != nil {
		return x.GiftDefaultLimitCount
	}
	return 0
}

func (x *Setting) GetGiftHistoryDefaultLimitCount() int32 {
	if x != nil {
		return x.GiftHistoryDefaultLimitCount
	}
	return 0
}

func (x *Setting) GetMeishiLimitCount() int32 {
	if x != nil {
		return x.MeishiLimitCount
	}
	return 0
}

func (x *Setting) GetMeishiObjectLimitCount() int32 {
	if x != nil {
		return x.MeishiObjectLimitCount
	}
	return 0
}

func (x *Setting) GetMeishiFolderLimitCount() int32 {
	if x != nil {
		return x.MeishiFolderLimitCount
	}
	return 0
}

func (x *Setting) GetNewLabelTTL() int32 {
	if x != nil {
		return x.NewLabelTTL
	}
	return 0
}

func (x *Setting) GetWorkSkipLimit() int32 {
	if x != nil {
		return x.WorkSkipLimit
	}
	return 0
}

func (x *Setting) GetWorkSkipConsumeMinutes() int32 {
	if x != nil {
		return x.WorkSkipConsumeMinutes
	}
	return 0
}

func (x *Setting) GetProfileBirthdayUpdateIntervalDays() int32 {
	if x != nil {
		return x.ProfileBirthdayUpdateIntervalDays
	}
	return 0
}

func (x *Setting) GetResetTimingHour() int32 {
	if x != nil {
		return x.ResetTimingHour
	}
	return 0
}

func (x *Setting) GetResetTimingMinute() int32 {
	if x != nil {
		return x.ResetTimingMinute
	}
	return 0
}

func (x *Setting) GetResetTimingWeek() string {
	if x != nil {
		return x.ResetTimingWeek
	}
	return ""
}

func (x *Setting) GetResetTimingDay() int32 {
	if x != nil {
		return x.ResetTimingDay
	}
	return 0
}

func (x *Setting) GetInitialUserMeishiBaseAssetID() string {
	if x != nil {
		return x.InitialUserMeishiBaseAssetID
	}
	return ""
}

func (x *Setting) GetRosterIgnoreReportDearnessLevels() []int32 {
	if x != nil {
		return x.RosterIgnoreReportDearnessLevels
	}
	return nil
}

func (x *Setting) GetMemoryLimitCount() int32 {
	if x != nil {
		return x.MemoryLimitCount
	}
	return 0
}

func (x *Setting) GetPhotoLimitCount() int32 {
	if x != nil {
		return x.PhotoLimitCount
	}
	return 0
}

func (x *Setting) GetActionPointRecoveryMinutes() int32 {
	if x != nil {
		return x.ActionPointRecoveryMinutes
	}
	return 0
}

func (x *Setting) GetActionPointMaxValue() int32 {
	if x != nil {
		return x.ActionPointMaxValue
	}
	return 0
}

func (x *Setting) GetMoneyHomeDisplayPermil() int32 {
	if x != nil {
		return x.MoneyHomeDisplayPermil
	}
	return 0
}

func (x *Setting) GetMoneyReceivableMinimumMinutes() int32 {
	if x != nil {
		return x.MoneyReceivableMinimumMinutes
	}
	return 0
}

func (x *Setting) GetWorkExcellentRewardQuantityCoefficientPermil() int32 {
	if x != nil {
		return x.WorkExcellentRewardQuantityCoefficientPermil
	}
	return 0
}

func (x *Setting) GetFanCountLimit() int64 {
	if x != nil {
		return x.FanCountLimit
	}
	return 0
}

func (x *Setting) GetWorkFineCharacterMaxCountInDay() int32 {
	if x != nil {
		return x.WorkFineCharacterMaxCountInDay
	}
	return 0
}

func (x *Setting) GetWorkFineProbabilityPermil() int32 {
	if x != nil {
		return x.WorkFineProbabilityPermil
	}
	return 0
}

func (x *Setting) GetWorkFineFixDays() int32 {
	if x != nil {
		return x.WorkFineFixDays
	}
	return 0
}

func (x *Setting) GetFriendBaseFollowLimitCount() int32 {
	if x != nil {
		return x.FriendBaseFollowLimitCount
	}
	return 0
}

func (x *Setting) GetFriendFollowerLimitCount() int32 {
	if x != nil {
		return x.FriendFollowerLimitCount
	}
	return 0
}

func (x *Setting) GetFriendCoinMaxDailyAccumulationCount() int32 {
	if x != nil {
		return x.FriendCoinMaxDailyAccumulationCount
	}
	return 0
}

func (x *Setting) GetFriendCoinSupportCardRentalRewardQuantity() int32 {
	if x != nil {
		return x.FriendCoinSupportCardRentalRewardQuantity
	}
	return 0
}

func (x *Setting) GetFriendCoinMemoryRentalRewardQuantity() int32 {
	if x != nil {
		return x.FriendCoinMemoryRentalRewardQuantity
	}
	return 0
}

func (x *Setting) GetMemoryPowerParameterCoefficientPermil() int32 {
	if x != nil {
		return x.MemoryPowerParameterCoefficientPermil
	}
	return 0
}

func (x *Setting) GetMemoryPowerStaminaCoefficientPermil() int32 {
	if x != nil {
		return x.MemoryPowerStaminaCoefficientPermil
	}
	return 0
}

func (x *Setting) GetMemoryPowerProduceResourceEvaluationCoefficientPermil() int32 {
	if x != nil {
		return x.MemoryPowerProduceResourceEvaluationCoefficientPermil
	}
	return 0
}

func (x *Setting) GetSeminarExamSettingID() string {
	if x != nil {
		return x.SeminarExamSettingID
	}
	return ""
}

func (x *Setting) GetInitialUserName() string {
	if x != nil {
		return x.InitialUserName
	}
	return ""
}

func (x *Setting) GetTowerExamSettingID() string {
	if x != nil {
		return x.TowerExamSettingID
	}
	return ""
}

func (x *Setting) GetCoinGashaNoticeDrawCount() int32 {
	if x != nil {
		return x.CoinGashaNoticeDrawCount
	}
	return 0
}

func (x *Setting) GetJewelShopID() string {
	if x != nil {
		return x.JewelShopID
	}
	return ""
}

func (x *Setting) GetMissionPassPointExchangeJewel() int32 {
	if x != nil {
		return x.MissionPassPointExchangeJewel
	}
	return 0
}

func (x *Setting) GetOfficialXURL() string {
	if x != nil {
		return x.OfficialXURL
	}
	return ""
}

func (x *Setting) GetIosFaqURL() string {
	if x != nil {
		return x.IosFaqURL
	}
	return ""
}

func (x *Setting) GetAndroidFaqURL() string {
	if x != nil {
		return x.AndroidFaqURL
	}
	return ""
}

func (x *Setting) GetInitialAchievementID() string {
	if x != nil {
		return x.InitialAchievementID
	}
	return ""
}

func (x *Setting) GetInviteUserActiveMaxCount() int32 {
	if x != nil {
		return x.InviteUserActiveMaxCount
	}
	return 0
}

func (x *Setting) GetInvitationEnterCodeRewardJewelQuantity() int32 {
	if x != nil {
		return x.InvitationEnterCodeRewardJewelQuantity
	}
	return 0
}

func (x *Setting) GetInvitationEnterCodeRewardProvideConditionSetID() string {
	if x != nil {
		return x.InvitationEnterCodeRewardProvideConditionSetID
	}
	return ""
}

func (x *Setting) GetIosInquiryURL() string {
	if x != nil {
		return x.IosInquiryURL
	}
	return ""
}

func (x *Setting) GetAndroidInquiryURL() string {
	if x != nil {
		return x.AndroidInquiryURL
	}
	return ""
}

func (x *Setting) GetInvitationEnterCodeConditionSetID() string {
	if x != nil {
		return x.InvitationEnterCodeConditionSetID
	}
	return ""
}

func (x *Setting) GetUserDeleteInquiryURL() string {
	if x != nil {
		return x.UserDeleteInquiryURL
	}
	return ""
}

func (x *Setting) GetInvitationNoticeID() string {
	if x != nil {
		return x.InvitationNoticeID
	}
	return ""
}

func (x *Setting) GetBanWarningMessage() string {
	if x != nil {
		return x.BanWarningMessage
	}
	return ""
}

func (x *Setting) GetSeminarInitialParameter() int32 {
	if x != nil {
		return x.SeminarInitialParameter
	}
	return 0
}

func (x *Setting) GetMemoryCreateAbilityRToSsrPermil() int32 {
	if x != nil {
		return x.MemoryCreateAbilityRToSsrPermil
	}
	return 0
}

func (x *Setting) GetMemoryCreateAbilitySrToSsrPermil() int32 {
	if x != nil {
		return x.MemoryCreateAbilitySrToSsrPermil
	}
	return 0
}

func (x *Setting) GetMemoryCreateProduceCardSrToSsrPermil() int32 {
	if x != nil {
		return x.MemoryCreateProduceCardSrToSsrPermil
	}
	return 0
}

func (x *Setting) GetMemoryCreateExamBattleProduceCardSrToSsrPermil() int32 {
	if x != nil {
		return x.MemoryCreateExamBattleProduceCardSrToSsrPermil
	}
	return 0
}

func (x *Setting) GetMusicHotDisplayCount() int32 {
	if x != nil {
		return x.MusicHotDisplayCount
	}
	return 0
}

func (x *Setting) GetHomeDailyMissionGroupID() string {
	if x != nil {
		return x.HomeDailyMissionGroupID
	}
	return ""
}

func (x *Setting) GetHomeWeeklyMissionGroupID() string {
	if x != nil {
		return x.HomeWeeklyMissionGroupID
	}
	return ""
}

func (x *Setting) GetMemoryCreateParameterSmall() int32 {
	if x != nil {
		return x.MemoryCreateParameterSmall
	}
	return 0
}

func (x *Setting) GetMemoryCreateParameterMiddle() int32 {
	if x != nil {
		return x.MemoryCreateParameterMiddle
	}
	return 0
}

func (x *Setting) GetMemoryCreateParameterLarge() int32 {
	if x != nil {
		return x.MemoryCreateParameterLarge
	}
	return 0
}

func (x *Setting) GetTowerViewConditionSetID() string {
	if x != nil {
		return x.TowerViewConditionSetID
	}
	return ""
}

func (x *Setting) GetSeminarViewConditionSetID() string {
	if x != nil {
		return x.SeminarViewConditionSetID
	}
	return ""
}

func (x *Setting) GetStoryEventTipsAssetIDs() []string {
	if x != nil {
		return x.StoryEventTipsAssetIDs
	}
	return nil
}

func (x *Setting) GetStoryEventPointLimit() int32 {
	if x != nil {
		return x.StoryEventPointLimit
	}
	return 0
}

func (x *Setting) GetSeminarGuidanceViewConditionSetID() string {
	if x != nil {
		return x.SeminarGuidanceViewConditionSetID
	}
	return ""
}

func (x *Setting) GetOfficialWebSiteURL() string {
	if x != nil {
		return x.OfficialWebSiteURL
	}
	return ""
}

func (x *Setting) GetIPPortalWebSiteURL() string {
	if x != nil {
		return x.IPPortalWebSiteURL
	}
	return ""
}

func (x *Setting) GetPhotoNameLengthLimit() int32 {
	if x != nil {
		return x.PhotoNameLengthLimit
	}
	return 0
}

func (x *Setting) GetHomeEventEndTimeDisplayHour() int32 {
	if x != nil {
		return x.HomeEventEndTimeDisplayHour
	}
	return 0
}

func (x *Setting) GetIdolCardPieceExchangeItemID() string {
	if x != nil {
		return x.IdolCardPieceExchangeItemID
	}
	return ""
}

func (x *Setting) GetStoryEventMainStoryTipsAssetIDs() []string {
	if x != nil {
		return x.StoryEventMainStoryTipsAssetIDs
	}
	return nil
}

func (x *Setting) GetOfficialDiscordURL() string {
	if x != nil {
		return x.OfficialDiscordURL
	}
	return ""
}

func (x *Setting) GetOfficialYouTubeIdolMasterURL() string {
	if x != nil {
		return x.OfficialYouTubeIdolMasterURL
	}
	return ""
}

func (x *Setting) GetOfficialYouTubeHatsuBoshiURL() string {
	if x != nil {
		return x.OfficialYouTubeHatsuBoshiURL
	}
	return ""
}

func (x *Setting) GetStoryEventGuildMissionTipAssetIDs() []string {
	if x != nil {
		return x.StoryEventGuildMissionTipAssetIDs
	}
	return nil
}

func (x *Setting) GetPhotoPoseWaitVoicePlayIntervalSeconds() int32 {
	if x != nil {
		return x.PhotoPoseWaitVoicePlayIntervalSeconds
	}
	return 0
}

func (x *Setting) GetPhotoBackgroundDefaultBGMAssetID() string {
	if x != nil {
		return x.PhotoBackgroundDefaultBGMAssetID
	}
	return ""
}

func (x *Setting) GetPhotoMaxShootingCount() int32 {
	if x != nil {
		return x.PhotoMaxShootingCount
	}
	return 0
}

func (x *Setting) GetPhotoAutoShootingCount() int32 {
	if x != nil {
		return x.PhotoAutoShootingCount
	}
	return 0
}

func (x *Setting) GetMeishiEditCustomUnlockConditionSetID() string {
	if x != nil {
		return x.MeishiEditCustomUnlockConditionSetID
	}
	return ""
}

func (x *Setting) GetPhotoIdolViewConditionSetID() string {
	if x != nil {
		return x.PhotoIdolViewConditionSetID
	}
	return ""
}

func (x *Setting) GetProduceDailyMemoryRentalLimit() int32 {
	if x != nil {
		return x.ProduceDailyMemoryRentalLimit
	}
	return 0
}

func (x *Setting) GetProduceDailyFreeContinueCount() int32 {
	if x != nil {
		return x.ProduceDailyFreeContinueCount
	}
	return 0
}

func (x *Setting) GetProduceContinueItemID() string {
	if x != nil {
		return x.ProduceContinueItemID
	}
	return ""
}

func (x *Setting) GetProduceStartShopWarningProducePointQuantity() int32 {
	if x != nil {
		return x.ProduceStartShopWarningProducePointQuantity
	}
	return 0
}

func (x *Setting) GetProduceParameterOutGameDisplayLimit() int32 {
	if x != nil {
		return x.ProduceParameterOutGameDisplayLimit
	}
	return 0
}

func (x *Setting) GetProduceParameterInGameDisplayLimit() int32 {
	if x != nil {
		return x.ProduceParameterInGameDisplayLimit
	}
	return 0
}

func (x *Setting) GetProducePointLimit() int32 {
	if x != nil {
		return x.ProducePointLimit
	}
	return 0
}

func (x *Setting) GetProduceMaxStaminaLimit() int32 {
	if x != nil {
		return x.ProduceMaxStaminaLimit
	}
	return 0
}

func (x *Setting) GetProduceCardLimitCount() int32 {
	if x != nil {
		return x.ProduceCardLimitCount
	}
	return 0
}

func (x *Setting) GetProduceRankingDisplayCount() int32 {
	if x != nil {
		return x.ProduceRankingDisplayCount
	}
	return 0
}

func (x *Setting) GetProduceAuditionScoreUpMiddle() int32 {
	if x != nil {
		return x.ProduceAuditionScoreUpMiddle
	}
	return 0
}

func (x *Setting) GetProduceAuditionScoreUpLarge() int32 {
	if x != nil {
		return x.ProduceAuditionScoreUpLarge
	}
	return 0
}

func (x *Setting) GetProduceExamBattleScorePenaltyMinPermil() int32 {
	if x != nil {
		return x.ProduceExamBattleScorePenaltyMinPermil
	}
	return 0
}

func (x *Setting) GetProduceExamBattleScorePenaltyMaxPermil() int32 {
	if x != nil {
		return x.ProduceExamBattleScorePenaltyMaxPermil
	}
	return 0
}

func (x *Setting) GetProduceSupportCardRecommendLevelCoefficientPermils() []int32 {
	if x != nil {
		return x.ProduceSupportCardRecommendLevelCoefficientPermils
	}
	return nil
}

func (x *Setting) GetProduceSupportCardRecommendTypeNegativeCoefficientPermil() int32 {
	if x != nil {
		return x.ProduceSupportCardRecommendTypeNegativeCoefficientPermil
	}
	return 0
}

func (x *Setting) GetProducePictureBookLiveProduceGroupID() string {
	if x != nil {
		return x.ProducePictureBookLiveProduceGroupID
	}
	return ""
}

func (x *Setting) GetProduceRevealSpLessonStepCount() int32 {
	if x != nil {
		return x.ProduceRevealSpLessonStepCount
	}
	return 0
}

func (x *Setting) GetProduce3DTapSkipConditionSetID() string {
	if x != nil {
		return x.Produce3DTapSkipConditionSetID
	}
	return ""
}

func (x *Setting) GetProduceLessonParameterUpMiddle() int32 {
	if x != nil {
		return x.ProduceLessonParameterUpMiddle
	}
	return 0
}

func (x *Setting) GetProduceLessonParameterUpLarge() int32 {
	if x != nil {
		return x.ProduceLessonParameterUpLarge
	}
	return 0
}

func (x *Setting) GetProduceExamProduceCardSuggestMinutes() int32 {
	if x != nil {
		return x.ProduceExamProduceCardSuggestMinutes
	}
	return 0
}

func (x *Setting) GetProduceScheduleSelectPlaceStaminaThreshold() int32 {
	if x != nil {
		return x.ProduceScheduleSelectPlaceStaminaThreshold
	}
	return 0
}

func (x *Setting) GetProduceMemoryRerollCount() int32 {
	if x != nil {
		return x.ProduceMemoryRerollCount
	}
	return 0
}

func (x *Setting) GetGashaPickupStoryCampaignCharacterDearnessLevel() int32 {
	if x != nil {
		return x.GashaPickupStoryCampaignCharacterDearnessLevel
	}
	return 0
}

func (x *Setting) GetGashaAnimationReversalSsrPermil() int32 {
	if x != nil {
		return x.GashaAnimationReversalSsrPermil
	}
	return 0
}

func (x *Setting) GetGashaAnimationReversalPickUpProduceIdolSsrPermil() int32 {
	if x != nil {
		return x.GashaAnimationReversalPickUpProduceIdolSsrPermil
	}
	return 0
}

func (x *Setting) GetTutorialSetNameAdvIndex() int32 {
	if x != nil {
		return x.TutorialSetNameAdvIndex
	}
	return 0
}

func (x *Setting) GetTutorialIdolCardSkinSelectRewardID() string {
	if x != nil {
		return x.TutorialIdolCardSkinSelectRewardID
	}
	return ""
}

func (x *Setting) GetShopPurchasableLimitAmountThreshold1() int32 {
	if x != nil {
		return x.ShopPurchasableLimitAmountThreshold1
	}
	return 0
}

func (x *Setting) GetShopPurchasableLimitAmountThreshold2() int32 {
	if x != nil {
		return x.ShopPurchasableLimitAmountThreshold2
	}
	return 0
}

func (x *Setting) GetShopPurchaseAlertThreshold() int32 {
	if x != nil {
		return x.ShopPurchaseAlertThreshold
	}
	return 0
}

func (x *Setting) GetJewelMaxQuantityForPaid() int32 {
	if x != nil {
		return x.JewelMaxQuantityForPaid
	}
	return 0
}

func (x *Setting) GetJewelMaxQuantityForFree() int32 {
	if x != nil {
		return x.JewelMaxQuantityForFree
	}
	return 0
}

func (x *Setting) GetShopPurchasableLimitAgeThreshold1() int32 {
	if x != nil {
		return x.ShopPurchasableLimitAgeThreshold1
	}
	return 0
}

func (x *Setting) GetShopPurchasableLimitAgeThreshold2() int32 {
	if x != nil {
		return x.ShopPurchasableLimitAgeThreshold2
	}
	return 0
}

func (x *Setting) GetGuildMemberLimitCount() int32 {
	if x != nil {
		return x.GuildMemberLimitCount
	}
	return 0
}

func (x *Setting) GetGuildJoinRequestLimitCount() int32 {
	if x != nil {
		return x.GuildJoinRequestLimitCount
	}
	return 0
}

func (x *Setting) GetGuildJoinRequestReceiveLimitCount() int32 {
	if x != nil {
		return x.GuildJoinRequestReceiveLimitCount
	}
	return 0
}

func (x *Setting) GetGuildRestrictJoinHour() int32 {
	if x != nil {
		return x.GuildRestrictJoinHour
	}
	return 0
}

func (x *Setting) GetGuildRestrictEstablishHour() int32 {
	if x != nil {
		return x.GuildRestrictEstablishHour
	}
	return 0
}

func (x *Setting) GetGuildRestrictDonationRequestHour() int32 {
	if x != nil {
		return x.GuildRestrictDonationRequestHour
	}
	return 0
}

func (x *Setting) GetGuildDonationRequestReceiveMaxQuantity() int32 {
	if x != nil {
		return x.GuildDonationRequestReceiveMaxQuantity
	}
	return 0
}

func (x *Setting) GetGuildDonationLimitCount() int32 {
	if x != nil {
		return x.GuildDonationLimitCount
	}
	return 0
}

func (x *Setting) GetGuildNameLengthLimit() int32 {
	if x != nil {
		return x.GuildNameLengthLimit
	}
	return 0
}

func (x *Setting) GetGuildDescriptionLengthLimit() int32 {
	if x != nil {
		return x.GuildDescriptionLengthLimit
	}
	return 0
}

func (x *Setting) GetGuildLeaderMessageLengthLimit() int32 {
	if x != nil {
		return x.GuildLeaderMessageLengthLimit
	}
	return 0
}

func (x *Setting) GetProfileNameLengthLimit() int32 {
	if x != nil {
		return x.ProfileNameLengthLimit
	}
	return 0
}

func (x *Setting) GetProfileCommentLengthLimit() int32 {
	if x != nil {
		return x.ProfileCommentLengthLimit
	}
	return 0
}

func (x *Setting) GetPvpRateMemoryRecommendParameterCoefficientPermil() int32 {
	if x != nil {
		return x.PvpRateMemoryRecommendParameterCoefficientPermil
	}
	return 0
}

func (x *Setting) GetPvpRateMemoryRecommendStaminaCoefficientPermil() int32 {
	if x != nil {
		return x.PvpRateMemoryRecommendStaminaCoefficientPermil
	}
	return 0
}

func (x *Setting) GetPvpRateMemoryRecommendProduceCardCoefficientPermil() int32 {
	if x != nil {
		return x.PvpRateMemoryRecommendProduceCardCoefficientPermil
	}
	return 0
}

func (x *Setting) GetPvpRateMemoryRecommendProduceItemCoefficientPermil() int32 {
	if x != nil {
		return x.PvpRateMemoryRecommendProduceItemCoefficientPermil
	}
	return 0
}

func (x *Setting) GetPvpRateExamBattleAllSkipUnlockConditionSetID() string {
	if x != nil {
		return x.PvpRateExamBattleAllSkipUnlockConditionSetID
	}
	return ""
}

func (x *Setting) GetPvpRateRehearsalViewConditionSetID() string {
	if x != nil {
		return x.PvpRateRehearsalViewConditionSetID
	}
	return ""
}

func (x *Setting) GetPvpRateRankingDisplayCount() int32 {
	if x != nil {
		return x.PvpRateRankingDisplayCount
	}
	return 0
}

func (x *Setting) GetExamBattleSubMemoryParameterPermil() int32 {
	if x != nil {
		return x.ExamBattleSubMemoryParameterPermil
	}
	return 0
}

func (x *Setting) GetExamBattleSubMemoryStaminaPermil() int32 {
	if x != nil {
		return x.ExamBattleSubMemoryStaminaPermil
	}
	return 0
}

func (x *Setting) GetExamBattleConditionThresholdMultipleScore() int32 {
	if x != nil {
		return x.ExamBattleConditionThresholdMultipleScore
	}
	return 0
}

func (x *Setting) GetPushDailyMissionNotifyHour() int32 {
	if x != nil {
		return x.PushDailyMissionNotifyHour
	}
	return 0
}

func (x *Setting) GetPushDailyMissionNotifyMinutes() int32 {
	if x != nil {
		return x.PushDailyMissionNotifyMinutes
	}
	return 0
}

func (x *Setting) GetPushDailyMissionDoNotNotifyNoLoginDay() int32 {
	if x != nil {
		return x.PushDailyMissionDoNotNotifyNoLoginDay
	}
	return 0
}

func (x *Setting) GetPushNoLoginNotifyLatestIntervalHour() int32 {
	if x != nil {
		return x.PushNoLoginNotifyLatestIntervalHour
	}
	return 0
}

type SettingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Setting `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SettingList) Reset() {
	*x = SettingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingList) ProtoMessage() {}

func (x *SettingList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingList.ProtoReflect.Descriptor instead.
func (*SettingList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{339}
}

func (x *SettingList) GetList() []*Setting {
	if x != nil {
		return x.List
	}
	return nil
}

type Shop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            penum.ShopType        `protobuf:"varint,2,opt,name=type,proto3,enum=penum.ShopType" json:"type,omitempty"`
	Name            string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ResetTimingType penum.ResetTimingType `protobuf:"varint,4,opt,name=resetTimingType,proto3,enum=penum.ResetTimingType" json:"resetTimingType,omitempty"`
	ResetHour       int32                 `protobuf:"varint,5,opt,name=resetHour,proto3" json:"resetHour,omitempty"`
	ResetMinute     int32                 `protobuf:"varint,6,opt,name=resetMinute,proto3" json:"resetMinute,omitempty"`
	ResetWeekday    penum.Weekday         `protobuf:"varint,7,opt,name=resetWeekday,proto3,enum=penum.Weekday" json:"resetWeekday,omitempty"`
	ResetDay        int32                 `protobuf:"varint,8,opt,name=resetDay,proto3" json:"resetDay,omitempty"`
	StartTime       int64                 `protobuf:"varint,100,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime         int64                 `protobuf:"varint,101,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Order           int32                 `protobuf:"varint,102,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Shop) Reset() {
	*x = Shop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shop) ProtoMessage() {}

func (x *Shop) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shop.ProtoReflect.Descriptor instead.
func (*Shop) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{340}
}

func (x *Shop) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Shop) GetType() penum.ShopType {
	if x != nil {
		return x.Type
	}
	return penum.ShopType(0)
}

func (x *Shop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Shop) GetResetTimingType() penum.ResetTimingType {
	if x != nil {
		return x.ResetTimingType
	}
	return penum.ResetTimingType(0)
}

func (x *Shop) GetResetHour() int32 {
	if x != nil {
		return x.ResetHour
	}
	return 0
}

func (x *Shop) GetResetMinute() int32 {
	if x != nil {
		return x.ResetMinute
	}
	return 0
}

func (x *Shop) GetResetWeekday() penum.Weekday {
	if x != nil {
		return x.ResetWeekday
	}
	return penum.Weekday(0)
}

func (x *Shop) GetResetDay() int32 {
	if x != nil {
		return x.ResetDay
	}
	return 0
}

func (x *Shop) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Shop) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Shop) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ShopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShopId                string                    `protobuf:"bytes,2,opt,name=shopId,proto3" json:"shopId,omitempty"`
	Name                  string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LabelTypes            []penum.ShopItemLabelType `protobuf:"varint,4,rep,packed,name=labelTypes,proto3,enum=penum.ShopItemLabelType" json:"labelTypes,omitempty"`
	AssetId               string                    `protobuf:"bytes,7,opt,name=assetId,proto3" json:"assetId,omitempty"`
	ShopProductId         string                    `protobuf:"bytes,8,opt,name=shopProductId,proto3" json:"shopProductId,omitempty"`
	TotalJewelQuantity    int32                     `protobuf:"varint,10,opt,name=totalJewelQuantity,proto3" json:"totalJewelQuantity,omitempty"`
	PaidOnlyJewelQuantity int32                     `protobuf:"varint,11,opt,name=paidOnlyJewelQuantity,proto3" json:"paidOnlyJewelQuantity,omitempty"`
	Rewards               []*pcommon.Reward         `protobuf:"bytes,15,rep,name=rewards,proto3" json:"rewards,omitempty"`
	ViewConditionSetId    string                    `protobuf:"bytes,16,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId  string                    `protobuf:"bytes,17,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	ResetTimingType       penum.ResetTimingType     `protobuf:"varint,18,opt,name=resetTimingType,proto3,enum=penum.ResetTimingType" json:"resetTimingType,omitempty"`
	ResetHour             int32                     `protobuf:"varint,19,opt,name=resetHour,proto3" json:"resetHour,omitempty"`
	ResetMinute           int32                     `protobuf:"varint,20,opt,name=resetMinute,proto3" json:"resetMinute,omitempty"`
	ResetWeekday          penum.Weekday             `protobuf:"varint,21,opt,name=resetWeekday,proto3,enum=penum.Weekday" json:"resetWeekday,omitempty"`
	ResetDay              int32                     `protobuf:"varint,22,opt,name=resetDay,proto3" json:"resetDay,omitempty"`
	PurchaseLimit         int32                     `protobuf:"varint,23,opt,name=purchaseLimit,proto3" json:"purchaseLimit,omitempty"`
	StartTime             int64                     `protobuf:"varint,97,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime               int64                     `protobuf:"varint,98,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Order                 int32                     `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ShopItem) Reset() {
	*x = ShopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopItem) ProtoMessage() {}

func (x *ShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopItem.ProtoReflect.Descriptor instead.
func (*ShopItem) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{341}
}

func (x *ShopItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShopItem) GetShopId() string {
	if x != nil {
		return x.ShopId
	}
	return ""
}

func (x *ShopItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShopItem) GetLabelTypes() []penum.ShopItemLabelType {
	if x != nil {
		return x.LabelTypes
	}
	return nil
}

func (x *ShopItem) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ShopItem) GetShopProductId() string {
	if x != nil {
		return x.ShopProductId
	}
	return ""
}

func (x *ShopItem) GetTotalJewelQuantity() int32 {
	if x != nil {
		return x.TotalJewelQuantity
	}
	return 0
}

func (x *ShopItem) GetPaidOnlyJewelQuantity() int32 {
	if x != nil {
		return x.PaidOnlyJewelQuantity
	}
	return 0
}

func (x *ShopItem) GetRewards() []*pcommon.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *ShopItem) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *ShopItem) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *ShopItem) GetResetTimingType() penum.ResetTimingType {
	if x != nil {
		return x.ResetTimingType
	}
	return penum.ResetTimingType(0)
}

func (x *ShopItem) GetResetHour() int32 {
	if x != nil {
		return x.ResetHour
	}
	return 0
}

func (x *ShopItem) GetResetMinute() int32 {
	if x != nil {
		return x.ResetMinute
	}
	return 0
}

func (x *ShopItem) GetResetWeekday() penum.Weekday {
	if x != nil {
		return x.ResetWeekday
	}
	return penum.Weekday(0)
}

func (x *ShopItem) GetResetDay() int32 {
	if x != nil {
		return x.ResetDay
	}
	return 0
}

func (x *ShopItem) GetPurchaseLimit() int32 {
	if x != nil {
		return x.PurchaseLimit
	}
	return 0
}

func (x *ShopItem) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ShopItem) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ShopItem) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ShopItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ShopItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShopItemList) Reset() {
	*x = ShopItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopItemList) ProtoMessage() {}

func (x *ShopItemList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopItemList.ProtoReflect.Descriptor instead.
func (*ShopItemList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{342}
}

func (x *ShopItemList) GetList() []*ShopItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ShopList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Shop `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShopList) Reset() {
	*x = ShopList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopList) ProtoMessage() {}

func (x *ShopList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopList.ProtoReflect.Descriptor instead.
func (*ShopList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{343}
}

func (x *ShopList) GetList() []*Shop {
	if x != nil {
		return x.List
	}
	return nil
}

type ShopProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppStoreProductId        string `protobuf:"bytes,2,opt,name=appStoreProductId,proto3" json:"appStoreProductId,omitempty"`
	GooglePlayStoreProductId string `protobuf:"bytes,3,opt,name=googlePlayStoreProductId,proto3" json:"googlePlayStoreProductId,omitempty"`
	Jewel                    int32  `protobuf:"varint,10,opt,name=jewel,proto3" json:"jewel,omitempty"`
	PriceJpy                 int32  `protobuf:"varint,11,opt,name=priceJpy,proto3" json:"priceJpy,omitempty"`
}

func (x *ShopProduct) Reset() {
	*x = ShopProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopProduct) ProtoMessage() {}

func (x *ShopProduct) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopProduct.ProtoReflect.Descriptor instead.
func (*ShopProduct) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{344}
}

func (x *ShopProduct) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShopProduct) GetAppStoreProductId() string {
	if x != nil {
		return x.AppStoreProductId
	}
	return ""
}

func (x *ShopProduct) GetGooglePlayStoreProductId() string {
	if x != nil {
		return x.GooglePlayStoreProductId
	}
	return ""
}

func (x *ShopProduct) GetJewel() int32 {
	if x != nil {
		return x.Jewel
	}
	return 0
}

func (x *ShopProduct) GetPriceJpy() int32 {
	if x != nil {
		return x.PriceJpy
	}
	return 0
}

type ShopProductList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ShopProduct `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShopProductList) Reset() {
	*x = ShopProductList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopProductList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopProductList) ProtoMessage() {}

func (x *ShopProductList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopProductList.ProtoReflect.Descriptor instead.
func (*ShopProductList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{345}
}

func (x *ShopProductList) GetList() []*ShopProduct {
	if x != nil {
		return x.List
	}
	return nil
}

type Story struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 penum.StoryType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.StoryType" json:"type,omitempty"`
	CharacterId          string          `protobuf:"bytes,3,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Title                string          `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	ThumbnailAssetId     string          `protobuf:"bytes,5,opt,name=thumbnailAssetId,proto3" json:"thumbnailAssetId,omitempty"`
	AdvAssetId           string          `protobuf:"bytes,6,opt,name=advAssetId,proto3" json:"advAssetId,omitempty"`
	ViewConditionSetId   string          `protobuf:"bytes,7,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId string          `protobuf:"bytes,8,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	Reward               *pcommon.Reward `protobuf:"bytes,12,opt,name=reward,proto3" json:"reward,omitempty"`
	PreviousStoryId      string          `protobuf:"bytes,13,opt,name=previousStoryId,proto3" json:"previousStoryId,omitempty"`
	Order                int32           `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Story) Reset() {
	*x = Story{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Story) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Story) ProtoMessage() {}

func (x *Story) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Story.ProtoReflect.Descriptor instead.
func (*Story) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{346}
}

func (x *Story) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Story) GetType() penum.StoryType {
	if x != nil {
		return x.Type
	}
	return penum.StoryType(0)
}

func (x *Story) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *Story) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Story) GetThumbnailAssetId() string {
	if x != nil {
		return x.ThumbnailAssetId
	}
	return ""
}

func (x *Story) GetAdvAssetId() string {
	if x != nil {
		return x.AdvAssetId
	}
	return ""
}

func (x *Story) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Story) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Story) GetReward() *pcommon.Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Story) GetPreviousStoryId() string {
	if x != nil {
		return x.PreviousStoryId
	}
	return ""
}

func (x *Story) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type StoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                     string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	StoryEventType            penum.StoryEventType `protobuf:"varint,3,opt,name=storyEventType,proto3,enum=penum.StoryEventType" json:"storyEventType,omitempty"`
	TitleAssetId              string               `protobuf:"bytes,4,opt,name=titleAssetId,proto3" json:"titleAssetId,omitempty"`
	BannerAssetId             string               `protobuf:"bytes,6,opt,name=bannerAssetId,proto3" json:"bannerAssetId,omitempty"`
	StoryGroupId              string               `protobuf:"bytes,7,opt,name=storyGroupId,proto3" json:"storyGroupId,omitempty"`
	IdolCardSkinBeforeAssetId string               `protobuf:"bytes,21,opt,name=idolCardSkinBeforeAssetId,proto3" json:"idolCardSkinBeforeAssetId,omitempty"`
	IdolCardSkinAfterAssetId  string               `protobuf:"bytes,22,opt,name=idolCardSkinAfterAssetId,proto3" json:"idolCardSkinAfterAssetId,omitempty"`
	Order                     int32                `protobuf:"varint,103,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *StoryEvent) Reset() {
	*x = StoryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryEvent) ProtoMessage() {}

func (x *StoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryEvent.ProtoReflect.Descriptor instead.
func (*StoryEvent) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{347}
}

func (x *StoryEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StoryEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StoryEvent) GetStoryEventType() penum.StoryEventType {
	if x != nil {
		return x.StoryEventType
	}
	return penum.StoryEventType(0)
}

func (x *StoryEvent) GetTitleAssetId() string {
	if x != nil {
		return x.TitleAssetId
	}
	return ""
}

func (x *StoryEvent) GetBannerAssetId() string {
	if x != nil {
		return x.BannerAssetId
	}
	return ""
}

func (x *StoryEvent) GetStoryGroupId() string {
	if x != nil {
		return x.StoryGroupId
	}
	return ""
}

func (x *StoryEvent) GetIdolCardSkinBeforeAssetId() string {
	if x != nil {
		return x.IdolCardSkinBeforeAssetId
	}
	return ""
}

func (x *StoryEvent) GetIdolCardSkinAfterAssetId() string {
	if x != nil {
		return x.IdolCardSkinAfterAssetId
	}
	return ""
}

func (x *StoryEvent) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type StoryEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StoryEvent `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StoryEventList) Reset() {
	*x = StoryEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryEventList) ProtoMessage() {}

func (x *StoryEventList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryEventList.ProtoReflect.Descriptor instead.
func (*StoryEventList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{348}
}

func (x *StoryEventList) GetList() []*StoryEvent {
	if x != nil {
		return x.List
	}
	return nil
}

type StoryGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StoryType             penum.StoryType `protobuf:"varint,2,opt,name=storyType,proto3,enum=penum.StoryType" json:"storyType,omitempty"`
	HeaderAssetId         string          `protobuf:"bytes,3,opt,name=headerAssetId,proto3" json:"headerAssetId,omitempty"`
	StoryThumbnailAssetId string          `protobuf:"bytes,4,opt,name=storyThumbnailAssetId,proto3" json:"storyThumbnailAssetId,omitempty"`
	ViewConditionSetId    string          `protobuf:"bytes,5,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	CharacterId           string          `protobuf:"bytes,6,opt,name=characterId,proto3" json:"characterId,omitempty"`
	StoryIds              []string        `protobuf:"bytes,7,rep,name=storyIds,proto3" json:"storyIds,omitempty"`
	StoryEventId          string          `protobuf:"bytes,9,opt,name=storyEventId,proto3" json:"storyEventId,omitempty"`
	Order                 int32           `protobuf:"varint,8,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *StoryGroup) Reset() {
	*x = StoryGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryGroup) ProtoMessage() {}

func (x *StoryGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryGroup.ProtoReflect.Descriptor instead.
func (*StoryGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{349}
}

func (x *StoryGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StoryGroup) GetStoryType() penum.StoryType {
	if x != nil {
		return x.StoryType
	}
	return penum.StoryType(0)
}

func (x *StoryGroup) GetHeaderAssetId() string {
	if x != nil {
		return x.HeaderAssetId
	}
	return ""
}

func (x *StoryGroup) GetStoryThumbnailAssetId() string {
	if x != nil {
		return x.StoryThumbnailAssetId
	}
	return ""
}

func (x *StoryGroup) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *StoryGroup) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *StoryGroup) GetStoryIds() []string {
	if x != nil {
		return x.StoryIds
	}
	return nil
}

func (x *StoryGroup) GetStoryEventId() string {
	if x != nil {
		return x.StoryEventId
	}
	return ""
}

func (x *StoryGroup) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type StoryGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StoryGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StoryGroupList) Reset() {
	*x = StoryGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryGroupList) ProtoMessage() {}

func (x *StoryGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryGroupList.ProtoReflect.Descriptor instead.
func (*StoryGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{350}
}

func (x *StoryGroupList) GetList() []*StoryGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type StoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Story `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StoryList) Reset() {
	*x = StoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryList) ProtoMessage() {}

func (x *StoryList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryList.ProtoReflect.Descriptor instead.
func (*StoryList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{351}
}

func (x *StoryList) GetList() []*Story {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CharacterIds                          []string                             `protobuf:"bytes,2,rep,name=characterIds,proto3" json:"characterIds,omitempty"`
	Name                                  string                               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                                  penum.SupportCardType                `protobuf:"varint,5,opt,name=type,proto3,enum=penum.SupportCardType" json:"type,omitempty"`
	PlanType                              penum.ProducePlanType                `protobuf:"varint,6,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	Rarity                                penum.SupportCardRarity              `protobuf:"varint,7,opt,name=rarity,proto3,enum=penum.SupportCardRarity" json:"rarity,omitempty"`
	AssetId                               string                               `protobuf:"bytes,8,opt,name=assetId,proto3" json:"assetId,omitempty"`
	SupportCardLevelId                    string                               `protobuf:"bytes,9,opt,name=supportCardLevelId,proto3" json:"supportCardLevelId,omitempty"`
	SupportCardLevelLimitId               string                               `protobuf:"bytes,10,opt,name=supportCardLevelLimitId,proto3" json:"supportCardLevelLimitId,omitempty"`
	ProduceStoryIds                       []string                             `protobuf:"bytes,12,rep,name=produceStoryIds,proto3" json:"produceStoryIds,omitempty"`
	DisplayPositionX                      float32                              `protobuf:"fixed32,13,opt,name=displayPositionX,proto3" json:"displayPositionX,omitempty"`
	DisplayPositionY                      float32                              `protobuf:"fixed32,14,opt,name=displayPositionY,proto3" json:"displayPositionY,omitempty"`
	DisplayScale                          float32                              `protobuf:"fixed32,15,opt,name=displayScale,proto3" json:"displayScale,omitempty"`
	ExchangeReward                        *pcommon.Reward                      `protobuf:"bytes,19,opt,name=exchangeReward,proto3" json:"exchangeReward,omitempty"`
	IsLimited                             bool                                 `protobuf:"varint,20,opt,name=isLimited,proto3" json:"isLimited,omitempty"`
	ProduceCardUpgradePermil              int32                                `protobuf:"varint,21,opt,name=produceCardUpgradePermil,proto3" json:"produceCardUpgradePermil,omitempty"`
	UpgradeProduceCardSearchId            string                               `protobuf:"bytes,22,opt,name=upgradeProduceCardSearchId,proto3" json:"upgradeProduceCardSearchId,omitempty"`
	ProduceCardUpgradeLessonParameterType penum.ProduceParameterType           `protobuf:"varint,23,opt,name=produceCardUpgradeLessonParameterType,proto3,enum=penum.ProduceParameterType" json:"produceCardUpgradeLessonParameterType,omitempty"`
	UpgradeProduceCardDescriptions        []*pcommon.ProduceDescriptionElement `protobuf:"bytes,25,rep,name=upgradeProduceCardDescriptions,proto3" json:"upgradeProduceCardDescriptions,omitempty"`
	GashaSupportAnimationNumber           int32                                `protobuf:"varint,26,opt,name=gashaSupportAnimationNumber,proto3" json:"gashaSupportAnimationNumber,omitempty"`
	ViewStartTime                         int64                                `protobuf:"varint,98,opt,name=viewStartTime,proto3" json:"viewStartTime,omitempty"`
	Order                                 int64                                `protobuf:"varint,100,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SupportCard) Reset() {
	*x = SupportCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCard) ProtoMessage() {}

func (x *SupportCard) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCard.ProtoReflect.Descriptor instead.
func (*SupportCard) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{352}
}

func (x *SupportCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportCard) GetCharacterIds() []string {
	if x != nil {
		return x.CharacterIds
	}
	return nil
}

func (x *SupportCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SupportCard) GetType() penum.SupportCardType {
	if x != nil {
		return x.Type
	}
	return penum.SupportCardType(0)
}

func (x *SupportCard) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *SupportCard) GetRarity() penum.SupportCardRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.SupportCardRarity(0)
}

func (x *SupportCard) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *SupportCard) GetSupportCardLevelId() string {
	if x != nil {
		return x.SupportCardLevelId
	}
	return ""
}

func (x *SupportCard) GetSupportCardLevelLimitId() string {
	if x != nil {
		return x.SupportCardLevelLimitId
	}
	return ""
}

func (x *SupportCard) GetProduceStoryIds() []string {
	if x != nil {
		return x.ProduceStoryIds
	}
	return nil
}

func (x *SupportCard) GetDisplayPositionX() float32 {
	if x != nil {
		return x.DisplayPositionX
	}
	return 0
}

func (x *SupportCard) GetDisplayPositionY() float32 {
	if x != nil {
		return x.DisplayPositionY
	}
	return 0
}

func (x *SupportCard) GetDisplayScale() float32 {
	if x != nil {
		return x.DisplayScale
	}
	return 0
}

func (x *SupportCard) GetExchangeReward() *pcommon.Reward {
	if x != nil {
		return x.ExchangeReward
	}
	return nil
}

func (x *SupportCard) GetIsLimited() bool {
	if x != nil {
		return x.IsLimited
	}
	return false
}

func (x *SupportCard) GetProduceCardUpgradePermil() int32 {
	if x != nil {
		return x.ProduceCardUpgradePermil
	}
	return 0
}

func (x *SupportCard) GetUpgradeProduceCardSearchId() string {
	if x != nil {
		return x.UpgradeProduceCardSearchId
	}
	return ""
}

func (x *SupportCard) GetProduceCardUpgradeLessonParameterType() penum.ProduceParameterType {
	if x != nil {
		return x.ProduceCardUpgradeLessonParameterType
	}
	return penum.ProduceParameterType(0)
}

func (x *SupportCard) GetUpgradeProduceCardDescriptions() []*pcommon.ProduceDescriptionElement {
	if x != nil {
		return x.UpgradeProduceCardDescriptions
	}
	return nil
}

func (x *SupportCard) GetGashaSupportAnimationNumber() int32 {
	if x != nil {
		return x.GashaSupportAnimationNumber
	}
	return 0
}

func (x *SupportCard) GetViewStartTime() int64 {
	if x != nil {
		return x.ViewStartTime
	}
	return 0
}

func (x *SupportCard) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SupportCardBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rarity         penum.SupportCardRarity `protobuf:"varint,1,opt,name=rarity,proto3,enum=penum.SupportCardRarity" json:"rarity,omitempty"`
	Level          int32                   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	BonusPermyriad int32                   `protobuf:"varint,3,opt,name=bonusPermyriad,proto3" json:"bonusPermyriad,omitempty"`
}

func (x *SupportCardBonus) Reset() {
	*x = SupportCardBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardBonus) ProtoMessage() {}

func (x *SupportCardBonus) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardBonus.ProtoReflect.Descriptor instead.
func (*SupportCardBonus) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{353}
}

func (x *SupportCardBonus) GetRarity() penum.SupportCardRarity {
	if x != nil {
		return x.Rarity
	}
	return penum.SupportCardRarity(0)
}

func (x *SupportCardBonus) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SupportCardBonus) GetBonusPermyriad() int32 {
	if x != nil {
		return x.BonusPermyriad
	}
	return 0
}

type SupportCardBonusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardBonus `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardBonusList) Reset() {
	*x = SupportCardBonusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardBonusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardBonusList) ProtoMessage() {}

func (x *SupportCardBonusList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardBonusList.ProtoReflect.Descriptor instead.
func (*SupportCardBonusList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{354}
}

func (x *SupportCardBonusList) GetList() []*SupportCardBonus {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardFlavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCardId string   `protobuf:"bytes,1,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	Number        int32    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	CharacterIds  []string `protobuf:"bytes,3,rep,name=characterIds,proto3" json:"characterIds,omitempty"`
	Text          string   `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	VoiceAssetId  string   `protobuf:"bytes,6,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *SupportCardFlavor) Reset() {
	*x = SupportCardFlavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardFlavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardFlavor) ProtoMessage() {}

func (x *SupportCardFlavor) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardFlavor.ProtoReflect.Descriptor instead.
func (*SupportCardFlavor) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{355}
}

func (x *SupportCardFlavor) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *SupportCardFlavor) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SupportCardFlavor) GetCharacterIds() []string {
	if x != nil {
		return x.CharacterIds
	}
	return nil
}

func (x *SupportCardFlavor) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SupportCardFlavor) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type SupportCardFlavorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardFlavor `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardFlavorList) Reset() {
	*x = SupportCardFlavorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardFlavorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardFlavorList) ProtoMessage() {}

func (x *SupportCardFlavorList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardFlavorList.ProtoReflect.Descriptor instead.
func (*SupportCardFlavorList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{356}
}

func (x *SupportCardFlavorList) GetList() []*SupportCardFlavor {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level    int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TotalExp int32  `protobuf:"varint,3,opt,name=totalExp,proto3" json:"totalExp,omitempty"`
}

func (x *SupportCardLevel) Reset() {
	*x = SupportCardLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardLevel) ProtoMessage() {}

func (x *SupportCardLevel) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardLevel.ProtoReflect.Descriptor instead.
func (*SupportCardLevel) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{357}
}

func (x *SupportCardLevel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportCardLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SupportCardLevel) GetTotalExp() int32 {
	if x != nil {
		return x.TotalExp
	}
	return 0
}

type SupportCardLevelLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rank       penum.SupportCardLevelLimitRank `protobuf:"varint,2,opt,name=rank,proto3,enum=penum.SupportCardLevelLimitRank" json:"rank,omitempty"`
	LevelLimit int32                           `protobuf:"varint,3,opt,name=levelLimit,proto3" json:"levelLimit,omitempty"`
}

func (x *SupportCardLevelLimit) Reset() {
	*x = SupportCardLevelLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardLevelLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardLevelLimit) ProtoMessage() {}

func (x *SupportCardLevelLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardLevelLimit.ProtoReflect.Descriptor instead.
func (*SupportCardLevelLimit) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{358}
}

func (x *SupportCardLevelLimit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportCardLevelLimit) GetRank() penum.SupportCardLevelLimitRank {
	if x != nil {
		return x.Rank
	}
	return penum.SupportCardLevelLimitRank(0)
}

func (x *SupportCardLevelLimit) GetLevelLimit() int32 {
	if x != nil {
		return x.LevelLimit
	}
	return 0
}

type SupportCardLevelLimitList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardLevelLimit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardLevelLimitList) Reset() {
	*x = SupportCardLevelLimitList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardLevelLimitList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardLevelLimitList) ProtoMessage() {}

func (x *SupportCardLevelLimitList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardLevelLimitList.ProtoReflect.Descriptor instead.
func (*SupportCardLevelLimitList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{359}
}

func (x *SupportCardLevelLimitList) GetList() []*SupportCardLevelLimit {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardLevelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardLevel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardLevelList) Reset() {
	*x = SupportCardLevelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardLevelList) ProtoMessage() {}

func (x *SupportCardLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardLevelList.ProtoReflect.Descriptor instead.
func (*SupportCardLevelList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{360}
}

func (x *SupportCardLevelList) GetList() []*SupportCardLevel {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*pcommon.SupportCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardList) Reset() {
	*x = SupportCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardList) ProtoMessage() {}

func (x *SupportCardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardList.ProtoReflect.Descriptor instead.
func (*SupportCardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{361}
}

func (x *SupportCardList) GetList() []*pcommon.SupportCard {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardProduceSkillLevelAssist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCardId     string `protobuf:"bytes,1,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	ProduceSkillId    string `protobuf:"bytes,2,opt,name=produceSkillId,proto3" json:"produceSkillId,omitempty"`
	ProduceSkillLevel int32  `protobuf:"varint,3,opt,name=produceSkillLevel,proto3" json:"produceSkillLevel,omitempty"`
	SupportCardLevel  int32  `protobuf:"varint,4,opt,name=supportCardLevel,proto3" json:"supportCardLevel,omitempty"`
	Order             int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SupportCardProduceSkillLevelAssist) Reset() {
	*x = SupportCardProduceSkillLevelAssist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelAssist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelAssist) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelAssist) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelAssist.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelAssist) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{362}
}

func (x *SupportCardProduceSkillLevelAssist) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelAssist) GetProduceSkillId() string {
	if x != nil {
		return x.ProduceSkillId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelAssist) GetProduceSkillLevel() int32 {
	if x != nil {
		return x.ProduceSkillLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelAssist) GetSupportCardLevel() int32 {
	if x != nil {
		return x.SupportCardLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelAssist) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SupportCardProduceSkillLevelAssistList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardProduceSkillLevelAssist `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardProduceSkillLevelAssistList) Reset() {
	*x = SupportCardProduceSkillLevelAssistList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelAssistList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelAssistList) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelAssistList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelAssistList.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelAssistList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{363}
}

func (x *SupportCardProduceSkillLevelAssistList) GetList() []*SupportCardProduceSkillLevelAssist {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardProduceSkillLevelDance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCardId     string `protobuf:"bytes,1,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	ProduceSkillId    string `protobuf:"bytes,2,opt,name=produceSkillId,proto3" json:"produceSkillId,omitempty"`
	ProduceSkillLevel int32  `protobuf:"varint,3,opt,name=produceSkillLevel,proto3" json:"produceSkillLevel,omitempty"`
	SupportCardLevel  int32  `protobuf:"varint,4,opt,name=supportCardLevel,proto3" json:"supportCardLevel,omitempty"`
	Order             int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SupportCardProduceSkillLevelDance) Reset() {
	*x = SupportCardProduceSkillLevelDance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelDance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelDance) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelDance) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelDance.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelDance) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{364}
}

func (x *SupportCardProduceSkillLevelDance) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelDance) GetProduceSkillId() string {
	if x != nil {
		return x.ProduceSkillId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelDance) GetProduceSkillLevel() int32 {
	if x != nil {
		return x.ProduceSkillLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelDance) GetSupportCardLevel() int32 {
	if x != nil {
		return x.SupportCardLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelDance) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SupportCardProduceSkillLevelDanceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardProduceSkillLevelDance `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardProduceSkillLevelDanceList) Reset() {
	*x = SupportCardProduceSkillLevelDanceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelDanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelDanceList) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelDanceList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelDanceList.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelDanceList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{365}
}

func (x *SupportCardProduceSkillLevelDanceList) GetList() []*SupportCardProduceSkillLevelDance {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardProduceSkillLevelVisual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCardId     string `protobuf:"bytes,1,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	ProduceSkillId    string `protobuf:"bytes,2,opt,name=produceSkillId,proto3" json:"produceSkillId,omitempty"`
	ProduceSkillLevel int32  `protobuf:"varint,3,opt,name=produceSkillLevel,proto3" json:"produceSkillLevel,omitempty"`
	SupportCardLevel  int32  `protobuf:"varint,4,opt,name=supportCardLevel,proto3" json:"supportCardLevel,omitempty"`
	Order             int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SupportCardProduceSkillLevelVisual) Reset() {
	*x = SupportCardProduceSkillLevelVisual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelVisual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelVisual) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelVisual) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelVisual.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelVisual) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{366}
}

func (x *SupportCardProduceSkillLevelVisual) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelVisual) GetProduceSkillId() string {
	if x != nil {
		return x.ProduceSkillId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelVisual) GetProduceSkillLevel() int32 {
	if x != nil {
		return x.ProduceSkillLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelVisual) GetSupportCardLevel() int32 {
	if x != nil {
		return x.SupportCardLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelVisual) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SupportCardProduceSkillLevelVisualList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardProduceSkillLevelVisual `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardProduceSkillLevelVisualList) Reset() {
	*x = SupportCardProduceSkillLevelVisualList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelVisualList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelVisualList) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelVisualList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelVisualList.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelVisualList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{367}
}

func (x *SupportCardProduceSkillLevelVisualList) GetList() []*SupportCardProduceSkillLevelVisual {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardProduceSkillLevelVocal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCardId     string `protobuf:"bytes,1,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	ProduceSkillId    string `protobuf:"bytes,2,opt,name=produceSkillId,proto3" json:"produceSkillId,omitempty"`
	ProduceSkillLevel int32  `protobuf:"varint,3,opt,name=produceSkillLevel,proto3" json:"produceSkillLevel,omitempty"`
	SupportCardLevel  int32  `protobuf:"varint,4,opt,name=supportCardLevel,proto3" json:"supportCardLevel,omitempty"`
	Order             int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SupportCardProduceSkillLevelVocal) Reset() {
	*x = SupportCardProduceSkillLevelVocal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelVocal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelVocal) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelVocal) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelVocal.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelVocal) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{368}
}

func (x *SupportCardProduceSkillLevelVocal) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelVocal) GetProduceSkillId() string {
	if x != nil {
		return x.ProduceSkillId
	}
	return ""
}

func (x *SupportCardProduceSkillLevelVocal) GetProduceSkillLevel() int32 {
	if x != nil {
		return x.ProduceSkillLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelVocal) GetSupportCardLevel() int32 {
	if x != nil {
		return x.SupportCardLevel
	}
	return 0
}

func (x *SupportCardProduceSkillLevelVocal) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SupportCardProduceSkillLevelVocalList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardProduceSkillLevelVocal `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardProduceSkillLevelVocalList) Reset() {
	*x = SupportCardProduceSkillLevelVocalList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardProduceSkillLevelVocalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardProduceSkillLevelVocalList) ProtoMessage() {}

func (x *SupportCardProduceSkillLevelVocalList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardProduceSkillLevelVocalList.ProtoReflect.Descriptor instead.
func (*SupportCardProduceSkillLevelVocalList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{369}
}

func (x *SupportCardProduceSkillLevelVocalList) GetList() []*SupportCardProduceSkillLevelVocal {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardSimulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportCardSimulationGroupId string `protobuf:"bytes,1,opt,name=supportCardSimulationGroupId,proto3" json:"supportCardSimulationGroupId,omitempty"`
	SupportCardId                string `protobuf:"bytes,2,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
}

func (x *SupportCardSimulation) Reset() {
	*x = SupportCardSimulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardSimulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardSimulation) ProtoMessage() {}

func (x *SupportCardSimulation) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardSimulation.ProtoReflect.Descriptor instead.
func (*SupportCardSimulation) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{370}
}

func (x *SupportCardSimulation) GetSupportCardSimulationGroupId() string {
	if x != nil {
		return x.SupportCardSimulationGroupId
	}
	return ""
}

func (x *SupportCardSimulation) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

type SupportCardSimulationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SupportCardSimulationGroup) Reset() {
	*x = SupportCardSimulationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardSimulationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardSimulationGroup) ProtoMessage() {}

func (x *SupportCardSimulationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardSimulationGroup.ProtoReflect.Descriptor instead.
func (*SupportCardSimulationGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{371}
}

func (x *SupportCardSimulationGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportCardSimulationGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SupportCardSimulationGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardSimulationGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardSimulationGroupList) Reset() {
	*x = SupportCardSimulationGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardSimulationGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardSimulationGroupList) ProtoMessage() {}

func (x *SupportCardSimulationGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardSimulationGroupList.ProtoReflect.Descriptor instead.
func (*SupportCardSimulationGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{372}
}

func (x *SupportCardSimulationGroupList) GetList() []*SupportCardSimulationGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type SupportCardSimulationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SupportCardSimulation `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SupportCardSimulationList) Reset() {
	*x = SupportCardSimulationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportCardSimulationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportCardSimulationList) ProtoMessage() {}

func (x *SupportCardSimulationList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportCardSimulationList.ProtoReflect.Descriptor instead.
func (*SupportCardSimulationList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{373}
}

func (x *SupportCardSimulationList) GetList() []*SupportCardSimulation {
	if x != nil {
		return x.List
	}
	return nil
}

type Terms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type penum.TermsType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.TermsType" json:"type,omitempty"`
	Name string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url  string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Terms) Reset() {
	*x = Terms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Terms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Terms) ProtoMessage() {}

func (x *Terms) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Terms.ProtoReflect.Descriptor instead.
func (*Terms) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{374}
}

func (x *Terms) GetType() penum.TermsType {
	if x != nil {
		return x.Type
	}
	return penum.TermsType(0)
}

func (x *Terms) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Terms) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TermsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Terms `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TermsList) Reset() {
	*x = TermsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsList) ProtoMessage() {}

func (x *TermsList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsList.ProtoReflect.Descriptor instead.
func (*TermsList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{375}
}

func (x *TermsList) GetList() []*Terms {
	if x != nil {
		return x.List
	}
	return nil
}

type Tips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type               penum.TipsType     `protobuf:"varint,2,opt,name=type,proto3,enum=penum.TipsType" json:"type,omitempty"`
	Title              string             `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description        string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CharacterId        string             `protobuf:"bytes,5,opt,name=characterId,proto3" json:"characterId,omitempty"`
	MediaId            string             `protobuf:"bytes,6,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	ViewAreaType       penum.ViewAreaType `protobuf:"varint,7,opt,name=viewAreaType,proto3,enum=penum.ViewAreaType" json:"viewAreaType,omitempty"`
	ViewConditionSetId string             `protobuf:"bytes,8,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	StartTime          int64              `protobuf:"varint,9,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            int64              `protobuf:"varint,10,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *Tips) Reset() {
	*x = Tips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tips) ProtoMessage() {}

func (x *Tips) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tips.ProtoReflect.Descriptor instead.
func (*Tips) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{376}
}

func (x *Tips) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tips) GetType() penum.TipsType {
	if x != nil {
		return x.Type
	}
	return penum.TipsType(0)
}

func (x *Tips) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tips) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tips) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *Tips) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *Tips) GetViewAreaType() penum.ViewAreaType {
	if x != nil {
		return x.ViewAreaType
	}
	return penum.ViewAreaType(0)
}

func (x *Tips) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Tips) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Tips) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TipsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Tips `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TipsList) Reset() {
	*x = TipsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsList) ProtoMessage() {}

func (x *TipsList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsList.ProtoReflect.Descriptor instead.
func (*TipsList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{377}
}

func (x *TipsList) GetList() []*Tips {
	if x != nil {
		return x.List
	}
	return nil
}

type TitleAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order        int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Number       int32  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	NoLoop       bool   `protobuf:"varint,4,opt,name=noLoop,proto3" json:"noLoop,omitempty"`
	MovieAssetId string `protobuf:"bytes,5,opt,name=movieAssetId,proto3" json:"movieAssetId,omitempty"`
	StartTime    int64  `protobuf:"varint,100,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      int64  `protobuf:"varint,101,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Priority     int32  `protobuf:"varint,102,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *TitleAsset) Reset() {
	*x = TitleAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleAsset) ProtoMessage() {}

func (x *TitleAsset) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleAsset.ProtoReflect.Descriptor instead.
func (*TitleAsset) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{378}
}

func (x *TitleAsset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TitleAsset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TitleAsset) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TitleAsset) GetNoLoop() bool {
	if x != nil {
		return x.NoLoop
	}
	return false
}

func (x *TitleAsset) GetMovieAssetId() string {
	if x != nil {
		return x.MovieAssetId
	}
	return ""
}

func (x *TitleAsset) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TitleAsset) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TitleAsset) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type TitleAssetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TitleAsset `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TitleAssetList) Reset() {
	*x = TitleAssetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleAssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleAssetList) ProtoMessage() {}

func (x *TitleAssetList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleAssetList.ProtoReflect.Descriptor instead.
func (*TitleAssetList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{379}
}

func (x *TitleAssetList) GetList() []*TitleAsset {
	if x != nil {
		return x.List
	}
	return nil
}

type TitleVoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceAssetId string `protobuf:"bytes,1,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
	StartTime    int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      int64  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *TitleVoice) Reset() {
	*x = TitleVoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleVoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleVoice) ProtoMessage() {}

func (x *TitleVoice) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleVoice.ProtoReflect.Descriptor instead.
func (*TitleVoice) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{380}
}

func (x *TitleVoice) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

func (x *TitleVoice) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TitleVoice) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TitleVoiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TitleVoice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TitleVoiceList) Reset() {
	*x = TitleVoiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleVoiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleVoiceList) ProtoMessage() {}

func (x *TitleVoiceList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleVoiceList.ProtoReflect.Descriptor instead.
func (*TitleVoiceList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{381}
}

func (x *TitleVoiceList) GetList() []*TitleVoice {
	if x != nil {
		return x.List
	}
	return nil
}

type Tower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CharacterId          string `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Title                string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ViewConditionSetId   string `protobuf:"bytes,4,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId string `protobuf:"bytes,5,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	AchievementId        string `protobuf:"bytes,6,opt,name=achievementId,proto3" json:"achievementId,omitempty"`
	Order                int32  `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Tower) Reset() {
	*x = Tower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tower) ProtoMessage() {}

func (x *Tower) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tower.ProtoReflect.Descriptor instead.
func (*Tower) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{382}
}

func (x *Tower) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tower) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *Tower) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tower) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Tower) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Tower) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *Tower) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type TowerLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerId              string `protobuf:"bytes,1,opt,name=towerId,proto3" json:"towerId,omitempty"`
	Number               int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	MaxSubMemoryCount    int32  `protobuf:"varint,3,opt,name=maxSubMemoryCount,proto3" json:"maxSubMemoryCount,omitempty"`
	ViewConditionSetId   string `protobuf:"bytes,4,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId string `protobuf:"bytes,5,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	BgmAssetId           string `protobuf:"bytes,40,opt,name=bgmAssetId,proto3" json:"bgmAssetId,omitempty"`
	WinTimelineAssetId   string `protobuf:"bytes,41,opt,name=winTimelineAssetId,proto3" json:"winTimelineAssetId,omitempty"`
	LoseTimelineAssetId  string `protobuf:"bytes,42,opt,name=loseTimelineAssetId,proto3" json:"loseTimelineAssetId,omitempty"`
	ExamTimelineAssetId  string `protobuf:"bytes,43,opt,name=examTimelineAssetId,proto3" json:"examTimelineAssetId,omitempty"`
}

func (x *TowerLayer) Reset() {
	*x = TowerLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLayer) ProtoMessage() {}

func (x *TowerLayer) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLayer.ProtoReflect.Descriptor instead.
func (*TowerLayer) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{383}
}

func (x *TowerLayer) GetTowerId() string {
	if x != nil {
		return x.TowerId
	}
	return ""
}

func (x *TowerLayer) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TowerLayer) GetMaxSubMemoryCount() int32 {
	if x != nil {
		return x.MaxSubMemoryCount
	}
	return 0
}

func (x *TowerLayer) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *TowerLayer) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *TowerLayer) GetBgmAssetId() string {
	if x != nil {
		return x.BgmAssetId
	}
	return ""
}

func (x *TowerLayer) GetWinTimelineAssetId() string {
	if x != nil {
		return x.WinTimelineAssetId
	}
	return ""
}

func (x *TowerLayer) GetLoseTimelineAssetId() string {
	if x != nil {
		return x.LoseTimelineAssetId
	}
	return ""
}

func (x *TowerLayer) GetExamTimelineAssetId() string {
	if x != nil {
		return x.ExamTimelineAssetId
	}
	return ""
}

type TowerLayerExam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerId                         string                      `protobuf:"bytes,1,opt,name=towerId,proto3" json:"towerId,omitempty"`
	Number                          int32                       `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	ExamEffectType                  penum.ProduceExamEffectType `protobuf:"varint,3,opt,name=examEffectType,proto3,enum=penum.ProduceExamEffectType" json:"examEffectType,omitempty"`
	ParameterBaseLine               int32                       `protobuf:"varint,4,opt,name=parameterBaseLine,proto3" json:"parameterBaseLine,omitempty"`
	BaseScore                       int32                       `protobuf:"varint,5,opt,name=baseScore,proto3" json:"baseScore,omitempty"`
	ProduceItemIds                  []string                    `protobuf:"bytes,6,rep,name=produceItemIds,proto3" json:"produceItemIds,omitempty"`
	ProduceExamGimmickEffectGroupId string                      `protobuf:"bytes,7,opt,name=produceExamGimmickEffectGroupId,proto3" json:"produceExamGimmickEffectGroupId,omitempty"`
	ProduceExamBattleConfigId       string                      `protobuf:"bytes,8,opt,name=produceExamBattleConfigId,proto3" json:"produceExamBattleConfigId,omitempty"`
	ProduceExamBattleNpcGroupId     string                      `protobuf:"bytes,9,opt,name=produceExamBattleNpcGroupId,proto3" json:"produceExamBattleNpcGroupId,omitempty"`
}

func (x *TowerLayerExam) Reset() {
	*x = TowerLayerExam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLayerExam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLayerExam) ProtoMessage() {}

func (x *TowerLayerExam) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLayerExam.ProtoReflect.Descriptor instead.
func (*TowerLayerExam) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{384}
}

func (x *TowerLayerExam) GetTowerId() string {
	if x != nil {
		return x.TowerId
	}
	return ""
}

func (x *TowerLayerExam) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TowerLayerExam) GetExamEffectType() penum.ProduceExamEffectType {
	if x != nil {
		return x.ExamEffectType
	}
	return penum.ProduceExamEffectType(0)
}

func (x *TowerLayerExam) GetParameterBaseLine() int32 {
	if x != nil {
		return x.ParameterBaseLine
	}
	return 0
}

func (x *TowerLayerExam) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *TowerLayerExam) GetProduceItemIds() []string {
	if x != nil {
		return x.ProduceItemIds
	}
	return nil
}

func (x *TowerLayerExam) GetProduceExamGimmickEffectGroupId() string {
	if x != nil {
		return x.ProduceExamGimmickEffectGroupId
	}
	return ""
}

func (x *TowerLayerExam) GetProduceExamBattleConfigId() string {
	if x != nil {
		return x.ProduceExamBattleConfigId
	}
	return ""
}

func (x *TowerLayerExam) GetProduceExamBattleNpcGroupId() string {
	if x != nil {
		return x.ProduceExamBattleNpcGroupId
	}
	return ""
}

type TowerLayerExamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TowerLayerExam `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TowerLayerExamList) Reset() {
	*x = TowerLayerExamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLayerExamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLayerExamList) ProtoMessage() {}

func (x *TowerLayerExamList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLayerExamList.ProtoReflect.Descriptor instead.
func (*TowerLayerExamList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{385}
}

func (x *TowerLayerExamList) GetList() []*TowerLayerExam {
	if x != nil {
		return x.List
	}
	return nil
}

type TowerLayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TowerLayer `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TowerLayerList) Reset() {
	*x = TowerLayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLayerList) ProtoMessage() {}

func (x *TowerLayerList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLayerList.ProtoReflect.Descriptor instead.
func (*TowerLayerList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{386}
}

func (x *TowerLayerList) GetList() []*TowerLayer {
	if x != nil {
		return x.List
	}
	return nil
}

type TowerLayerRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerId                  string   `protobuf:"bytes,1,opt,name=towerId,proto3" json:"towerId,omitempty"`
	Number                   int32    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Rank                     int32    `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	ExamBattleRank           int32    `protobuf:"varint,4,opt,name=examBattleRank,proto3" json:"examBattleRank,omitempty"`
	ProduceExamTriggerIds    []string `protobuf:"bytes,5,rep,name=produceExamTriggerIds,proto3" json:"produceExamTriggerIds,omitempty"`
	ProduceExamTriggerCounts []int32  `protobuf:"varint,6,rep,packed,name=produceExamTriggerCounts,proto3" json:"produceExamTriggerCounts,omitempty"`
}

func (x *TowerLayerRank) Reset() {
	*x = TowerLayerRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLayerRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLayerRank) ProtoMessage() {}

func (x *TowerLayerRank) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLayerRank.ProtoReflect.Descriptor instead.
func (*TowerLayerRank) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{387}
}

func (x *TowerLayerRank) GetTowerId() string {
	if x != nil {
		return x.TowerId
	}
	return ""
}

func (x *TowerLayerRank) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TowerLayerRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TowerLayerRank) GetExamBattleRank() int32 {
	if x != nil {
		return x.ExamBattleRank
	}
	return 0
}

func (x *TowerLayerRank) GetProduceExamTriggerIds() []string {
	if x != nil {
		return x.ProduceExamTriggerIds
	}
	return nil
}

func (x *TowerLayerRank) GetProduceExamTriggerCounts() []int32 {
	if x != nil {
		return x.ProduceExamTriggerCounts
	}
	return nil
}

type TowerLayerRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TowerLayerRank `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TowerLayerRankList) Reset() {
	*x = TowerLayerRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerLayerRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerLayerRankList) ProtoMessage() {}

func (x *TowerLayerRankList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerLayerRankList.ProtoReflect.Descriptor instead.
func (*TowerLayerRankList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{388}
}

func (x *TowerLayerRankList) GetList() []*TowerLayerRank {
	if x != nil {
		return x.List
	}
	return nil
}

type TowerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Tower `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TowerList) Reset() {
	*x = TowerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerList) ProtoMessage() {}

func (x *TowerList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerList.ProtoReflect.Descriptor instead.
func (*TowerList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{389}
}

func (x *TowerList) GetList() []*Tower {
	if x != nil {
		return x.List
	}
	return nil
}

type TowerTotalClearRankReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      int32           `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Reward    *pcommon.Reward `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	IsFeature bool            `protobuf:"varint,6,opt,name=isFeature,proto3" json:"isFeature,omitempty"`
}

func (x *TowerTotalClearRankReward) Reset() {
	*x = TowerTotalClearRankReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerTotalClearRankReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerTotalClearRankReward) ProtoMessage() {}

func (x *TowerTotalClearRankReward) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerTotalClearRankReward.ProtoReflect.Descriptor instead.
func (*TowerTotalClearRankReward) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{390}
}

func (x *TowerTotalClearRankReward) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TowerTotalClearRankReward) GetReward() *pcommon.Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *TowerTotalClearRankReward) GetIsFeature() bool {
	if x != nil {
		return x.IsFeature
	}
	return false
}

type TowerTotalClearRankRewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TowerTotalClearRankReward `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TowerTotalClearRankRewardList) Reset() {
	*x = TowerTotalClearRankRewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerTotalClearRankRewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerTotalClearRankRewardList) ProtoMessage() {}

func (x *TowerTotalClearRankRewardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerTotalClearRankRewardList.ProtoReflect.Descriptor instead.
func (*TowerTotalClearRankRewardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{391}
}

func (x *TowerTotalClearRankRewardList) GetList() []*TowerTotalClearRankReward {
	if x != nil {
		return x.List
	}
	return nil
}

type Tutorial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TutorialType               penum.TutorialType                   `protobuf:"varint,1,opt,name=tutorialType,proto3,enum=penum.TutorialType" json:"tutorialType,omitempty"`
	IdolCardId                 string                               `protobuf:"bytes,2,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	Step                       int32                                `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	SubStep                    int32                                `protobuf:"varint,4,opt,name=subStep,proto3" json:"subStep,omitempty"`
	NavigationType             penum.TutorialNavigationType         `protobuf:"varint,5,opt,name=navigationType,proto3,enum=penum.TutorialNavigationType" json:"navigationType,omitempty"`
	NavigationPositionType     penum.TutorialNavigationPositionType `protobuf:"varint,6,opt,name=navigationPositionType,proto3,enum=penum.TutorialNavigationPositionType" json:"navigationPositionType,omitempty"`
	Title                      string                               `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Texts                      []string                             `protobuf:"bytes,8,rep,name=texts,proto3" json:"texts,omitempty"`
	AssetIds                   []string                             `protobuf:"bytes,9,rep,name=assetIds,proto3" json:"assetIds,omitempty"`
	AdvAssetId                 string                               `protobuf:"bytes,10,opt,name=advAssetId,proto3" json:"advAssetId,omitempty"`
	TutorialProduceCommandType penum.TutorialProduceCommandType     `protobuf:"varint,99,opt,name=tutorialProduceCommandType,proto3,enum=penum.TutorialProduceCommandType" json:"tutorialProduceCommandType,omitempty"`
}

func (x *Tutorial) Reset() {
	*x = Tutorial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tutorial) ProtoMessage() {}

func (x *Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tutorial.ProtoReflect.Descriptor instead.
func (*Tutorial) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{392}
}

func (x *Tutorial) GetTutorialType() penum.TutorialType {
	if x != nil {
		return x.TutorialType
	}
	return penum.TutorialType(0)
}

func (x *Tutorial) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *Tutorial) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Tutorial) GetSubStep() int32 {
	if x != nil {
		return x.SubStep
	}
	return 0
}

func (x *Tutorial) GetNavigationType() penum.TutorialNavigationType {
	if x != nil {
		return x.NavigationType
	}
	return penum.TutorialNavigationType(0)
}

func (x *Tutorial) GetNavigationPositionType() penum.TutorialNavigationPositionType {
	if x != nil {
		return x.NavigationPositionType
	}
	return penum.TutorialNavigationPositionType(0)
}

func (x *Tutorial) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tutorial) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *Tutorial) GetAssetIds() []string {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

func (x *Tutorial) GetAdvAssetId() string {
	if x != nil {
		return x.AdvAssetId
	}
	return ""
}

func (x *Tutorial) GetTutorialProduceCommandType() penum.TutorialProduceCommandType {
	if x != nil {
		return x.TutorialProduceCommandType
	}
	return penum.TutorialProduceCommandType(0)
}

type TutorialCharacterVoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId string                           `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Type        penum.TutorialCharacterVoiceType `protobuf:"varint,2,opt,name=type,proto3,enum=penum.TutorialCharacterVoiceType" json:"type,omitempty"`
	Number      int32                            `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	AssetId     string                           `protobuf:"bytes,4,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (x *TutorialCharacterVoice) Reset() {
	*x = TutorialCharacterVoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialCharacterVoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialCharacterVoice) ProtoMessage() {}

func (x *TutorialCharacterVoice) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialCharacterVoice.ProtoReflect.Descriptor instead.
func (*TutorialCharacterVoice) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{393}
}

func (x *TutorialCharacterVoice) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *TutorialCharacterVoice) GetType() penum.TutorialCharacterVoiceType {
	if x != nil {
		return x.Type
	}
	return penum.TutorialCharacterVoiceType(0)
}

func (x *TutorialCharacterVoice) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TutorialCharacterVoice) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type TutorialCharacterVoiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TutorialCharacterVoice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TutorialCharacterVoiceList) Reset() {
	*x = TutorialCharacterVoiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialCharacterVoiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialCharacterVoiceList) ProtoMessage() {}

func (x *TutorialCharacterVoiceList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialCharacterVoiceList.ProtoReflect.Descriptor instead.
func (*TutorialCharacterVoiceList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{394}
}

func (x *TutorialCharacterVoiceList) GetList() []*TutorialCharacterVoice {
	if x != nil {
		return x.List
	}
	return nil
}

type TutorialList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Tutorial `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TutorialList) Reset() {
	*x = TutorialList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialList) ProtoMessage() {}

func (x *TutorialList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialList.ProtoReflect.Descriptor instead.
func (*TutorialList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{395}
}

func (x *TutorialList) GetList() []*Tutorial {
	if x != nil {
		return x.List
	}
	return nil
}

type TutorialProduce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TutorialType                 penum.TutorialType `protobuf:"varint,1,opt,name=tutorialType,proto3,enum=penum.TutorialType" json:"tutorialType,omitempty"`
	IdolCardId                   string             `protobuf:"bytes,2,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	ProduceCardIds               []string           `protobuf:"bytes,3,rep,name=produceCardIds,proto3" json:"produceCardIds,omitempty"`
	ExamSettingId                string             `protobuf:"bytes,4,opt,name=examSettingId,proto3" json:"examSettingId,omitempty"`
	ProduceSettingId             string             `protobuf:"bytes,5,opt,name=produceSettingId,proto3" json:"produceSettingId,omitempty"`
	IdolCardParameterGrowthLimit int32              `protobuf:"varint,6,opt,name=idolCardParameterGrowthLimit,proto3" json:"idolCardParameterGrowthLimit,omitempty"`
	ProduceNavigationNormalId    string             `protobuf:"bytes,7,opt,name=produceNavigationNormalId,proto3" json:"produceNavigationNormalId,omitempty"`
	ProduceNavigationAuditionId  string             `protobuf:"bytes,8,opt,name=produceNavigationAuditionId,proto3" json:"produceNavigationAuditionId,omitempty"`
	MusicId                      string             `protobuf:"bytes,9,opt,name=musicId,proto3" json:"musicId,omitempty"`
	EnvironmentAssetId           string             `protobuf:"bytes,10,opt,name=environmentAssetId,proto3" json:"environmentAssetId,omitempty"`
	TimelineAssetId              string             `protobuf:"bytes,11,opt,name=timelineAssetId,proto3" json:"timelineAssetId,omitempty"`
	MemoryGiftId                 string             `protobuf:"bytes,14,opt,name=memoryGiftId,proto3" json:"memoryGiftId,omitempty"`
}

func (x *TutorialProduce) Reset() {
	*x = TutorialProduce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialProduce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialProduce) ProtoMessage() {}

func (x *TutorialProduce) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialProduce.ProtoReflect.Descriptor instead.
func (*TutorialProduce) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{396}
}

func (x *TutorialProduce) GetTutorialType() penum.TutorialType {
	if x != nil {
		return x.TutorialType
	}
	return penum.TutorialType(0)
}

func (x *TutorialProduce) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *TutorialProduce) GetProduceCardIds() []string {
	if x != nil {
		return x.ProduceCardIds
	}
	return nil
}

func (x *TutorialProduce) GetExamSettingId() string {
	if x != nil {
		return x.ExamSettingId
	}
	return ""
}

func (x *TutorialProduce) GetProduceSettingId() string {
	if x != nil {
		return x.ProduceSettingId
	}
	return ""
}

func (x *TutorialProduce) GetIdolCardParameterGrowthLimit() int32 {
	if x != nil {
		return x.IdolCardParameterGrowthLimit
	}
	return 0
}

func (x *TutorialProduce) GetProduceNavigationNormalId() string {
	if x != nil {
		return x.ProduceNavigationNormalId
	}
	return ""
}

func (x *TutorialProduce) GetProduceNavigationAuditionId() string {
	if x != nil {
		return x.ProduceNavigationAuditionId
	}
	return ""
}

func (x *TutorialProduce) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *TutorialProduce) GetEnvironmentAssetId() string {
	if x != nil {
		return x.EnvironmentAssetId
	}
	return ""
}

func (x *TutorialProduce) GetTimelineAssetId() string {
	if x != nil {
		return x.TimelineAssetId
	}
	return ""
}

func (x *TutorialProduce) GetMemoryGiftId() string {
	if x != nil {
		return x.MemoryGiftId
	}
	return ""
}

type TutorialProduceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TutorialProduce `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TutorialProduceList) Reset() {
	*x = TutorialProduceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialProduceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialProduceList) ProtoMessage() {}

func (x *TutorialProduceList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialProduceList.ProtoReflect.Descriptor instead.
func (*TutorialProduceList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{397}
}

func (x *TutorialProduceList) GetList() []*TutorialProduce {
	if x != nil {
		return x.List
	}
	return nil
}

type TutorialProduceStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TutorialType                    penum.TutorialType    `protobuf:"varint,1,opt,name=tutorialType,proto3,enum=penum.TutorialType" json:"tutorialType,omitempty"`
	IdolCardId                      string                `protobuf:"bytes,2,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	StepNumber                      int32                 `protobuf:"varint,3,opt,name=stepNumber,proto3" json:"stepNumber,omitempty"`
	TutorialStep                    int32                 `protobuf:"varint,4,opt,name=tutorialStep,proto3" json:"tutorialStep,omitempty"`
	StepType                        penum.ProduceStepType `protobuf:"varint,5,opt,name=stepType,proto3,enum=penum.ProduceStepType" json:"stepType,omitempty"`
	Name                            string                `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	ProduceStepRefresh              bool                  `protobuf:"varint,8,opt,name=produceStepRefresh,proto3" json:"produceStepRefresh,omitempty"`
	ProduceStepLessonId             string                `protobuf:"bytes,9,opt,name=produceStepLessonId,proto3" json:"produceStepLessonId,omitempty"`
	ProgressLevel                   int32                 `protobuf:"varint,10,opt,name=progressLevel,proto3" json:"progressLevel,omitempty"`
	ProduceNavigationNumber         int32                 `protobuf:"varint,11,opt,name=produceNavigationNumber,proto3" json:"produceNavigationNumber,omitempty"`
	RankThreshold                   int32                 `protobuf:"varint,200,opt,name=rankThreshold,proto3" json:"rankThreshold,omitempty"`
	ParameterBaseLine               int32                 `protobuf:"varint,201,opt,name=parameterBaseLine,proto3" json:"parameterBaseLine,omitempty"`
	BaseScore                       int32                 `protobuf:"varint,202,opt,name=baseScore,proto3" json:"baseScore,omitempty"`
	ForceEndScore                   int32                 `protobuf:"varint,203,opt,name=forceEndScore,proto3" json:"forceEndScore,omitempty"`
	ProduceExamBattleNpcGroupId     string                `protobuf:"bytes,204,opt,name=produceExamBattleNpcGroupId,proto3" json:"produceExamBattleNpcGroupId,omitempty"`
	ProduceExamBattleConfigId       string                `protobuf:"bytes,206,opt,name=produceExamBattleConfigId,proto3" json:"produceExamBattleConfigId,omitempty"`
	ProduceExamGimmickEffectGroupId string                `protobuf:"bytes,207,opt,name=produceExamGimmickEffectGroupId,proto3" json:"produceExamGimmickEffectGroupId,omitempty"`
}

func (x *TutorialProduceStep) Reset() {
	*x = TutorialProduceStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialProduceStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialProduceStep) ProtoMessage() {}

func (x *TutorialProduceStep) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialProduceStep.ProtoReflect.Descriptor instead.
func (*TutorialProduceStep) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{398}
}

func (x *TutorialProduceStep) GetTutorialType() penum.TutorialType {
	if x != nil {
		return x.TutorialType
	}
	return penum.TutorialType(0)
}

func (x *TutorialProduceStep) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *TutorialProduceStep) GetStepNumber() int32 {
	if x != nil {
		return x.StepNumber
	}
	return 0
}

func (x *TutorialProduceStep) GetTutorialStep() int32 {
	if x != nil {
		return x.TutorialStep
	}
	return 0
}

func (x *TutorialProduceStep) GetStepType() penum.ProduceStepType {
	if x != nil {
		return x.StepType
	}
	return penum.ProduceStepType(0)
}

func (x *TutorialProduceStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TutorialProduceStep) GetProduceStepRefresh() bool {
	if x != nil {
		return x.ProduceStepRefresh
	}
	return false
}

func (x *TutorialProduceStep) GetProduceStepLessonId() string {
	if x != nil {
		return x.ProduceStepLessonId
	}
	return ""
}

func (x *TutorialProduceStep) GetProgressLevel() int32 {
	if x != nil {
		return x.ProgressLevel
	}
	return 0
}

func (x *TutorialProduceStep) GetProduceNavigationNumber() int32 {
	if x != nil {
		return x.ProduceNavigationNumber
	}
	return 0
}

func (x *TutorialProduceStep) GetRankThreshold() int32 {
	if x != nil {
		return x.RankThreshold
	}
	return 0
}

func (x *TutorialProduceStep) GetParameterBaseLine() int32 {
	if x != nil {
		return x.ParameterBaseLine
	}
	return 0
}

func (x *TutorialProduceStep) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *TutorialProduceStep) GetForceEndScore() int32 {
	if x != nil {
		return x.ForceEndScore
	}
	return 0
}

func (x *TutorialProduceStep) GetProduceExamBattleNpcGroupId() string {
	if x != nil {
		return x.ProduceExamBattleNpcGroupId
	}
	return ""
}

func (x *TutorialProduceStep) GetProduceExamBattleConfigId() string {
	if x != nil {
		return x.ProduceExamBattleConfigId
	}
	return ""
}

func (x *TutorialProduceStep) GetProduceExamGimmickEffectGroupId() string {
	if x != nil {
		return x.ProduceExamGimmickEffectGroupId
	}
	return ""
}

type TutorialProduceStepList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TutorialProduceStep `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TutorialProduceStepList) Reset() {
	*x = TutorialProduceStepList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialProduceStepList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialProduceStepList) ProtoMessage() {}

func (x *TutorialProduceStepList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialProduceStepList.ProtoReflect.Descriptor instead.
func (*TutorialProduceStepList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{399}
}

func (x *TutorialProduceStepList) GetList() []*TutorialProduceStep {
	if x != nil {
		return x.List
	}
	return nil
}

type Voice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId   string   `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	Page          string   `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	VoiceAssetIds []string `protobuf:"bytes,4,rep,name=voiceAssetIds,proto3" json:"voiceAssetIds,omitempty"`
}

func (x *Voice) Reset() {
	*x = Voice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voice) ProtoMessage() {}

func (x *Voice) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voice.ProtoReflect.Descriptor instead.
func (*Voice) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{400}
}

func (x *Voice) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *Voice) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *Voice) GetVoiceAssetIds() []string {
	if x != nil {
		return x.VoiceAssetIds
	}
	return nil
}

type VoiceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VoiceAssetId  string `protobuf:"bytes,2,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
	Title         string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FacialAssetId string `protobuf:"bytes,4,opt,name=facialAssetId,proto3" json:"facialAssetId,omitempty"`
	BodyAssetId   string `protobuf:"bytes,5,opt,name=bodyAssetId,proto3" json:"bodyAssetId,omitempty"`
	Order         int32  `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *VoiceGroup) Reset() {
	*x = VoiceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceGroup) ProtoMessage() {}

func (x *VoiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceGroup.ProtoReflect.Descriptor instead.
func (*VoiceGroup) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{401}
}

func (x *VoiceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoiceGroup) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

func (x *VoiceGroup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VoiceGroup) GetFacialAssetId() string {
	if x != nil {
		return x.FacialAssetId
	}
	return ""
}

func (x *VoiceGroup) GetBodyAssetId() string {
	if x != nil {
		return x.BodyAssetId
	}
	return ""
}

func (x *VoiceGroup) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type VoiceGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*VoiceGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *VoiceGroupList) Reset() {
	*x = VoiceGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceGroupList) ProtoMessage() {}

func (x *VoiceGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceGroupList.ProtoReflect.Descriptor instead.
func (*VoiceGroupList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{402}
}

func (x *VoiceGroupList) GetList() []*VoiceGroup {
	if x != nil {
		return x.List
	}
	return nil
}

type VoiceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Voice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *VoiceList) Reset() {
	*x = VoiceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceList) ProtoMessage() {}

func (x *VoiceList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceList.ProtoReflect.Descriptor instead.
func (*VoiceList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{403}
}

func (x *VoiceList) GetList() []*Voice {
	if x != nil {
		return x.List
	}
	return nil
}

type VoiceRoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    string                    `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	AssetId        string                    `protobuf:"bytes,21,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Title          string                    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Type           penum.VoicePlayScreenType `protobuf:"varint,4,opt,name=type,proto3,enum=penum.VoicePlayScreenType" json:"type,omitempty"`
	ConditionSetId string                    `protobuf:"bytes,5,opt,name=conditionSetId,proto3" json:"conditionSetId,omitempty"`
	Order          int32                     `protobuf:"varint,99,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *VoiceRoster) Reset() {
	*x = VoiceRoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceRoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceRoster) ProtoMessage() {}

func (x *VoiceRoster) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceRoster.ProtoReflect.Descriptor instead.
func (*VoiceRoster) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{404}
}

func (x *VoiceRoster) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *VoiceRoster) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *VoiceRoster) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VoiceRoster) GetType() penum.VoicePlayScreenType {
	if x != nil {
		return x.Type
	}
	return penum.VoicePlayScreenType(0)
}

func (x *VoiceRoster) GetConditionSetId() string {
	if x != nil {
		return x.ConditionSetId
	}
	return ""
}

func (x *VoiceRoster) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type VoiceRosterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*VoiceRoster `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *VoiceRosterList) Reset() {
	*x = VoiceRosterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceRosterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceRosterList) ProtoMessage() {}

func (x *VoiceRosterList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceRosterList.ProtoReflect.Descriptor instead.
func (*VoiceRosterList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{405}
}

func (x *VoiceRosterList) GetList() []*VoiceRoster {
	if x != nil {
		return x.List
	}
	return nil
}

type Work struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 penum.WorkType     `protobuf:"varint,1,opt,name=type,proto3,enum=penum.WorkType" json:"type,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UnlockConditionSetId string             `protobuf:"bytes,3,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	RewardResourceType   penum.ResourceType `protobuf:"varint,4,opt,name=rewardResourceType,proto3,enum=penum.ResourceType" json:"rewardResourceType,omitempty"`
	RewardResourceId     string             `protobuf:"bytes,5,opt,name=rewardResourceId,proto3" json:"rewardResourceId,omitempty"`
}

func (x *Work) Reset() {
	*x = Work{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Work) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work) ProtoMessage() {}

func (x *Work) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work.ProtoReflect.Descriptor instead.
func (*Work) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{406}
}

func (x *Work) GetType() penum.WorkType {
	if x != nil {
		return x.Type
	}
	return penum.WorkType(0)
}

func (x *Work) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Work) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Work) GetRewardResourceType() penum.ResourceType {
	if x != nil {
		return x.RewardResourceType
	}
	return penum.ResourceType(0)
}

func (x *Work) GetRewardResourceId() string {
	if x != nil {
		return x.RewardResourceId
	}
	return ""
}

type WorkLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 penum.WorkType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.WorkType" json:"type,omitempty"`
	Level                int32          `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	UnlockConditionSetId string         `protobuf:"bytes,3,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
}

func (x *WorkLevel) Reset() {
	*x = WorkLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkLevel) ProtoMessage() {}

func (x *WorkLevel) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkLevel.ProtoReflect.Descriptor instead.
func (*WorkLevel) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{407}
}

func (x *WorkLevel) GetType() penum.WorkType {
	if x != nil {
		return x.Type
	}
	return penum.WorkType(0)
}

func (x *WorkLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *WorkLevel) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

type WorkLevelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*WorkLevel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WorkLevelList) Reset() {
	*x = WorkLevelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkLevelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkLevelList) ProtoMessage() {}

func (x *WorkLevelList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkLevelList.ProtoReflect.Descriptor instead.
func (*WorkLevelList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{408}
}

func (x *WorkLevelList) GetList() []*WorkLevel {
	if x != nil {
		return x.List
	}
	return nil
}

type WorkLevelReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                penum.WorkType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.WorkType" json:"type,omitempty"`
	DurationMinutes     int32          `protobuf:"varint,2,opt,name=durationMinutes,proto3" json:"durationMinutes,omitempty"`
	Level               int32          `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	DearnessLevel       int32          `protobuf:"varint,4,opt,name=dearnessLevel,proto3" json:"dearnessLevel,omitempty"`
	RewardQuantity      int32          `protobuf:"varint,5,opt,name=rewardQuantity,proto3" json:"rewardQuantity,omitempty"`
	MoneyRewardQuantity int32          `protobuf:"varint,6,opt,name=moneyRewardQuantity,proto3" json:"moneyRewardQuantity,omitempty"`
	FanRewardQuantity   int32          `protobuf:"varint,7,opt,name=fanRewardQuantity,proto3" json:"fanRewardQuantity,omitempty"`
}

func (x *WorkLevelReward) Reset() {
	*x = WorkLevelReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkLevelReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkLevelReward) ProtoMessage() {}

func (x *WorkLevelReward) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkLevelReward.ProtoReflect.Descriptor instead.
func (*WorkLevelReward) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{409}
}

func (x *WorkLevelReward) GetType() penum.WorkType {
	if x != nil {
		return x.Type
	}
	return penum.WorkType(0)
}

func (x *WorkLevelReward) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *WorkLevelReward) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *WorkLevelReward) GetDearnessLevel() int32 {
	if x != nil {
		return x.DearnessLevel
	}
	return 0
}

func (x *WorkLevelReward) GetRewardQuantity() int32 {
	if x != nil {
		return x.RewardQuantity
	}
	return 0
}

func (x *WorkLevelReward) GetMoneyRewardQuantity() int32 {
	if x != nil {
		return x.MoneyRewardQuantity
	}
	return 0
}

func (x *WorkLevelReward) GetFanRewardQuantity() int32 {
	if x != nil {
		return x.FanRewardQuantity
	}
	return 0
}

type WorkLevelRewardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*WorkLevelReward `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WorkLevelRewardList) Reset() {
	*x = WorkLevelRewardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkLevelRewardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkLevelRewardList) ProtoMessage() {}

func (x *WorkLevelRewardList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkLevelRewardList.ProtoReflect.Descriptor instead.
func (*WorkLevelRewardList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{410}
}

func (x *WorkLevelRewardList) GetList() []*WorkLevelReward {
	if x != nil {
		return x.List
	}
	return nil
}

type WorkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Work `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WorkList) Reset() {
	*x = WorkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkList) ProtoMessage() {}

func (x *WorkList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkList.ProtoReflect.Descriptor instead.
func (*WorkList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{411}
}

func (x *WorkList) GetList() []*Work {
	if x != nil {
		return x.List
	}
	return nil
}

type WorkMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    string               `protobuf:"bytes,1,opt,name=characterId,proto3" json:"characterId,omitempty"`
	MotionType     penum.WorkMotionType `protobuf:"varint,2,opt,name=motionType,proto3,enum=penum.WorkMotionType" json:"motionType,omitempty"`
	Number         int32                `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	FacialAssetIds []string             `protobuf:"bytes,4,rep,name=facialAssetIds,proto3" json:"facialAssetIds,omitempty"`
	BodyAssetIds   []string             `protobuf:"bytes,5,rep,name=bodyAssetIds,proto3" json:"bodyAssetIds,omitempty"`
	VoiceAssetId   string               `protobuf:"bytes,6,opt,name=voiceAssetId,proto3" json:"voiceAssetId,omitempty"`
}

func (x *WorkMotion) Reset() {
	*x = WorkMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMotion) ProtoMessage() {}

func (x *WorkMotion) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMotion.ProtoReflect.Descriptor instead.
func (*WorkMotion) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{412}
}

func (x *WorkMotion) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *WorkMotion) GetMotionType() penum.WorkMotionType {
	if x != nil {
		return x.MotionType
	}
	return penum.WorkMotionType(0)
}

func (x *WorkMotion) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *WorkMotion) GetFacialAssetIds() []string {
	if x != nil {
		return x.FacialAssetIds
	}
	return nil
}

func (x *WorkMotion) GetBodyAssetIds() []string {
	if x != nil {
		return x.BodyAssetIds
	}
	return nil
}

func (x *WorkMotion) GetVoiceAssetId() string {
	if x != nil {
		return x.VoiceAssetId
	}
	return ""
}

type WorkMotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*WorkMotion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WorkMotionList) Reset() {
	*x = WorkMotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkMotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkMotionList) ProtoMessage() {}

func (x *WorkMotionList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkMotionList.ProtoReflect.Descriptor instead.
func (*WorkMotionList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{413}
}

func (x *WorkMotionList) GetList() []*WorkMotion {
	if x != nil {
		return x.List
	}
	return nil
}

type WorkSkip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipCount            int32 `protobuf:"varint,1,opt,name=skipCount,proto3" json:"skipCount,omitempty"`
	ConsumeJewelQuantity int32 `protobuf:"varint,2,opt,name=consumeJewelQuantity,proto3" json:"consumeJewelQuantity,omitempty"`
}

func (x *WorkSkip) Reset() {
	*x = WorkSkip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSkip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSkip) ProtoMessage() {}

func (x *WorkSkip) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSkip.ProtoReflect.Descriptor instead.
func (*WorkSkip) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{414}
}

func (x *WorkSkip) GetSkipCount() int32 {
	if x != nil {
		return x.SkipCount
	}
	return 0
}

func (x *WorkSkip) GetConsumeJewelQuantity() int32 {
	if x != nil {
		return x.ConsumeJewelQuantity
	}
	return 0
}

type WorkSkipList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*WorkSkip `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WorkSkipList) Reset() {
	*x = WorkSkipList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSkipList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSkipList) ProtoMessage() {}

func (x *WorkSkipList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSkipList.ProtoReflect.Descriptor instead.
func (*WorkSkipList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{415}
}

func (x *WorkSkipList) GetList() []*WorkSkip {
	if x != nil {
		return x.List
	}
	return nil
}

type WorkTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 penum.WorkType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.WorkType" json:"type,omitempty"`
	DurationMinutes      int32          `protobuf:"varint,2,opt,name=durationMinutes,proto3" json:"durationMinutes,omitempty"`
	ViewConditionSetId   string         `protobuf:"bytes,3,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId string         `protobuf:"bytes,4,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
}

func (x *WorkTime) Reset() {
	*x = WorkTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTime) ProtoMessage() {}

func (x *WorkTime) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTime.ProtoReflect.Descriptor instead.
func (*WorkTime) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{416}
}

func (x *WorkTime) GetType() penum.WorkType {
	if x != nil {
		return x.Type
	}
	return penum.WorkType(0)
}

func (x *WorkTime) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *WorkTime) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *WorkTime) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

type WorkTimeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*WorkTime `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WorkTimeList) Reset() {
	*x = WorkTimeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTimeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTimeList) ProtoMessage() {}

func (x *WorkTimeList) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTimeList.ProtoReflect.Descriptor instead.
func (*WorkTimeList) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{417}
}

func (x *WorkTimeList) GetList() []*WorkTime {
	if x != nil {
		return x.List
	}
	return nil
}

type CharacterDearnessLevel_ProduceSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *CharacterDearnessLevel_ProduceSkill) Reset() {
	*x = CharacterDearnessLevel_ProduceSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterDearnessLevel_ProduceSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterDearnessLevel_ProduceSkill) ProtoMessage() {}

func (x *CharacterDearnessLevel_ProduceSkill) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterDearnessLevel_ProduceSkill.ProtoReflect.Descriptor instead.
func (*CharacterDearnessLevel_ProduceSkill) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CharacterDearnessLevel_ProduceSkill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterDearnessLevel_ProduceSkill) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type CharacterTrueEndAchievement_Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Threshold int32  `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *CharacterTrueEndAchievement_Achievement) Reset() {
	*x = CharacterTrueEndAchievement_Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterTrueEndAchievement_Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterTrueEndAchievement_Achievement) ProtoMessage() {}

func (x *CharacterTrueEndAchievement_Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterTrueEndAchievement_Achievement.ProtoReflect.Descriptor instead.
func (*CharacterTrueEndAchievement_Achievement) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CharacterTrueEndAchievement_Achievement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterTrueEndAchievement_Achievement) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Item_Gasha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BannerAssetId        string `protobuf:"bytes,2,opt,name=bannerAssetId,proto3" json:"bannerAssetId,omitempty"`
	HasFixReward         bool   `protobuf:"varint,3,opt,name=hasFixReward,proto3" json:"hasFixReward,omitempty"`
	ViewConditionSetId   string `protobuf:"bytes,4,opt,name=viewConditionSetId,proto3" json:"viewConditionSetId,omitempty"`
	UnlockConditionSetId string `protobuf:"bytes,5,opt,name=unlockConditionSetId,proto3" json:"unlockConditionSetId,omitempty"`
	StartTime            int64  `protobuf:"varint,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              int64  `protobuf:"varint,7,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *Item_Gasha) Reset() {
	*x = Item_Gasha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item_Gasha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item_Gasha) ProtoMessage() {}

func (x *Item_Gasha) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item_Gasha.ProtoReflect.Descriptor instead.
func (*Item_Gasha) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{114, 0}
}

func (x *Item_Gasha) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item_Gasha) GetBannerAssetId() string {
	if x != nil {
		return x.BannerAssetId
	}
	return ""
}

func (x *Item_Gasha) GetHasFixReward() bool {
	if x != nil {
		return x.HasFixReward
	}
	return false
}

func (x *Item_Gasha) GetViewConditionSetId() string {
	if x != nil {
		return x.ViewConditionSetId
	}
	return ""
}

func (x *Item_Gasha) GetUnlockConditionSetId() string {
	if x != nil {
		return x.UnlockConditionSetId
	}
	return ""
}

func (x *Item_Gasha) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Item_Gasha) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ProduceCard_PlayEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProduceExamTriggerId string `protobuf:"bytes,1,opt,name=produceExamTriggerId,proto3" json:"produceExamTriggerId,omitempty"`
	ProduceExamEffectId  string `protobuf:"bytes,2,opt,name=produceExamEffectId,proto3" json:"produceExamEffectId,omitempty"`
	HideIcon             bool   `protobuf:"varint,3,opt,name=hideIcon,proto3" json:"hideIcon,omitempty"`
}

func (x *ProduceCard_PlayEffect) Reset() {
	*x = ProduceCard_PlayEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceCard_PlayEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceCard_PlayEffect) ProtoMessage() {}

func (x *ProduceCard_PlayEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceCard_PlayEffect.ProtoReflect.Descriptor instead.
func (*ProduceCard_PlayEffect) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{201, 0}
}

func (x *ProduceCard_PlayEffect) GetProduceExamTriggerId() string {
	if x != nil {
		return x.ProduceExamTriggerId
	}
	return ""
}

func (x *ProduceCard_PlayEffect) GetProduceExamEffectId() string {
	if x != nil {
		return x.ProduceExamEffectId
	}
	return ""
}

func (x *ProduceCard_PlayEffect) GetHideIcon() bool {
	if x != nil {
		return x.HideIcon
	}
	return false
}

type ProduceEffect_ProduceReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType  penum.ProduceResourceType `protobuf:"varint,1,opt,name=resourceType,proto3,enum=penum.ProduceResourceType" json:"resourceType,omitempty"`
	ResourceId    string                    `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	ResourceLevel int32                     `protobuf:"varint,3,opt,name=resourceLevel,proto3" json:"resourceLevel,omitempty"`
}

func (x *ProduceEffect_ProduceReward) Reset() {
	*x = ProduceEffect_ProduceReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceEffect_ProduceReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceEffect_ProduceReward) ProtoMessage() {}

func (x *ProduceEffect_ProduceReward) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceEffect_ProduceReward.ProtoReflect.Descriptor instead.
func (*ProduceEffect_ProduceReward) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{237, 0}
}

func (x *ProduceEffect_ProduceReward) GetResourceType() penum.ProduceResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ProduceResourceType(0)
}

func (x *ProduceEffect_ProduceReward) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ProduceEffect_ProduceReward) GetResourceLevel() int32 {
	if x != nil {
		return x.ResourceLevel
	}
	return 0
}

type ProduceItem_Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProduceTriggerId    string `protobuf:"bytes,1,opt,name=produceTriggerId,proto3" json:"produceTriggerId,omitempty"`
	ProduceItemEffectId string `protobuf:"bytes,2,opt,name=produceItemEffectId,proto3" json:"produceItemEffectId,omitempty"`
}

func (x *ProduceItem_Skill) Reset() {
	*x = ProduceItem_Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceItem_Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceItem_Skill) ProtoMessage() {}

func (x *ProduceItem_Skill) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceItem_Skill.ProtoReflect.Descriptor instead.
func (*ProduceItem_Skill) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{273, 0}
}

func (x *ProduceItem_Skill) GetProduceTriggerId() string {
	if x != nil {
		return x.ProduceTriggerId
	}
	return ""
}

func (x *ProduceItem_Skill) GetProduceItemEffectId() string {
	if x != nil {
		return x.ProduceItemEffectId
	}
	return ""
}

type ProducerLevel_UnlockTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     penum.ProducerLevelUnlockType `protobuf:"varint,1,opt,name=type,proto3,enum=penum.ProducerLevelUnlockType" json:"type,omitempty"`
	Id       string                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Quantity int32                         `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ProducerLevel_UnlockTarget) Reset() {
	*x = ProducerLevel_UnlockTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerLevel_UnlockTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerLevel_UnlockTarget) ProtoMessage() {}

func (x *ProducerLevel_UnlockTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerLevel_UnlockTarget.ProtoReflect.Descriptor instead.
func (*ProducerLevel_UnlockTarget) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{322, 0}
}

func (x *ProducerLevel_UnlockTarget) GetType() penum.ProducerLevelUnlockType {
	if x != nil {
		return x.Type
	}
	return penum.ProducerLevelUnlockType(0)
}

func (x *ProducerLevel_UnlockTarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProducerLevel_UnlockTarget) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type PvpRateConfig_Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageType                       penum.PvpRateStageType `protobuf:"varint,1,opt,name=stageType,proto3,enum=penum.PvpRateStageType" json:"stageType,omitempty"`
	PlanType                        penum.ProducePlanType  `protobuf:"varint,2,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	Turn                            int32                  `protobuf:"varint,3,opt,name=turn,proto3" json:"turn,omitempty"`
	ProduceItemId                   string                 `protobuf:"bytes,4,opt,name=produceItemId,proto3" json:"produceItemId,omitempty"`
	ProduceExamGimmickEffectGroupId string                 `protobuf:"bytes,5,opt,name=produceExamGimmickEffectGroupId,proto3" json:"produceExamGimmickEffectGroupId,omitempty"`
	BgmAssetId                      string                 `protobuf:"bytes,6,opt,name=bgmAssetId,proto3" json:"bgmAssetId,omitempty"`
	StartTimelineAssetId            string                 `protobuf:"bytes,7,opt,name=startTimelineAssetId,proto3" json:"startTimelineAssetId,omitempty"`
	ExamTimelineAssetId             string                 `protobuf:"bytes,8,opt,name=examTimelineAssetId,proto3" json:"examTimelineAssetId,omitempty"`
}

func (x *PvpRateConfig_Stage) Reset() {
	*x = PvpRateConfig_Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pmaster_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpRateConfig_Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRateConfig_Stage) ProtoMessage() {}

func (x *PvpRateConfig_Stage) ProtoReflect() protoreflect.Message {
	mi := &file_pmaster_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRateConfig_Stage.ProtoReflect.Descriptor instead.
func (*PvpRateConfig_Stage) Descriptor() ([]byte, []int) {
	return file_pmaster_proto_rawDescGZIP(), []int{326, 0}
}

func (x *PvpRateConfig_Stage) GetStageType() penum.PvpRateStageType {
	if x != nil {
		return x.StageType
	}
	return penum.PvpRateStageType(0)
}

func (x *PvpRateConfig_Stage) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *PvpRateConfig_Stage) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *PvpRateConfig_Stage) GetProduceItemId() string {
	if x != nil {
		return x.ProduceItemId
	}
	return ""
}

func (x *PvpRateConfig_Stage) GetProduceExamGimmickEffectGroupId() string {
	if x != nil {
		return x.ProduceExamGimmickEffectGroupId
	}
	return ""
}

func (x *PvpRateConfig_Stage) GetBgmAssetId() string {
	if x != nil {
		return x.BgmAssetId
	}
	return ""
}

func (x *PvpRateConfig_Stage) GetStartTimelineAssetId() string {
	if x != nil {
		return x.StartTimelineAssetId
	}
	return ""
}

func (x *PvpRateConfig_Stage) GetExamTimelineAssetId() string {
	if x != nil {
		return x.ExamTimelineAssetId
	}
	return ""
}

var File_pmaster_proto protoreflect.FileDescriptor

var file_pmaster_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x0b, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x05, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x31, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x32, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x33, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x1c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x73, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3b,
	0x0a, 0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x13,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x4b, 0x0a, 0x17, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xd1, 0x02, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x1c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a,
	0x03, 0x42, 0x67, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76,
	0x69, 0x65, 0x77, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x07, 0x42, 0x67,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x67,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x0e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x62, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x23,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x23, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x42,
	0x0a, 0x1c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1a,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x31, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x31,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x33, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x33,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x34, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x34,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x58, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x58, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x34,
	0x0a, 0x15, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x72,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x59, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x59, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x58, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x58, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48, 0x69,
	0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x49, 0x64, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x49, 0x64, 0x6f, 0x6c, 0x22, 0x3d,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe6, 0x01,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x04, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x52,
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x52, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x1a, 0x34, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x51, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x23, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x47, 0x61, 0x73, 0x68, 0x61, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x27, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x47, 0x61, 0x73, 0x68, 0x61, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x47, 0x61, 0x73, 0x68, 0x61, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x4d, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x75,
	0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xf6, 0x02, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x74, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0b, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x5b, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x56, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x6f,
	0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x1d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x22, 0x4f, 0x0a, 0x19, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43, 0x0a,
	0x13, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xca, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x31, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x32, 0x12,
	0x3a, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xad,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x41,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xa9, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x74, 0x69, 0x66, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x74, 0x69, 0x66, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x42, 0x61, 0x72, 0x65,
	0x66, 0x6f, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x61,
	0x72, 0x65, 0x66, 0x6f, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x73, 0x0a,
	0x11, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x03, 0x0a, 0x0b,
	0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x69, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x69, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x6f, 0x47, 0x61, 0x73, 0x68, 0x61, 0x41, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x47, 0x61, 0x73, 0x68, 0x61, 0x41, 0x70,
	0x70, 0x65, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a,
	0x0b, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x11, 0x43, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x43, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x44, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x12, 0x44, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x16, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xf9, 0x01, 0x0a, 0x0b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0f, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x22, 0x39, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x12,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x49, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe0, 0x02, 0x0a, 0x0a, 0x45,
	0x78, 0x61, 0x6d, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x61, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x39, 0x0a,
	0x0e, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x11, 0x45, 0x78, 0x61,
	0x6d, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x45, 0x78, 0x61,
	0x6d, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4f,
	0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xf5, 0x12, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x78,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x48,
	0x0a, 0x1f, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x78, 0x61, 0x6d,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x12, 0x50, 0x0a, 0x23, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x77,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x65,
	0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x23,
	0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x65, 0x78, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x5e,
	0x0a, 0x2a, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x2a, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x3c,
	0x0a, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x12, 0x56, 0x0a, 0x26,
	0x65, 0x78, 0x61, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x65, 0x78,
	0x61, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x65, 0x78, 0x61, 0x6d, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x62, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x47, 0x69,
	0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x62, 0x75, 0x66, 0x66, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x78,
	0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x65, 0x78, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x75, 0x72, 0x6e,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x75,
	0x72, 0x6e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x12, 0x4c, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x21, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x61, 0x6e, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x26, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x54, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x52, 0x0a, 0x24, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64,
	0x64, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x31, 0x12, 0x52,
	0x0a, 0x24, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x64, 0x64, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64,
	0x64, 0x32, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x64, 0x64, 0x31, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x64, 0x64, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x32, 0x12, 0x4a, 0x0a, 0x20, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x68, 0x75, 0x73, 0x69, 0x61, 0x73, 0x74, 0x69, 0x63, 0x31, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x68, 0x75, 0x73, 0x69,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x31, 0x12, 0x4a, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74,
	0x68, 0x75, 0x73, 0x69, 0x61, 0x73, 0x74, 0x69, 0x63, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x68, 0x75, 0x73, 0x69, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x32, 0x12, 0x60, 0x0a, 0x2b, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x31, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x31, 0x12, 0x60, 0x0a, 0x2b, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x65, 0x78, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x32, 0x12, 0x5e, 0x0a, 0x2a, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x65, 0x78, 0x61, 0x6d,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x31, 0x12, 0x5e, 0x0a, 0x2a, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x65, 0x78, 0x61, 0x6d,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x32, 0x12, 0x58, 0x0a, 0x27, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x31,
	0x12, 0x58, 0x0a, 0x27, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x27, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x32, 0x12, 0x56, 0x0a, 0x26, 0x65, 0x78,
	0x61, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x65, 0x78, 0x61, 0x6d,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x31, 0x12, 0x56, 0x0a, 0x26, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x32, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x26, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x32, 0x22, 0x3b, 0x0a, 0x0f, 0x45, 0x78,
	0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x48, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d,
	0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x41, 0x0a, 0x12, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0f,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x47, 0x61,
	0x73, 0x68, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06,
	0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x34, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x22, 0x41, 0x0a, 0x12, 0x47, 0x61, 0x73,
	0x68, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x06, 0x0a,
	0x0b, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x47, 0x61, 0x73,
	0x68, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x47, 0x61,
	0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x22,
	0x3b, 0x0a, 0x0f, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x73, 0x68, 0x61,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x11,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x47, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x11, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x48,
	0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x48, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x3d, 0x0a, 0x10, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c, 0x70,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8d,
	0x01, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0x3b,
	0x0a, 0x0f, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x08,
	0x48, 0x65, 0x6c, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x68, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x48, 0x65,
	0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x48, 0x65,
	0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x09, 0x48,
	0x6f, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x37, 0x0a, 0x0d, 0x48, 0x6f, 0x6d, 0x65,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x3b, 0x0a, 0x0f, 0x48,
	0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf8, 0x02, 0x0a, 0x0a, 0x48, 0x6f, 0x6d,
	0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x64,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x7a, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f,
	0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x73,
	0x0a, 0x08, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x0c, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x0f, 0x0a, 0x08, 0x49,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x1f, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x20,
	0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x42,
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x6f, 0x63,
	0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x12, 0x48, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63,
	0x6b, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x61, 0x6d, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0xed, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18,
	0xec, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x49, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16,
	0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1e, 0x49, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x31, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x22, 0x49, 0x64, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xea, 0x02, 0x0a,
	0x1a, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x45,
	0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x49, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x1e, 0x49, 0x64, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x0c, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0d,
	0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x3f,
	0x0a, 0x11, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x62, 0x0a, 0x15, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x19, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x11, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x44, 0x0a, 0x0b,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56,
	0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x1d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x56, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x15, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x01,
	0x0a, 0x1d, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x5f, 0x0a,
	0x21, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc4,
	0x02, 0x0a, 0x12, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x61,
	0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xf8, 0x0b, 0x0a, 0x0c, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x54, 0x0a,
	0x25, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x73, 0x72, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x69, 0x64,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x73, 0x72, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68,
	0x6f, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x64, 0x6f, 0x6c, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64,
	0x6f, 0x6c, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x68,
	0x61, 0x73, 0x47, 0x61, 0x73, 0x68, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x47, 0x61, 0x73, 0x68, 0x61,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x30, 0x0a, 0x13, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x59, 0x18, 0x65, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x28, 0x0a,
	0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x2c, 0x0a, 0x11, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x58, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x32, 0x0a,
	0x14, 0x61, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x59, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xe7,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x10, 0x49,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x6b, 0x69, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x49,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x1c, 0x49, 0x64,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x61, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x47, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5e, 0x0a,
	0x15, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x4f, 0x0a,
	0x19, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x86,
	0x09, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x1b, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x76, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x47, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68,
	0x6f, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x73,
	0x68, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x61, 0x73, 0x68,
	0x61, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x52, 0x06, 0x67,
	0x61, 0x73, 0x68, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0xfd, 0x01, 0x0a, 0x05, 0x47, 0x61, 0x73, 0x68,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x46, 0x69,
	0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68,
	0x61, 0x73, 0x46, 0x69, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x15, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x19, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x37, 0x0a, 0x0d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x45, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x14, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x0d, 0x4d, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xc3, 0x05, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x6d,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x33, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x69,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x5e, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x3d, 0x0a, 0x10, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x63, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x35, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x03, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c,
	0x12, 0x34, 0x0a, 0x15, 0x66, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x69, 0x63, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x66, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x6d,
	0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x43, 0x0a, 0x13, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x0f, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x43, 0x0a,
	0x13, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x69,
	0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x17, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x54,
	0x6f, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x65, 0x66, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x32, 0x0a, 0x14, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x59, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x1b, 0x4d, 0x65, 0x69,
	0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x37,
	0x0a, 0x0f, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x13, 0x4d, 0x65, 0x69, 0x73, 0x68,
	0x69, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a,
	0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x3f, 0x0a, 0x11, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x12, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x49, 0x0a,
	0x16, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1a, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x59, 0x0a, 0x1e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x05, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x4c, 0x0a, 0x16, 0x65, 0x78,
	0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x16, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x78, 0x61, 0x6d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x65, 0x78, 0x61, 0x6d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69,
	0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x57, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x83, 0x05, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x73, 0x31, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x73, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x73, 0x33, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x4c, 0x65, 0x73,
	0x73, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0xb8, 0x03, 0x0a, 0x18, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x33,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x1c, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x4b, 0x0a, 0x17, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb5,
	0x02, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x10, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x11, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x31, 0x12, 0x3a, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x31, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x31, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x32, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x65, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1a, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x53, 0x68, 0x65, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x65, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x15, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x85, 0x03, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x53, 0x68,
	0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x02,
	0x0a, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x35,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x17, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x10, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a,
	0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x6b, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x6b, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d,
	0x61, 0x6b, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x2f, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x93, 0x05, 0x0a, 0x05, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x67,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x08, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x48, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0c, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x48, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x48, 0x6f, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x09,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa9, 0x01,
	0x0a, 0x0b, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x05, 0x0a, 0x0f, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61,
	0x78, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x6e, 0x67, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7d, 0x0a,
	0x1d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x21,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c,
	0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x05,
	0x0a, 0x09, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73,
	0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6c,
	0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x4c, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x37, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x17, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x65, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x6f,
	0x73, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a,
	0x70, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x1e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x1b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x17, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x69,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x57, 0x61, 0x69, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x13, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x17,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe5, 0x06, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x40, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78,
	0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x69,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x64, 0x76,
	0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x41, 0x64, 0x76, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x39, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x64, 0x76, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x41, 0x64, 0x76, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd3, 0x0d, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x15,
	0x6d, 0x6f, 0x76, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x45, 0x6e, 0x64,
	0x54, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x44, 0x65, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x44, 0x65,
	0x63, 0x6b, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x1a, 0x8e, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x69, 0x64, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x69, 0x64, 0x65, 0x49, 0x63,
	0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0b,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x22, 0x4f, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x07, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61,
	0x67, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x69, 0x6e, 0x4d, 0x61,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x4d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x4d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x22, 0x47, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xa3, 0x04, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x41, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xcc, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4d, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9c,
	0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x2b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x6b, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xeb,
	0x02, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x18, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x65, 0x78, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x6d, 0x61, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6e, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x2b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xdf, 0x01, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x70,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x25, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x03, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e,
	0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72,
	0x69, 0x6e, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3d,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x06,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x1a, 0x95, 0x01, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3e,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x63, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x3f, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x23, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x56, 0x0a, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a,
	0x27, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x4c, 0x0a,
	0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x22, 0x65,
	0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x22, 0x57, 0x0a, 0x1d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x4c, 0x0a, 0x0e, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x25, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x25, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x22, 0x65, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x03,
	0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f,
	0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x12, 0x46, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x6f, 0x63,
	0x61, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x64, 0x22, 0x53, 0x0a, 0x1b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb7,
	0x03, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x4d, 0x6f,
	0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x4d,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x76, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x70, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x22, 0x57, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x57, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x4d, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e,
	0x70, 0x63, 0x4d, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x4d, 0x6f, 0x62, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xb4, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x22, 0x5d, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xea, 0x07, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x3a, 0x0a, 0x18,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x05, 0x0a, 0x1d,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69,
	0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x75, 0x72, 0x6e, 0x12,
	0x4b, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x21,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69,
	0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf4, 0x01,
	0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x06, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x70, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x14,
	0x63, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x63, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x16, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x07, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x1a, 0x65, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x19,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x57, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x81,
	0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x4f, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x33, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x76, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x41, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0xab, 0x03, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x76,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x5d, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a,
	0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa2, 0x03,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f,
	0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x46, 0x0a, 0x1e, 0x65, 0x78, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1e, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x22, 0x41, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x05,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x31, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x31, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x31,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x32, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x32, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x32,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x33, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x33, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x33, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x33,
	0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3d, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xfb, 0x03, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d,
	0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x5f, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xfd, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x64,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49,
	0x64, 0x22, 0x57, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb2, 0x03, 0x0a, 0x16, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x51, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x80, 0x07, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x73,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x66,
	0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x3a, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x46, 0x69, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x46, 0x69, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x59, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x73, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x54, 0x75, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x51, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x70, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x70, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x2c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x2c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x41, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x76,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x49, 0x0a, 0x0d, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x33,
	0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x1a, 0x6e, 0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x3f, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x55, 0x0a, 0x1c, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x07, 0x0a, 0x0d, 0x50, 0x76, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e,
	0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0xc7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xfc, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63,
	0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x11, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x11, 0x50, 0x76, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x15, 0x50, 0x76,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x19,
	0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x2d, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x6d, 0x69, 0x6e, 0x61,
	0x72, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78,
	0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6d,
	0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x65, 0x6d, 0x69,
	0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x4f, 0x0a, 0x07, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x69, 0x66, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67, 0x69, 0x66, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x67,
	0x69, 0x66, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1c, 0x67, 0x69, 0x66, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x65, 0x69, 0x73, 0x68,
	0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x6d,
	0x65, 0x69, 0x73, 0x68, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x65, 0x69,
	0x73, 0x68, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x54, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x54, 0x4c, 0x12, 0x24, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x57, 0x65, 0x65, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x20, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x2c, 0x77, 0x6f, 0x72,
	0x6b, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x2c, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x78, 0x44, 0x61, 0x79, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x78, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5c, 0x0a, 0x29, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x52, 0x0a, 0x24, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x25, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x25, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x50, 0x0a, 0x23, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x74, 0x0a, 0x35, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x35, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12,
	0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x68, 0x61, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a,
	0x65, 0x77, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x44, 0x0a,
	0x1d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x65,
	0x77, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x58,
	0x55, 0x52, 0x4c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x58, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6f, 0x73, 0x46, 0x61,
	0x71, 0x55, 0x52, 0x4c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6f, 0x73, 0x46,
	0x61, 0x71, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x46, 0x61, 0x71, 0x55, 0x52, 0x4c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x46, 0x61, 0x71, 0x55, 0x52, 0x4c, 0x12, 0x32, 0x0a, 0x14, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x26, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x6f, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6f, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x55, 0x52,
	0x4c, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x12,
	0x4c, 0x0a, 0x21, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x55, 0x52,
	0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61,
	0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x54, 0x6f, 0x53, 0x73, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x54, 0x6f, 0x53, 0x73, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x12, 0x4a, 0x0a, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x72, 0x54, 0x6f, 0x53, 0x73,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x72, 0x54, 0x6f, 0x53, 0x73, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12,
	0x52, 0x0a, 0x24, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x72, 0x54, 0x6f, 0x53, 0x73,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x72, 0x54, 0x6f, 0x53, 0x73, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x12, 0x66, 0x0a, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x72, 0x54, 0x6f, 0x53, 0x73, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2e, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x72,
	0x54, 0x6f, 0x53, 0x73, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x48, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x48, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x17, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x68, 0x6f, 0x6d,
	0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x68, 0x6f, 0x6d,
	0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x5d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70,
	0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x18, 0x5e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x16, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x73, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x21, 0x73,
	0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x69, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x57,
	0x65, 0x62, 0x53, 0x69, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x50, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x69, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x57,
	0x65, 0x62, 0x53, 0x69, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a,
	0x1b, 0x68, 0x6f, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x68, 0x6f, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x40, 0x0a, 0x1b, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x70, 0x73, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x67, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1f, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x69, 0x70, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x52,
	0x4c, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x42, 0x0a, 0x1c, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x49, 0x64,
	0x6f, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x59, 0x6f, 0x75, 0x54, 0x75,
	0x62, 0x65, 0x49, 0x64, 0x6f, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12,
	0x42, 0x0a, 0x1c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x59, 0x6f, 0x75, 0x54, 0x75,
	0x62, 0x65, 0x48, 0x61, 0x74, 0x73, 0x75, 0x42, 0x6f, 0x73, 0x68, 0x69, 0x55, 0x52, 0x4c, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x59,
	0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x48, 0x61, 0x74, 0x73, 0x75, 0x42, 0x6f, 0x73, 0x68, 0x69,
	0x55, 0x52, 0x4c, 0x12, 0x4c, 0x0a, 0x21, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x73, 0x12, 0x54, 0x0a, 0x25, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x57, 0x61,
	0x69, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x25, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x57, 0x61, 0x69, 0x74, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x47, 0x4d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x47, 0x4d, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x53,
	0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x52, 0x0a, 0x24, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x24, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x45, 0x64, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64,
	0x6f, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x49, 0x64, 0x6f, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45,
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x72,
	0x65, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x2b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x70,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xec, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x2b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x68, 0x6f, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x51, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x4f, 0x0a, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x22, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xf0, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x55, 0x70, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x55, 0x70, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x26, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x57, 0x0a, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xfc,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x6f, 0x0a,
	0x32, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x73, 0x18, 0xfd, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x32, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x12, 0x7b,
	0x0a, 0x38, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x38, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x53, 0x0a, 0x24, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x47, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x53, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x53, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x1e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x33, 0x44, 0x54, 0x61, 0x70, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x81, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x33, 0x44, 0x54, 0x61, 0x70,
	0x53, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x47, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x70, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x1d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x70, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x83, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x70, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x53, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x84, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x24, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x85, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x89, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x2e, 0x67, 0x61, 0x73, 0x68, 0x61, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2e,
	0x67, 0x61, 0x73, 0x68, 0x61, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49,
	0x0a, 0x1f, 0x67, 0x61, 0x73, 0x68, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x73, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x67, 0x61, 0x73, 0x68, 0x61, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x53, 0x73, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x6b, 0x0a, 0x30, 0x67, 0x61, 0x73,
	0x68, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x49, 0x64, 0x6f, 0x6c, 0x53, 0x73, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xcf, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x30, 0x67, 0x61, 0x73, 0x68, 0x61, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x6b,
	0x55, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x6f, 0x6c, 0x53, 0x73, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x39, 0x0a, 0x17, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xb5, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x6b, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x12, 0x53, 0x0a, 0x24, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x18, 0x95, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x24, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x12, 0x53, 0x0a, 0x24, 0x73, 0x68, 0x6f, 0x70, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x18,
	0x96, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x12, 0x3f, 0x0a, 0x1a,
	0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x97, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1a, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x39, 0x0a,
	0x17, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x64, 0x18, 0x98, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x17, 0x6a, 0x65, 0x77, 0x65,
	0x6c, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x46,
	0x72, 0x65, 0x65, 0x18, 0x99, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6a, 0x65, 0x77, 0x65,
	0x6c, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x4d, 0x0a, 0x21, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x18, 0x9a, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x21, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x31, 0x12, 0x4d, 0x0a, 0x21, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x18, 0x9b, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21,
	0x73, 0x68, 0x6f, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x32, 0x12, 0x35, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf9, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1a, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xfa, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x21, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xfb,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x18, 0xfc, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x3f, 0x0a, 0x1a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x18, 0xfd, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x4b, 0x0a, 0x20, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x6f, 0x75, 0x72, 0x18, 0x80, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x57, 0x0a,
	0x26, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x81, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x82, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x85, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x86, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x1d, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x87, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x37, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xc1, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xc2, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6b, 0x0a, 0x30, 0x70, 0x76, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xcd, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x30, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x67, 0x0a, 0x2e, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xce, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2e,
	0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x6f,
	0x0a, 0x32, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x18, 0xcf, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x32, 0x70, 0x76, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12,
	0x6f, 0x0a, 0x32, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xd0, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x32, 0x70, 0x76,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x12, 0x63, 0x0a, 0x2c, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x18, 0xd1, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2c, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69,
	0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x22, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x68, 0x65, 0x61, 0x72, 0x73, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0xd3, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x22, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x68, 0x65, 0x61,
	0x72, 0x73, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x1a, 0x70, 0x76, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd4, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x76, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x89, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x8a, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x5d, 0x0a, 0x29, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x8b, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x65, 0x78, 0x61, 0x6d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x1a, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0xed, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x75, 0x73, 0x68, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x45, 0x0a, 0x1d, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0xee, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70,
	0x75, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x25,
	0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x44, 0x61, 0x79, 0x18, 0xef, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x70, 0x75,
	0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x4e, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x44, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x23, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x18, 0xf0, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x23, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x33, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x04,
	0x53, 0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x57, 0x65,
	0x65, 0x6b, 0x64, 0x61, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b,
	0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xfb, 0x05,
	0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68,
	0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x69, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4a, 0x65, 0x77, 0x65,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x70, 0x61, 0x69, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x48, 0x6f, 0x75, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0c, 0x53,
	0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x2d, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70,
	0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x65, 0x77, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6a, 0x65, 0x77, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4a, 0x70, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4a, 0x70, 0x79, 0x22, 0x3b, 0x0a,
	0x0f, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8e, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xef, 0x02, 0x0a, 0x0a,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x19, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x69,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x39, 0x0a,
	0x0e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x0e, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc1, 0x08, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x3e,
	0x0a, 0x1a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x71,
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x25, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x6a, 0x0a, 0x1e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1e, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a,
	0x1b, 0x67, 0x61, 0x73, 0x68, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x67, 0x61, 0x73, 0x68, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x10,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64,
	0x22, 0x45, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x54, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x22, 0x7d, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a,
	0x0f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x22, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x69, 0x0a, 0x26, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x67,
	0x0a, 0x25, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x22, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x26,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x25, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x63, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x05, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x2f, 0x0a, 0x09, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x02, 0x0a,
	0x04, 0x54, 0x69, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x69, 0x70, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x2d, 0x0a, 0x08, 0x54, 0x69, 0x70, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x70, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xda,
	0x01, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x4c, 0x6f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x4c,
	0x6f, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x39, 0x0a, 0x0e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x39, 0x0a, 0x0e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x05,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x84, 0x03,
	0x0a, 0x0a, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x75,
	0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x67, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0xc6, 0x03, 0x0a, 0x0e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x61,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4e, 0x70, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x39, 0x0a, 0x0e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x0e,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78,
	0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x41,
	0x0a, 0x12, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x2f, 0x0a, 0x09, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x76, 0x0a, 0x19, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x57, 0x0a, 0x1d, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x82, 0x04, 0x0a, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x37, 0x0a, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x53, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x53, 0x74, 0x65, 0x70, 0x12, 0x45, 0x0a, 0x0e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d,
	0x0a, 0x16, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x1a, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x74, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x1a, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x35, 0x0a, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x04, 0x0a, 0x0f, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x1c, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xa5, 0x06, 0x0a, 0x13, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x53, 0x74, 0x65, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x30, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x1b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4e, 0x70, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0xce, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d,
	0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x64,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x39, 0x0a, 0x0e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x09,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x01,
	0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x0a,
	0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x04, 0x57,
	0x6f, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x7a, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x61, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x43, 0x0a,
	0x13, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x2d, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xed, 0x01, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x64,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x39, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4a, 0x65, 0x77,
	0x65, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x35, 0x0a, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x35, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x1f, 0x5a, 0x1d, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x73, 0x61, 0x6e, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pmaster_proto_rawDescOnce sync.Once
	file_pmaster_proto_rawDescData = file_pmaster_proto_rawDesc
)

func file_pmaster_proto_rawDescGZIP() []byte {
	file_pmaster_proto_rawDescOnce.Do(func() {
		file_pmaster_proto_rawDescData = protoimpl.X.CompressGZIP(file_pmaster_proto_rawDescData)
	})
	return file_pmaster_proto_rawDescData
}

var file_pmaster_proto_msgTypes = make([]protoimpl.MessageInfo, 426)
var file_pmaster_proto_goTypes = []interface{}{
	(*Achievement)(nil),                                     // 0: pmaster.Achievement
	(*AchievementList)(nil),                                 // 1: pmaster.AchievementList
	(*AchievementProgress)(nil),                             // 2: pmaster.AchievementProgress
	(*AchievementProgressList)(nil),                         // 3: pmaster.AchievementProgressList
	(*AppReview)(nil),                                       // 4: pmaster.AppReview
	(*AppReviewList)(nil),                                   // 5: pmaster.AppReviewList
	(*AssetDownload)(nil),                                   // 6: pmaster.AssetDownload
	(*AssetDownloadList)(nil),                               // 7: pmaster.AssetDownloadList
	(*Bgm)(nil),                                             // 8: pmaster.Bgm
	(*BgmList)(nil),                                         // 9: pmaster.BgmList
	(*Character)(nil),                                       // 10: pmaster.Character
	(*CharacterAdv)(nil),                                    // 11: pmaster.CharacterAdv
	(*CharacterAdvList)(nil),                                // 12: pmaster.CharacterAdvList
	(*CharacterColor)(nil),                                  // 13: pmaster.CharacterColor
	(*CharacterColorList)(nil),                              // 14: pmaster.CharacterColorList
	(*CharacterDearnessLevel)(nil),                          // 15: pmaster.CharacterDearnessLevel
	(*CharacterDearnessLevelList)(nil),                      // 16: pmaster.CharacterDearnessLevelList
	(*CharacterDearnessStoryGashaCampaign)(nil),             // 17: pmaster.CharacterDearnessStoryGashaCampaign
	(*CharacterDearnessStoryGashaCampaignList)(nil),         // 18: pmaster.CharacterDearnessStoryGashaCampaignList
	(*CharacterDetail)(nil),                                 // 19: pmaster.CharacterDetail
	(*CharacterDetailList)(nil),                             // 20: pmaster.CharacterDetailList
	(*CharacterList)(nil),                                   // 21: pmaster.CharacterList
	(*CharacterPushMessage)(nil),                            // 22: pmaster.CharacterPushMessage
	(*CharacterPushMessageList)(nil),                        // 23: pmaster.CharacterPushMessageList
	(*CharacterTrueEndAchievement)(nil),                     // 24: pmaster.CharacterTrueEndAchievement
	(*CharacterTrueEndAchievementList)(nil),                 // 25: pmaster.CharacterTrueEndAchievementList
	(*CharacterTrueEndBonus)(nil),                           // 26: pmaster.CharacterTrueEndBonus
	(*CharacterTrueEndBonusList)(nil),                       // 27: pmaster.CharacterTrueEndBonusList
	(*CoinGashaButton)(nil),                                 // 28: pmaster.CoinGashaButton
	(*CoinGashaButtonList)(nil),                             // 29: pmaster.CoinGashaButtonList
	(*ConditionSet)(nil),                                    // 30: pmaster.ConditionSet
	(*ConditionSetList)(nil),                                // 31: pmaster.ConditionSetList
	(*ConsumptionSet)(nil),                                  // 32: pmaster.ConsumptionSet
	(*ConsumptionSetList)(nil),                              // 33: pmaster.ConsumptionSetList
	(*Costume)(nil),                                         // 34: pmaster.Costume
	(*CostumeColorGroup)(nil),                               // 35: pmaster.CostumeColorGroup
	(*CostumeColorGroupList)(nil),                           // 36: pmaster.CostumeColorGroupList
	(*CostumeHead)(nil),                                     // 37: pmaster.CostumeHead
	(*CostumeHeadList)(nil),                                 // 38: pmaster.CostumeHeadList
	(*CostumeList)(nil),                                     // 39: pmaster.CostumeList
	(*CostumeMotion)(nil),                                   // 40: pmaster.CostumeMotion
	(*CostumeMotionList)(nil),                               // 41: pmaster.CostumeMotionList
	(*CostumePhotoGroup)(nil),                               // 42: pmaster.CostumePhotoGroup
	(*CostumePhotoGroupList)(nil),                           // 43: pmaster.CostumePhotoGroupList
	(*DearnessStoryCampaign)(nil),                           // 44: pmaster.DearnessStoryCampaign
	(*DearnessStoryCampaignList)(nil),                       // 45: pmaster.DearnessStoryCampaignList
	(*DeepLinkTransition)(nil),                              // 46: pmaster.DeepLinkTransition
	(*DeepLinkTransitionList)(nil),                          // 47: pmaster.DeepLinkTransitionList
	(*EffectGroup)(nil),                                     // 48: pmaster.EffectGroup
	(*EffectGroupList)(nil),                                 // 49: pmaster.EffectGroupList
	(*EventLabel)(nil),                                      // 50: pmaster.EventLabel
	(*EventLabelList)(nil),                                  // 51: pmaster.EventLabelList
	(*EventStoryCampaign)(nil),                              // 52: pmaster.EventStoryCampaign
	(*EventStoryCampaignList)(nil),                          // 53: pmaster.EventStoryCampaignList
	(*ExamInitialDeck)(nil),                                 // 54: pmaster.ExamInitialDeck
	(*ExamInitialDeckList)(nil),                             // 55: pmaster.ExamInitialDeckList
	(*ExamMotion)(nil),                                      // 56: pmaster.ExamMotion
	(*ExamMotionList)(nil),                                  // 57: pmaster.ExamMotionList
	(*ExamOutGameMotion)(nil),                               // 58: pmaster.ExamOutGameMotion
	(*ExamOutGameMotionList)(nil),                           // 59: pmaster.ExamOutGameMotionList
	(*ExamSetting)(nil),                                     // 60: pmaster.ExamSetting
	(*ExamSettingList)(nil),                                 // 61: pmaster.ExamSettingList
	(*ExamSimulation)(nil),                                  // 62: pmaster.ExamSimulation
	(*ExamSimulationList)(nil),                              // 63: pmaster.ExamSimulationList
	(*FeatureLock)(nil),                                     // 64: pmaster.FeatureLock
	(*FeatureLockList)(nil),                                 // 65: pmaster.FeatureLockList
	(*GashaAnimation)(nil),                                  // 66: pmaster.GashaAnimation
	(*GashaAnimationList)(nil),                              // 67: pmaster.GashaAnimationList
	(*GashaButton)(nil),                                     // 68: pmaster.GashaButton
	(*GashaButtonList)(nil),                                 // 69: pmaster.GashaButtonList
	(*GuildDonationItem)(nil),                               // 70: pmaster.GuildDonationItem
	(*GuildDonationItemList)(nil),                           // 71: pmaster.GuildDonationItemList
	(*GuildReaction)(nil),                                   // 72: pmaster.GuildReaction
	(*GuildReactionList)(nil),                               // 73: pmaster.GuildReactionList
	(*HelpCategory)(nil),                                    // 74: pmaster.HelpCategory
	(*HelpCategoryList)(nil),                                // 75: pmaster.HelpCategoryList
	(*HelpContent)(nil),                                     // 76: pmaster.HelpContent
	(*HelpContentList)(nil),                                 // 77: pmaster.HelpContentList
	(*HelpInfo)(nil),                                        // 78: pmaster.HelpInfo
	(*HelpInfoList)(nil),                                    // 79: pmaster.HelpInfoList
	(*HomeBoard)(nil),                                       // 80: pmaster.HomeBoard
	(*HomeBoardList)(nil),                                   // 81: pmaster.HomeBoardList
	(*HomeMonitor)(nil),                                     // 82: pmaster.HomeMonitor
	(*HomeMonitorList)(nil),                                 // 83: pmaster.HomeMonitorList
	(*HomeMotion)(nil),                                      // 84: pmaster.HomeMotion
	(*HomeMotionList)(nil),                                  // 85: pmaster.HomeMotionList
	(*HomeTime)(nil),                                        // 86: pmaster.HomeTime
	(*HomeTimeList)(nil),                                    // 87: pmaster.HomeTimeList
	(*IdolCard)(nil),                                        // 88: pmaster.IdolCard
	(*IdolCardLevelLimit)(nil),                              // 89: pmaster.IdolCardLevelLimit
	(*IdolCardLevelLimitList)(nil),                          // 90: pmaster.IdolCardLevelLimitList
	(*IdolCardLevelLimitProduceSkill)(nil),                  // 91: pmaster.IdolCardLevelLimitProduceSkill
	(*IdolCardLevelLimitProduceSkillList)(nil),              // 92: pmaster.IdolCardLevelLimitProduceSkillList
	(*IdolCardLevelLimitStatusUp)(nil),                      // 93: pmaster.IdolCardLevelLimitStatusUp
	(*IdolCardLevelLimitStatusUpList)(nil),                  // 94: pmaster.IdolCardLevelLimitStatusUpList
	(*IdolCardList)(nil),                                    // 95: pmaster.IdolCardList
	(*IdolCardPiece)(nil),                                   // 96: pmaster.IdolCardPiece
	(*IdolCardPieceList)(nil),                               // 97: pmaster.IdolCardPieceList
	(*IdolCardPieceQuantity)(nil),                           // 98: pmaster.IdolCardPieceQuantity
	(*IdolCardPieceQuantityList)(nil),                       // 99: pmaster.IdolCardPieceQuantityList
	(*IdolCardPotential)(nil),                               // 100: pmaster.IdolCardPotential
	(*IdolCardPotentialList)(nil),                           // 101: pmaster.IdolCardPotentialList
	(*IdolCardPotentialProduceSkill)(nil),                   // 102: pmaster.IdolCardPotentialProduceSkill
	(*IdolCardPotentialProduceSkillList)(nil),               // 103: pmaster.IdolCardPotentialProduceSkillList
	(*IdolCardSimulation)(nil),                              // 104: pmaster.IdolCardSimulation
	(*IdolCardSimulationList)(nil),                          // 105: pmaster.IdolCardSimulationList
	(*IdolCardSkin)(nil),                                    // 106: pmaster.IdolCardSkin
	(*IdolCardSkinList)(nil),                                // 107: pmaster.IdolCardSkinList
	(*IdolCardSkinSelectReward)(nil),                        // 108: pmaster.IdolCardSkinSelectReward
	(*IdolCardSkinSelectRewardList)(nil),                    // 109: pmaster.IdolCardSkinSelectRewardList
	(*InvitationMission)(nil),                               // 110: pmaster.InvitationMission
	(*InvitationMissionList)(nil),                           // 111: pmaster.InvitationMissionList
	(*InvitationPointReward)(nil),                           // 112: pmaster.InvitationPointReward
	(*InvitationPointRewardList)(nil),                       // 113: pmaster.InvitationPointRewardList
	(*Item)(nil),                                            // 114: pmaster.Item
	(*ItemList)(nil),                                        // 115: pmaster.ItemList
	(*JewelConsumptionCount)(nil),                           // 116: pmaster.JewelConsumptionCount
	(*JewelConsumptionCountList)(nil),                       // 117: pmaster.JewelConsumptionCountList
	(*LimitItem)(nil),                                       // 118: pmaster.LimitItem
	(*LimitItemList)(nil),                                   // 119: pmaster.LimitItemList
	(*Localization)(nil),                                    // 120: pmaster.Localization
	(*LocalizationList)(nil),                                // 121: pmaster.LocalizationList
	(*LoginBonusMotion)(nil),                                // 122: pmaster.LoginBonusMotion
	(*LoginBonusMotionList)(nil),                            // 123: pmaster.LoginBonusMotionList
	(*MainStoryChapter)(nil),                                // 124: pmaster.MainStoryChapter
	(*MainStoryChapterList)(nil),                            // 125: pmaster.MainStoryChapterList
	(*MainStoryPart)(nil),                                   // 126: pmaster.MainStoryPart
	(*MainStoryPartList)(nil),                               // 127: pmaster.MainStoryPartList
	(*MainTask)(nil),                                        // 128: pmaster.MainTask
	(*MainTaskGroup)(nil),                                   // 129: pmaster.MainTaskGroup
	(*MainTaskGroupList)(nil),                               // 130: pmaster.MainTaskGroupList
	(*MainTaskIcon)(nil),                                    // 131: pmaster.MainTaskIcon
	(*MainTaskIconList)(nil),                                // 132: pmaster.MainTaskIconList
	(*MainTaskList)(nil),                                    // 133: pmaster.MainTaskList
	(*Media)(nil),                                           // 134: pmaster.Media
	(*MediaList)(nil),                                       // 135: pmaster.MediaList
	(*MeishiBaseAsset)(nil),                                 // 136: pmaster.MeishiBaseAsset
	(*MeishiBaseAssetList)(nil),                             // 137: pmaster.MeishiBaseAssetList
	(*MeishiBaseColor)(nil),                                 // 138: pmaster.MeishiBaseColor
	(*MeishiBaseColorList)(nil),                             // 139: pmaster.MeishiBaseColorList
	(*MeishiIllustrationAsset)(nil),                         // 140: pmaster.MeishiIllustrationAsset
	(*MeishiIllustrationAssetList)(nil),                     // 141: pmaster.MeishiIllustrationAssetList
	(*MeishiTextColor)(nil),                                 // 142: pmaster.MeishiTextColor
	(*MeishiTextColorList)(nil),                             // 143: pmaster.MeishiTextColorList
	(*MemoryAbility)(nil),                                   // 144: pmaster.MemoryAbility
	(*MemoryAbilityList)(nil),                               // 145: pmaster.MemoryAbilityList
	(*MemoryExchangeItem)(nil),                              // 146: pmaster.MemoryExchangeItem
	(*MemoryExchangeItemList)(nil),                          // 147: pmaster.MemoryExchangeItemList
	(*MemoryExchangeItemQuantity)(nil),                      // 148: pmaster.MemoryExchangeItemQuantity
	(*MemoryExchangeItemQuantityList)(nil),                  // 149: pmaster.MemoryExchangeItemQuantityList
	(*MemoryGift)(nil),                                      // 150: pmaster.MemoryGift
	(*MemoryGiftList)(nil),                                  // 151: pmaster.MemoryGiftList
	(*MemoryTag)(nil),                                       // 152: pmaster.MemoryTag
	(*MemoryTagList)(nil),                                   // 153: pmaster.MemoryTagList
	(*Mission)(nil),                                         // 154: pmaster.Mission
	(*MissionDailyRelease)(nil),                             // 155: pmaster.MissionDailyRelease
	(*MissionDailyReleaseGroup)(nil),                        // 156: pmaster.MissionDailyReleaseGroup
	(*MissionDailyReleaseGroupList)(nil),                    // 157: pmaster.MissionDailyReleaseGroupList
	(*MissionDailyReleaseList)(nil),                         // 158: pmaster.MissionDailyReleaseList
	(*MissionGroup)(nil),                                    // 159: pmaster.MissionGroup
	(*MissionGroupList)(nil),                                // 160: pmaster.MissionGroupList
	(*MissionList)(nil),                                     // 161: pmaster.MissionList
	(*MissionPanelSheet)(nil),                               // 162: pmaster.MissionPanelSheet
	(*MissionPanelSheetGroup)(nil),                          // 163: pmaster.MissionPanelSheetGroup
	(*MissionPanelSheetGroupList)(nil),                      // 164: pmaster.MissionPanelSheetGroupList
	(*MissionPanelSheetList)(nil),                           // 165: pmaster.MissionPanelSheetList
	(*MissionPass)(nil),                                     // 166: pmaster.MissionPass
	(*MissionPassList)(nil),                                 // 167: pmaster.MissionPassList
	(*MissionPassPoint)(nil),                                // 168: pmaster.MissionPassPoint
	(*MissionPassPointList)(nil),                            // 169: pmaster.MissionPassPointList
	(*MissionPassProgress)(nil),                             // 170: pmaster.MissionPassProgress
	(*MissionPassProgressList)(nil),                         // 171: pmaster.MissionPassProgressList
	(*MissionPoint)(nil),                                    // 172: pmaster.MissionPoint
	(*MissionPointList)(nil),                                // 173: pmaster.MissionPointList
	(*MissionPointRewardSet)(nil),                           // 174: pmaster.MissionPointRewardSet
	(*MissionPointRewardSetList)(nil),                       // 175: pmaster.MissionPointRewardSetList
	(*MissionProgress)(nil),                                 // 176: pmaster.MissionProgress
	(*MissionProgressList)(nil),                             // 177: pmaster.MissionProgressList
	(*Money)(nil),                                           // 178: pmaster.Money
	(*MoneyList)(nil),                                       // 179: pmaster.MoneyList
	(*Music)(nil),                                           // 180: pmaster.Music
	(*MusicHot)(nil),                                        // 181: pmaster.MusicHot
	(*MusicHotList)(nil),                                    // 182: pmaster.MusicHotList
	(*MusicList)(nil),                                       // 183: pmaster.MusicList
	(*MusicSinger)(nil),                                     // 184: pmaster.MusicSinger
	(*MusicSingerList)(nil),                                 // 185: pmaster.MusicSingerList
	(*PhotoBackground)(nil),                                 // 186: pmaster.PhotoBackground
	(*PhotoBackgroundList)(nil),                             // 187: pmaster.PhotoBackgroundList
	(*PhotoLookTargetVoiceCharacter)(nil),                   // 188: pmaster.PhotoLookTargetVoiceCharacter
	(*PhotoLookTargetVoiceCharacterList)(nil),               // 189: pmaster.PhotoLookTargetVoiceCharacterList
	(*PhotoPose)(nil),                                       // 190: pmaster.PhotoPose
	(*PhotoPoseList)(nil),                                   // 191: pmaster.PhotoPoseList
	(*PhotoReactionVoiceGroup)(nil),                         // 192: pmaster.PhotoReactionVoiceGroup
	(*PhotoReactionVoiceGroupList)(nil),                     // 193: pmaster.PhotoReactionVoiceGroupList
	(*PhotoWaitVoiceCharacter)(nil),                         // 194: pmaster.PhotoWaitVoiceCharacter
	(*PhotoWaitVoiceCharacterList)(nil),                     // 195: pmaster.PhotoWaitVoiceCharacterList
	(*PhotoWaitVoiceGroup)(nil),                             // 196: pmaster.PhotoWaitVoiceGroup
	(*PhotoWaitVoiceGroupList)(nil),                         // 197: pmaster.PhotoWaitVoiceGroupList
	(*Produce)(nil),                                         // 198: pmaster.Produce
	(*ProduceAdv)(nil),                                      // 199: pmaster.ProduceAdv
	(*ProduceAdvList)(nil),                                  // 200: pmaster.ProduceAdvList
	(*ProduceCard)(nil),                                     // 201: pmaster.ProduceCard
	(*ProduceCardGrowEffect)(nil),                           // 202: pmaster.ProduceCardGrowEffect
	(*ProduceCardGrowEffectList)(nil),                       // 203: pmaster.ProduceCardGrowEffectList
	(*ProduceCardList)(nil),                                 // 204: pmaster.ProduceCardList
	(*ProduceCardRandomPool)(nil),                           // 205: pmaster.ProduceCardRandomPool
	(*ProduceCardRandomPoolList)(nil),                       // 206: pmaster.ProduceCardRandomPoolList
	(*ProduceCardSearch)(nil),                               // 207: pmaster.ProduceCardSearch
	(*ProduceCardSearchList)(nil),                           // 208: pmaster.ProduceCardSearchList
	(*ProduceCardSimulation)(nil),                           // 209: pmaster.ProduceCardSimulation
	(*ProduceCardSimulationGroup)(nil),                      // 210: pmaster.ProduceCardSimulationGroup
	(*ProduceCardSimulationGroupList)(nil),                  // 211: pmaster.ProduceCardSimulationGroupList
	(*ProduceCardSimulationList)(nil),                       // 212: pmaster.ProduceCardSimulationList
	(*ProduceCardStatusEffect)(nil),                         // 213: pmaster.ProduceCardStatusEffect
	(*ProduceCardStatusEffectList)(nil),                     // 214: pmaster.ProduceCardStatusEffectList
	(*ProduceCardStatusEnchant)(nil),                        // 215: pmaster.ProduceCardStatusEnchant
	(*ProduceCardStatusEnchantList)(nil),                    // 216: pmaster.ProduceCardStatusEnchantList
	(*ProduceCardTag)(nil),                                  // 217: pmaster.ProduceCardTag
	(*ProduceCardTagList)(nil),                              // 218: pmaster.ProduceCardTagList
	(*ProduceChallengeCharacter)(nil),                       // 219: pmaster.ProduceChallengeCharacter
	(*ProduceChallengeCharacterList)(nil),                   // 220: pmaster.ProduceChallengeCharacterList
	(*ProduceChallengeSlot)(nil),                            // 221: pmaster.ProduceChallengeSlot
	(*ProduceChallengeSlotList)(nil),                        // 222: pmaster.ProduceChallengeSlotList
	(*ProduceDescription)(nil),                              // 223: pmaster.ProduceDescription
	(*ProduceDescriptionList)(nil),                          // 224: pmaster.ProduceDescriptionList
	(*ProduceDescriptionProduceCardGrowEffectType)(nil),     // 225: pmaster.ProduceDescriptionProduceCardGrowEffectType
	(*ProduceDescriptionProduceCardGrowEffectTypeList)(nil), // 226: pmaster.ProduceDescriptionProduceCardGrowEffectTypeList
	(*ProduceDescriptionProduceEffectType)(nil),             // 227: pmaster.ProduceDescriptionProduceEffectType
	(*ProduceDescriptionProduceEffectTypeList)(nil),         // 228: pmaster.ProduceDescriptionProduceEffectTypeList
	(*ProduceDescriptionProduceExamEffectType)(nil),         // 229: pmaster.ProduceDescriptionProduceExamEffectType
	(*ProduceDescriptionProduceExamEffectTypeList)(nil),     // 230: pmaster.ProduceDescriptionProduceExamEffectTypeList
	(*ProduceDescriptionProducePlanType)(nil),               // 231: pmaster.ProduceDescriptionProducePlanType
	(*ProduceDescriptionProducePlanTypeList)(nil),           // 232: pmaster.ProduceDescriptionProducePlanTypeList
	(*ProduceDrink)(nil),                                    // 233: pmaster.ProduceDrink
	(*ProduceDrinkEffect)(nil),                              // 234: pmaster.ProduceDrinkEffect
	(*ProduceDrinkEffectList)(nil),                          // 235: pmaster.ProduceDrinkEffectList
	(*ProduceDrinkList)(nil),                                // 236: pmaster.ProduceDrinkList
	(*ProduceEffect)(nil),                                   // 237: pmaster.ProduceEffect
	(*ProduceEffectIcon)(nil),                               // 238: pmaster.ProduceEffectIcon
	(*ProduceEffectIconList)(nil),                           // 239: pmaster.ProduceEffectIconList
	(*ProduceEffectList)(nil),                               // 240: pmaster.ProduceEffectList
	(*ProduceEventCharacterGrowth)(nil),                     // 241: pmaster.ProduceEventCharacterGrowth
	(*ProduceEventCharacterGrowthList)(nil),                 // 242: pmaster.ProduceEventCharacterGrowthList
	(*ProduceEventSupportCard)(nil),                         // 243: pmaster.ProduceEventSupportCard
	(*ProduceEventSupportCardList)(nil),                     // 244: pmaster.ProduceEventSupportCardList
	(*ProduceExamAutoCardSelectEvaluation)(nil),             // 245: pmaster.ProduceExamAutoCardSelectEvaluation
	(*ProduceExamAutoCardSelectEvaluationList)(nil),         // 246: pmaster.ProduceExamAutoCardSelectEvaluationList
	(*ProduceExamAutoEvaluation)(nil),                       // 247: pmaster.ProduceExamAutoEvaluation
	(*ProduceExamAutoEvaluationList)(nil),                   // 248: pmaster.ProduceExamAutoEvaluationList
	(*ProduceExamAutoResourceEvaluation)(nil),               // 249: pmaster.ProduceExamAutoResourceEvaluation
	(*ProduceExamAutoResourceEvaluationList)(nil),           // 250: pmaster.ProduceExamAutoResourceEvaluationList
	(*ProduceExamAutoTriggerEvaluation)(nil),                // 251: pmaster.ProduceExamAutoTriggerEvaluation
	(*ProduceExamAutoTriggerEvaluationList)(nil),            // 252: pmaster.ProduceExamAutoTriggerEvaluationList
	(*ProduceExamBattleConfig)(nil),                         // 253: pmaster.ProduceExamBattleConfig
	(*ProduceExamBattleConfigList)(nil),                     // 254: pmaster.ProduceExamBattleConfigList
	(*ProduceExamBattleNpcGroup)(nil),                       // 255: pmaster.ProduceExamBattleNpcGroup
	(*ProduceExamBattleNpcGroupList)(nil),                   // 256: pmaster.ProduceExamBattleNpcGroupList
	(*ProduceExamBattleNpcMob)(nil),                         // 257: pmaster.ProduceExamBattleNpcMob
	(*ProduceExamBattleNpcMobList)(nil),                     // 258: pmaster.ProduceExamBattleNpcMobList
	(*ProduceExamBattleScoreConfig)(nil),                    // 259: pmaster.ProduceExamBattleScoreConfig
	(*ProduceExamBattleScoreConfigList)(nil),                // 260: pmaster.ProduceExamBattleScoreConfigList
	(*ProduceExamEffect)(nil),                               // 261: pmaster.ProduceExamEffect
	(*ProduceExamEffectList)(nil),                           // 262: pmaster.ProduceExamEffectList
	(*ProduceExamGimmickEffectGroup)(nil),                   // 263: pmaster.ProduceExamGimmickEffectGroup
	(*ProduceExamGimmickEffectGroupList)(nil),               // 264: pmaster.ProduceExamGimmickEffectGroupList
	(*ProduceExamStatusEnchant)(nil),                        // 265: pmaster.ProduceExamStatusEnchant
	(*ProduceExamStatusEnchantList)(nil),                    // 266: pmaster.ProduceExamStatusEnchantList
	(*ProduceExamTrigger)(nil),                              // 267: pmaster.ProduceExamTrigger
	(*ProduceExamTriggerList)(nil),                          // 268: pmaster.ProduceExamTriggerList
	(*ProduceGroup)(nil),                                    // 269: pmaster.ProduceGroup
	(*ProduceGroupList)(nil),                                // 270: pmaster.ProduceGroupList
	(*ProduceHighScore)(nil),                                // 271: pmaster.ProduceHighScore
	(*ProduceHighScoreList)(nil),                            // 272: pmaster.ProduceHighScoreList
	(*ProduceItem)(nil),                                     // 273: pmaster.ProduceItem
	(*ProduceItemChallengeGroup)(nil),                       // 274: pmaster.ProduceItemChallengeGroup
	(*ProduceItemChallengeGroupList)(nil),                   // 275: pmaster.ProduceItemChallengeGroupList
	(*ProduceItemEffect)(nil),                               // 276: pmaster.ProduceItemEffect
	(*ProduceItemEffectList)(nil),                           // 277: pmaster.ProduceItemEffectList
	(*ProduceItemList)(nil),                                 // 278: pmaster.ProduceItemList
	(*ProduceItemSimulation)(nil),                           // 279: pmaster.ProduceItemSimulation
	(*ProduceItemSimulationGroup)(nil),                      // 280: pmaster.ProduceItemSimulationGroup
	(*ProduceItemSimulationGroupList)(nil),                  // 281: pmaster.ProduceItemSimulationGroupList
	(*ProduceItemSimulationList)(nil),                       // 282: pmaster.ProduceItemSimulationList
	(*ProduceList)(nil),                                     // 283: pmaster.ProduceList
	(*ProduceLive)(nil),                                     // 284: pmaster.ProduceLive
	(*ProduceLiveCommon)(nil),                               // 285: pmaster.ProduceLiveCommon
	(*ProduceLiveCommonList)(nil),                           // 286: pmaster.ProduceLiveCommonList
	(*ProduceLiveList)(nil),                                 // 287: pmaster.ProduceLiveList
	(*ProduceNavigation)(nil),                               // 288: pmaster.ProduceNavigation
	(*ProduceNavigationList)(nil),                           // 289: pmaster.ProduceNavigationList
	(*ProduceResultMotion)(nil),                             // 290: pmaster.ProduceResultMotion
	(*ProduceResultMotionList)(nil),                         // 291: pmaster.ProduceResultMotionList
	(*ProduceScheduleBackground)(nil),                       // 292: pmaster.ProduceScheduleBackground
	(*ProduceScheduleBackgroundList)(nil),                   // 293: pmaster.ProduceScheduleBackgroundList
	(*ProduceScheduleMotion)(nil),                           // 294: pmaster.ProduceScheduleMotion
	(*ProduceScheduleMotionList)(nil),                       // 295: pmaster.ProduceScheduleMotionList
	(*ProduceSetting)(nil),                                  // 296: pmaster.ProduceSetting
	(*ProduceSettingList)(nil),                              // 297: pmaster.ProduceSettingList
	(*ProduceSkill)(nil),                                    // 298: pmaster.ProduceSkill
	(*ProduceSkillList)(nil),                                // 299: pmaster.ProduceSkillList
	(*ProduceStartMotion)(nil),                              // 300: pmaster.ProduceStartMotion
	(*ProduceStartMotionList)(nil),                          // 301: pmaster.ProduceStartMotionList
	(*ProduceStepAuditionDifficulty)(nil),                   // 302: pmaster.ProduceStepAuditionDifficulty
	(*ProduceStepAuditionDifficultyList)(nil),               // 303: pmaster.ProduceStepAuditionDifficultyList
	(*ProduceStepAuditionMotion)(nil),                       // 304: pmaster.ProduceStepAuditionMotion
	(*ProduceStepAuditionMotionList)(nil),                   // 305: pmaster.ProduceStepAuditionMotionList
	(*ProduceStepEventDetail)(nil),                          // 306: pmaster.ProduceStepEventDetail
	(*ProduceStepEventDetailList)(nil),                      // 307: pmaster.ProduceStepEventDetailList
	(*ProduceStepEventSuggestion)(nil),                      // 308: pmaster.ProduceStepEventSuggestion
	(*ProduceStepEventSuggestionList)(nil),                  // 309: pmaster.ProduceStepEventSuggestionList
	(*ProduceStepLesson)(nil),                               // 310: pmaster.ProduceStepLesson
	(*ProduceStepLessonLevel)(nil),                          // 311: pmaster.ProduceStepLessonLevel
	(*ProduceStepLessonLevelList)(nil),                      // 312: pmaster.ProduceStepLessonLevelList
	(*ProduceStepLessonList)(nil),                           // 313: pmaster.ProduceStepLessonList
	(*ProduceStepTransition)(nil),                           // 314: pmaster.ProduceStepTransition
	(*ProduceStepTransitionList)(nil),                       // 315: pmaster.ProduceStepTransitionList
	(*ProduceStory)(nil),                                    // 316: pmaster.ProduceStory
	(*ProduceStoryList)(nil),                                // 317: pmaster.ProduceStoryList
	(*ProduceTrigger)(nil),                                  // 318: pmaster.ProduceTrigger
	(*ProduceTriggerList)(nil),                              // 319: pmaster.ProduceTriggerList
	(*ProduceWeekMotion)(nil),                               // 320: pmaster.ProduceWeekMotion
	(*ProduceWeekMotionList)(nil),                           // 321: pmaster.ProduceWeekMotionList
	(*ProducerLevel)(nil),                                   // 322: pmaster.ProducerLevel
	(*ProducerLevelList)(nil),                               // 323: pmaster.ProducerLevelList
	(*PvpRateCommonProduceCard)(nil),                        // 324: pmaster.PvpRateCommonProduceCard
	(*PvpRateCommonProduceCardList)(nil),                    // 325: pmaster.PvpRateCommonProduceCardList
	(*PvpRateConfig)(nil),                                   // 326: pmaster.PvpRateConfig
	(*PvpRateConfigList)(nil),                               // 327: pmaster.PvpRateConfigList
	(*PvpRateMotion)(nil),                                   // 328: pmaster.PvpRateMotion
	(*PvpRateMotionList)(nil),                               // 329: pmaster.PvpRateMotionList
	(*PvpRateUnitSlotUnlock)(nil),                           // 330: pmaster.PvpRateUnitSlotUnlock
	(*PvpRateUnitSlotUnlockList)(nil),                       // 331: pmaster.PvpRateUnitSlotUnlockList
	(*ResultGradePattern)(nil),                              // 332: pmaster.ResultGradePattern
	(*ResultGradePatternList)(nil),                          // 333: pmaster.ResultGradePatternList
	(*Rule)(nil),                                            // 334: pmaster.Rule
	(*RuleList)(nil),                                        // 335: pmaster.RuleList
	(*SeminarExamTransition)(nil),                           // 336: pmaster.SeminarExamTransition
	(*SeminarExamTransitionList)(nil),                       // 337: pmaster.SeminarExamTransitionList
	(*Setting)(nil),                                         // 338: pmaster.Setting
	(*SettingList)(nil),                                     // 339: pmaster.SettingList
	(*Shop)(nil),                                            // 340: pmaster.Shop
	(*ShopItem)(nil),                                        // 341: pmaster.ShopItem
	(*ShopItemList)(nil),                                    // 342: pmaster.ShopItemList
	(*ShopList)(nil),                                        // 343: pmaster.ShopList
	(*ShopProduct)(nil),                                     // 344: pmaster.ShopProduct
	(*ShopProductList)(nil),                                 // 345: pmaster.ShopProductList
	(*Story)(nil),                                           // 346: pmaster.Story
	(*StoryEvent)(nil),                                      // 347: pmaster.StoryEvent
	(*StoryEventList)(nil),                                  // 348: pmaster.StoryEventList
	(*StoryGroup)(nil),                                      // 349: pmaster.StoryGroup
	(*StoryGroupList)(nil),                                  // 350: pmaster.StoryGroupList
	(*StoryList)(nil),                                       // 351: pmaster.StoryList
	(*SupportCard)(nil),                                     // 352: pmaster.SupportCard
	(*SupportCardBonus)(nil),                                // 353: pmaster.SupportCardBonus
	(*SupportCardBonusList)(nil),                            // 354: pmaster.SupportCardBonusList
	(*SupportCardFlavor)(nil),                               // 355: pmaster.SupportCardFlavor
	(*SupportCardFlavorList)(nil),                           // 356: pmaster.SupportCardFlavorList
	(*SupportCardLevel)(nil),                                // 357: pmaster.SupportCardLevel
	(*SupportCardLevelLimit)(nil),                           // 358: pmaster.SupportCardLevelLimit
	(*SupportCardLevelLimitList)(nil),                       // 359: pmaster.SupportCardLevelLimitList
	(*SupportCardLevelList)(nil),                            // 360: pmaster.SupportCardLevelList
	(*SupportCardList)(nil),                                 // 361: pmaster.SupportCardList
	(*SupportCardProduceSkillLevelAssist)(nil),              // 362: pmaster.SupportCardProduceSkillLevelAssist
	(*SupportCardProduceSkillLevelAssistList)(nil),          // 363: pmaster.SupportCardProduceSkillLevelAssistList
	(*SupportCardProduceSkillLevelDance)(nil),               // 364: pmaster.SupportCardProduceSkillLevelDance
	(*SupportCardProduceSkillLevelDanceList)(nil),           // 365: pmaster.SupportCardProduceSkillLevelDanceList
	(*SupportCardProduceSkillLevelVisual)(nil),              // 366: pmaster.SupportCardProduceSkillLevelVisual
	(*SupportCardProduceSkillLevelVisualList)(nil),          // 367: pmaster.SupportCardProduceSkillLevelVisualList
	(*SupportCardProduceSkillLevelVocal)(nil),               // 368: pmaster.SupportCardProduceSkillLevelVocal
	(*SupportCardProduceSkillLevelVocalList)(nil),           // 369: pmaster.SupportCardProduceSkillLevelVocalList
	(*SupportCardSimulation)(nil),                           // 370: pmaster.SupportCardSimulation
	(*SupportCardSimulationGroup)(nil),                      // 371: pmaster.SupportCardSimulationGroup
	(*SupportCardSimulationGroupList)(nil),                  // 372: pmaster.SupportCardSimulationGroupList
	(*SupportCardSimulationList)(nil),                       // 373: pmaster.SupportCardSimulationList
	(*Terms)(nil),                                           // 374: pmaster.Terms
	(*TermsList)(nil),                                       // 375: pmaster.TermsList
	(*Tips)(nil),                                            // 376: pmaster.Tips
	(*TipsList)(nil),                                        // 377: pmaster.TipsList
	(*TitleAsset)(nil),                                      // 378: pmaster.TitleAsset
	(*TitleAssetList)(nil),                                  // 379: pmaster.TitleAssetList
	(*TitleVoice)(nil),                                      // 380: pmaster.TitleVoice
	(*TitleVoiceList)(nil),                                  // 381: pmaster.TitleVoiceList
	(*Tower)(nil),                                           // 382: pmaster.Tower
	(*TowerLayer)(nil),                                      // 383: pmaster.TowerLayer
	(*TowerLayerExam)(nil),                                  // 384: pmaster.TowerLayerExam
	(*TowerLayerExamList)(nil),                              // 385: pmaster.TowerLayerExamList
	(*TowerLayerList)(nil),                                  // 386: pmaster.TowerLayerList
	(*TowerLayerRank)(nil),                                  // 387: pmaster.TowerLayerRank
	(*TowerLayerRankList)(nil),                              // 388: pmaster.TowerLayerRankList
	(*TowerList)(nil),                                       // 389: pmaster.TowerList
	(*TowerTotalClearRankReward)(nil),                       // 390: pmaster.TowerTotalClearRankReward
	(*TowerTotalClearRankRewardList)(nil),                   // 391: pmaster.TowerTotalClearRankRewardList
	(*Tutorial)(nil),                                        // 392: pmaster.Tutorial
	(*TutorialCharacterVoice)(nil),                          // 393: pmaster.TutorialCharacterVoice
	(*TutorialCharacterVoiceList)(nil),                      // 394: pmaster.TutorialCharacterVoiceList
	(*TutorialList)(nil),                                    // 395: pmaster.TutorialList
	(*TutorialProduce)(nil),                                 // 396: pmaster.TutorialProduce
	(*TutorialProduceList)(nil),                             // 397: pmaster.TutorialProduceList
	(*TutorialProduceStep)(nil),                             // 398: pmaster.TutorialProduceStep
	(*TutorialProduceStepList)(nil),                         // 399: pmaster.TutorialProduceStepList
	(*Voice)(nil),                                           // 400: pmaster.Voice
	(*VoiceGroup)(nil),                                      // 401: pmaster.VoiceGroup
	(*VoiceGroupList)(nil),                                  // 402: pmaster.VoiceGroupList
	(*VoiceList)(nil),                                       // 403: pmaster.VoiceList
	(*VoiceRoster)(nil),                                     // 404: pmaster.VoiceRoster
	(*VoiceRosterList)(nil),                                 // 405: pmaster.VoiceRosterList
	(*Work)(nil),                                            // 406: pmaster.Work
	(*WorkLevel)(nil),                                       // 407: pmaster.WorkLevel
	(*WorkLevelList)(nil),                                   // 408: pmaster.WorkLevelList
	(*WorkLevelReward)(nil),                                 // 409: pmaster.WorkLevelReward
	(*WorkLevelRewardList)(nil),                             // 410: pmaster.WorkLevelRewardList
	(*WorkList)(nil),                                        // 411: pmaster.WorkList
	(*WorkMotion)(nil),                                      // 412: pmaster.WorkMotion
	(*WorkMotionList)(nil),                                  // 413: pmaster.WorkMotionList
	(*WorkSkip)(nil),                                        // 414: pmaster.WorkSkip
	(*WorkSkipList)(nil),                                    // 415: pmaster.WorkSkipList
	(*WorkTime)(nil),                                        // 416: pmaster.WorkTime
	(*WorkTimeList)(nil),                                    // 417: pmaster.WorkTimeList
	(*CharacterDearnessLevel_ProduceSkill)(nil),             // 418: pmaster.CharacterDearnessLevel.ProduceSkill
	(*CharacterTrueEndAchievement_Achievement)(nil),         // 419: pmaster.CharacterTrueEndAchievement.Achievement
	(*Item_Gasha)(nil),                                      // 420: pmaster.Item.Gasha
	(*ProduceCard_PlayEffect)(nil),                          // 421: pmaster.ProduceCard.PlayEffect
	(*ProduceEffect_ProduceReward)(nil),                     // 422: pmaster.ProduceEffect.ProduceReward
	(*ProduceItem_Skill)(nil),                               // 423: pmaster.ProduceItem.Skill
	(*ProducerLevel_UnlockTarget)(nil),                      // 424: pmaster.ProducerLevel.UnlockTarget
	(*PvpRateConfig_Stage)(nil),                             // 425: pmaster.PvpRateConfig.Stage
	(penum.AchievementCategory)(0),                          // 426: penum.AchievementCategory
	(penum.MissionType)(0),                                  // 427: penum.MissionType
	(*pcommon.Achievement)(nil),                             // 428: pcommon.Achievement
	(*pcommon.Reward)(nil),                                  // 429: pcommon.Reward
	(penum.AppReviewType)(0),                                // 430: penum.AppReviewType
	(penum.AssetDownloadType)(0),                            // 431: penum.AssetDownloadType
	(penum.CharacterPersonalityType)(0),                     // 432: penum.CharacterPersonalityType
	(penum.CharacterDetailType)(0),                          // 433: penum.CharacterDetailType
	(penum.PushType)(0),                                     // 434: penum.PushType
	(penum.ProduceType)(0),                                  // 435: penum.ProduceType
	(penum.ResourceType)(0),                                 // 436: penum.ResourceType
	(penum.ConditionOperatorType)(0),                        // 437: penum.ConditionOperatorType
	(penum.ConditionType)(0),                                // 438: penum.ConditionType
	(penum.ConditionMinMaxType)(0),                          // 439: penum.ConditionMinMaxType
	(penum.ResourceOriginType)(0),                           // 440: penum.ResourceOriginType
	(penum.CostumeFeatureType)(0),                           // 441: penum.CostumeFeatureType
	(penum.CostumeMotionType)(0),                            // 442: penum.CostumeMotionType
	(penum.ProduceExamEffectType)(0),                        // 443: penum.ProduceExamEffectType
	(penum.ProduceEffectType)(0),                            // 444: penum.ProduceEffectType
	(penum.EventType)(0),                                    // 445: penum.EventType
	(penum.ExamMotionTargetType)(0),                         // 446: penum.ExamMotionTargetType
	(penum.ExamMotionType)(0),                               // 447: penum.ExamMotionType
	(penum.ExamOutGameMotionType)(0),                        // 448: penum.ExamOutGameMotionType
	(penum.TutorialType)(0),                                 // 449: penum.TutorialType
	(penum.GashaAnimationRarity)(0),                         // 450: penum.GashaAnimationRarity
	(penum.GashaButtonType)(0),                              // 451: penum.GashaButtonType
	(penum.GashaLimitType)(0),                               // 452: penum.GashaLimitType
	(penum.GashaButtonAppealType)(0),                        // 453: penum.GashaButtonAppealType
	(*pcommon.GashaButton)(nil),                             // 454: pcommon.GashaButton
	(penum.HomeLocationType)(0),                             // 455: penum.HomeLocationType
	(penum.HomeMotionType)(0),                               // 456: penum.HomeMotionType
	(penum.HomeTimeType)(0),                                 // 457: penum.HomeTimeType
	(penum.IdolCardRarity)(0),                               // 458: penum.IdolCardRarity
	(penum.ProducePlanType)(0),                              // 459: penum.ProducePlanType
	(penum.IdolCardLevelLimitRank)(0),                       // 460: penum.IdolCardLevelLimitRank
	(penum.IdolCardLevelLimitEffectType)(0),                 // 461: penum.IdolCardLevelLimitEffectType
	(*pcommon.IdolCard)(nil),                                // 462: pcommon.IdolCard
	(penum.IdolCardPotentialRank)(0),                        // 463: penum.IdolCardPotentialRank
	(penum.IdolCardPotentialEffectType)(0),                  // 464: penum.IdolCardPotentialEffectType
	(penum.IdolCardDifficultyType)(0),                       // 465: penum.IdolCardDifficultyType
	(penum.ItemType)(0),                                     // 466: penum.ItemType
	(penum.ItemRarity)(0),                                   // 467: penum.ItemRarity
	(penum.ExchangeType)(0),                                 // 468: penum.ExchangeType
	(penum.MainTaskType)(0),                                 // 469: penum.MainTaskType
	(penum.MediaType)(0),                                    // 470: penum.MediaType
	(penum.MeishiBaseAssetType)(0),                          // 471: penum.MeishiBaseAssetType
	(penum.MeishiIllustrationType)(0),                       // 472: penum.MeishiIllustrationType
	(penum.SkillRarity)(0),                                  // 473: penum.SkillRarity
	(*pcommon.MemoryAbility)(nil),                           // 474: pcommon.MemoryAbility
	(penum.ResultGrade)(0),                                  // 475: penum.ResultGrade
	(*pcommon.ProduceCard)(nil),                             // 476: pcommon.ProduceCard
	(penum.ProduceMemoryProduceCardPhaseType)(0),            // 477: penum.ProduceMemoryProduceCardPhaseType
	(penum.MissionCategory)(0),                              // 478: penum.MissionCategory
	(penum.ResetTimingType)(0),                              // 479: penum.ResetTimingType
	(penum.PhotoBackgroundCategory)(0),                      // 480: penum.PhotoBackgroundCategory
	(penum.PhotoBackgroundTimeType)(0),                      // 481: penum.PhotoBackgroundTimeType
	(penum.PhotoPoseMotionType)(0),                          // 482: penum.PhotoPoseMotionType
	(penum.PhotoLookTargetType)(0),                          // 483: penum.PhotoLookTargetType
	(penum.ProduceAdvType)(0),                               // 484: penum.ProduceAdvType
	(penum.ProduceCardRarity)(0),                            // 485: penum.ProduceCardRarity
	(penum.ProduceCardCategory)(0),                          // 486: penum.ProduceCardCategory
	(penum.ExamCostType)(0),                                 // 487: penum.ExamCostType
	(penum.ProduceCardMovePositionType)(0),                  // 488: penum.ProduceCardMovePositionType
	(penum.ProduceCardMoveEffectTriggerType)(0),             // 489: penum.ProduceCardMoveEffectTriggerType
	(*pcommon.ProduceDescriptionElement)(nil),               // 490: pcommon.ProduceDescriptionElement
	(penum.ProduceCardGrowEffectType)(0),                    // 491: penum.ProduceCardGrowEffectType
	(penum.ProduceCardSearchStatusType)(0),                  // 492: penum.ProduceCardSearchStatusType
	(penum.ProduceCardOrderType)(0),                         // 493: penum.ProduceCardOrderType
	(penum.ProduceCardPositionType)(0),                      // 494: penum.ProduceCardPositionType
	(penum.ProduceCardStatusEnchantTriggerType)(0),          // 495: penum.ProduceCardStatusEnchantTriggerType
	(penum.ProduceExamFieldStatusType)(0),                   // 496: penum.ProduceExamFieldStatusType
	(penum.ProduceDrinkRarity)(0),                           // 497: penum.ProduceDrinkRarity
	(penum.ProduceResourceType)(0),                          // 498: penum.ProduceResourceType
	(penum.ProducePickRangeType)(0),                         // 499: penum.ProducePickRangeType
	(penum.ExamPlayType)(0),                                 // 500: penum.ExamPlayType
	(penum.ProduceExamAutoCardSelectEvaluationType)(0),      // 501: penum.ProduceExamAutoCardSelectEvaluationType
	(penum.ProduceExamAutoEvaluationType)(0),                // 502: penum.ProduceExamAutoEvaluationType
	(penum.ProduceExamTriggerCheckType)(0),                  // 503: penum.ProduceExamTriggerCheckType
	(penum.ProduceExamPhaseType)(0),                         // 504: penum.ProduceExamPhaseType
	(penum.ProduceStepLessonType)(0),                        // 505: penum.ProduceStepLessonType
	(penum.ProduceItemRarity)(0),                            // 506: penum.ProduceItemRarity
	(penum.ProduceItemEffectType)(0),                        // 507: penum.ProduceItemEffectType
	(*pcommon.ProduceItem)(nil),                             // 508: pcommon.ProduceItem
	(penum.ProduceLiveType)(0),                              // 509: penum.ProduceLiveType
	(penum.ProduceScheduleLocationType)(0),                  // 510: penum.ProduceScheduleLocationType
	(penum.ProduceScheduleStaminaMotionType)(0),             // 511: penum.ProduceScheduleStaminaMotionType
	(penum.ProduceScheduleMotionType)(0),                    // 512: penum.ProduceScheduleMotionType
	(penum.ProduceStartMotionType)(0),                       // 513: penum.ProduceStartMotionType
	(penum.ProduceStepType)(0),                              // 514: penum.ProduceStepType
	(penum.ProduceStepAuditionMotionType)(0),                // 515: penum.ProduceStepAuditionMotionType
	(penum.ProduceEventSuggestionType)(0),                   // 516: penum.ProduceEventSuggestionType
	(penum.ProduceEventType)(0),                             // 517: penum.ProduceEventType
	(penum.ProduceStepPhaseType)(0),                         // 518: penum.ProduceStepPhaseType
	(penum.ProduceStoryType)(0),                             // 519: penum.ProduceStoryType
	(penum.ProducePhaseType)(0),                             // 520: penum.ProducePhaseType
	(penum.PvpRateMotionType)(0),                            // 521: penum.PvpRateMotionType
	(penum.PvpRateGrade)(0),                                 // 522: penum.PvpRateGrade
	(penum.ResultGradeType)(0),                              // 523: penum.ResultGradeType
	(penum.RuleType)(0),                                     // 524: penum.RuleType
	(penum.PlatformType)(0),                                 // 525: penum.PlatformType
	(penum.ShopType)(0),                                     // 526: penum.ShopType
	(penum.Weekday)(0),                                      // 527: penum.Weekday
	(penum.ShopItemLabelType)(0),                            // 528: penum.ShopItemLabelType
	(penum.StoryType)(0),                                    // 529: penum.StoryType
	(penum.StoryEventType)(0),                               // 530: penum.StoryEventType
	(penum.SupportCardType)(0),                              // 531: penum.SupportCardType
	(penum.SupportCardRarity)(0),                            // 532: penum.SupportCardRarity
	(penum.ProduceParameterType)(0),                         // 533: penum.ProduceParameterType
	(penum.SupportCardLevelLimitRank)(0),                    // 534: penum.SupportCardLevelLimitRank
	(*pcommon.SupportCard)(nil),                             // 535: pcommon.SupportCard
	(penum.TermsType)(0),                                    // 536: penum.TermsType
	(penum.TipsType)(0),                                     // 537: penum.TipsType
	(penum.ViewAreaType)(0),                                 // 538: penum.ViewAreaType
	(penum.TutorialNavigationType)(0),                       // 539: penum.TutorialNavigationType
	(penum.TutorialNavigationPositionType)(0),               // 540: penum.TutorialNavigationPositionType
	(penum.TutorialProduceCommandType)(0),                   // 541: penum.TutorialProduceCommandType
	(penum.TutorialCharacterVoiceType)(0),                   // 542: penum.TutorialCharacterVoiceType
	(penum.VoicePlayScreenType)(0),                          // 543: penum.VoicePlayScreenType
	(penum.WorkType)(0),                                     // 544: penum.WorkType
	(penum.WorkMotionType)(0),                               // 545: penum.WorkMotionType
	(penum.ProducerLevelUnlockType)(0),                      // 546: penum.ProducerLevelUnlockType
	(penum.PvpRateStageType)(0),                             // 547: penum.PvpRateStageType
}
var file_pmaster_proto_depIdxs = []int32{
	426, // 0: pmaster.Achievement.category:type_name -> penum.AchievementCategory
	427, // 1: pmaster.Achievement.missionType:type_name -> penum.MissionType
	428, // 2: pmaster.AchievementList.list:type_name -> pcommon.Achievement
	429, // 3: pmaster.AchievementProgress.rewards:type_name -> pcommon.Reward
	2,   // 4: pmaster.AchievementProgressList.list:type_name -> pmaster.AchievementProgress
	430, // 5: pmaster.AppReview.type:type_name -> penum.AppReviewType
	4,   // 6: pmaster.AppReviewList.list:type_name -> pmaster.AppReview
	431, // 7: pmaster.AssetDownload.type:type_name -> penum.AssetDownloadType
	6,   // 8: pmaster.AssetDownloadList.list:type_name -> pmaster.AssetDownload
	8,   // 9: pmaster.BgmList.list:type_name -> pmaster.Bgm
	432, // 10: pmaster.Character.personalityType:type_name -> penum.CharacterPersonalityType
	11,  // 11: pmaster.CharacterAdvList.list:type_name -> pmaster.CharacterAdv
	13,  // 12: pmaster.CharacterColorList.list:type_name -> pmaster.CharacterColor
	418, // 13: pmaster.CharacterDearnessLevel.produceSkills:type_name -> pmaster.CharacterDearnessLevel.ProduceSkill
	429, // 14: pmaster.CharacterDearnessLevel.rewards:type_name -> pcommon.Reward
	15,  // 15: pmaster.CharacterDearnessLevelList.list:type_name -> pmaster.CharacterDearnessLevel
	17,  // 16: pmaster.CharacterDearnessStoryGashaCampaignList.list:type_name -> pmaster.CharacterDearnessStoryGashaCampaign
	433, // 17: pmaster.CharacterDetail.type:type_name -> penum.CharacterDetailType
	19,  // 18: pmaster.CharacterDetailList.list:type_name -> pmaster.CharacterDetail
	10,  // 19: pmaster.CharacterList.list:type_name -> pmaster.Character
	434, // 20: pmaster.CharacterPushMessage.type:type_name -> penum.PushType
	22,  // 21: pmaster.CharacterPushMessageList.list:type_name -> pmaster.CharacterPushMessage
	435, // 22: pmaster.CharacterTrueEndAchievement.produceType:type_name -> penum.ProduceType
	419, // 23: pmaster.CharacterTrueEndAchievement.trueEndAchievement:type_name -> pmaster.CharacterTrueEndAchievement.Achievement
	419, // 24: pmaster.CharacterTrueEndAchievement.targetAchievements:type_name -> pmaster.CharacterTrueEndAchievement.Achievement
	24,  // 25: pmaster.CharacterTrueEndAchievementList.list:type_name -> pmaster.CharacterTrueEndAchievement
	435, // 26: pmaster.CharacterTrueEndBonus.produceType:type_name -> penum.ProduceType
	26,  // 27: pmaster.CharacterTrueEndBonusList.list:type_name -> pmaster.CharacterTrueEndBonus
	436, // 28: pmaster.CoinGashaButton.resourceType:type_name -> penum.ResourceType
	28,  // 29: pmaster.CoinGashaButtonList.list:type_name -> pmaster.CoinGashaButton
	437, // 30: pmaster.ConditionSet.conditionOperatorType:type_name -> penum.ConditionOperatorType
	438, // 31: pmaster.ConditionSet.conditionType:type_name -> penum.ConditionType
	439, // 32: pmaster.ConditionSet.minMaxType:type_name -> penum.ConditionMinMaxType
	30,  // 33: pmaster.ConditionSetList.list:type_name -> pmaster.ConditionSet
	436, // 34: pmaster.ConsumptionSet.resourceType:type_name -> penum.ResourceType
	32,  // 35: pmaster.ConsumptionSetList.list:type_name -> pmaster.ConsumptionSet
	440, // 36: pmaster.Costume.resourceOriginType:type_name -> penum.ResourceOriginType
	441, // 37: pmaster.Costume.invalidCostumeFeatureTypes:type_name -> penum.CostumeFeatureType
	35,  // 38: pmaster.CostumeColorGroupList.list:type_name -> pmaster.CostumeColorGroup
	440, // 39: pmaster.CostumeHead.resourceOriginType:type_name -> penum.ResourceOriginType
	37,  // 40: pmaster.CostumeHeadList.list:type_name -> pmaster.CostumeHead
	34,  // 41: pmaster.CostumeList.list:type_name -> pmaster.Costume
	442, // 42: pmaster.CostumeMotion.motionType:type_name -> penum.CostumeMotionType
	40,  // 43: pmaster.CostumeMotionList.list:type_name -> pmaster.CostumeMotion
	42,  // 44: pmaster.CostumePhotoGroupList.list:type_name -> pmaster.CostumePhotoGroup
	44,  // 45: pmaster.DearnessStoryCampaignList.list:type_name -> pmaster.DearnessStoryCampaign
	46,  // 46: pmaster.DeepLinkTransitionList.list:type_name -> pmaster.DeepLinkTransition
	443, // 47: pmaster.EffectGroup.examEffectType:type_name -> penum.ProduceExamEffectType
	444, // 48: pmaster.EffectGroup.produceEffectType:type_name -> penum.ProduceEffectType
	48,  // 49: pmaster.EffectGroupList.list:type_name -> pmaster.EffectGroup
	445, // 50: pmaster.EventLabel.eventType:type_name -> penum.EventType
	50,  // 51: pmaster.EventLabelList.list:type_name -> pmaster.EventLabel
	52,  // 52: pmaster.EventStoryCampaignList.list:type_name -> pmaster.EventStoryCampaign
	54,  // 53: pmaster.ExamInitialDeckList.list:type_name -> pmaster.ExamInitialDeck
	446, // 54: pmaster.ExamMotion.type:type_name -> penum.ExamMotionTargetType
	447, // 55: pmaster.ExamMotion.motionType:type_name -> penum.ExamMotionType
	56,  // 56: pmaster.ExamMotionList.list:type_name -> pmaster.ExamMotion
	446, // 57: pmaster.ExamOutGameMotion.type:type_name -> penum.ExamMotionTargetType
	448, // 58: pmaster.ExamOutGameMotion.motionType:type_name -> penum.ExamOutGameMotionType
	58,  // 59: pmaster.ExamOutGameMotionList.list:type_name -> pmaster.ExamOutGameMotion
	60,  // 60: pmaster.ExamSettingList.list:type_name -> pmaster.ExamSetting
	62,  // 61: pmaster.ExamSimulationList.list:type_name -> pmaster.ExamSimulation
	449, // 62: pmaster.FeatureLock.tutorialType:type_name -> penum.TutorialType
	64,  // 63: pmaster.FeatureLockList.list:type_name -> pmaster.FeatureLock
	450, // 64: pmaster.GashaAnimation.rarity:type_name -> penum.GashaAnimationRarity
	66,  // 65: pmaster.GashaAnimationList.list:type_name -> pmaster.GashaAnimation
	451, // 66: pmaster.GashaButton.type:type_name -> penum.GashaButtonType
	436, // 67: pmaster.GashaButton.resourceType:type_name -> penum.ResourceType
	452, // 68: pmaster.GashaButton.limitType:type_name -> penum.GashaLimitType
	452, // 69: pmaster.GashaButton.discountLimitType:type_name -> penum.GashaLimitType
	453, // 70: pmaster.GashaButton.appealType:type_name -> penum.GashaButtonAppealType
	454, // 71: pmaster.GashaButtonList.list:type_name -> pcommon.GashaButton
	70,  // 72: pmaster.GuildDonationItemList.list:type_name -> pmaster.GuildDonationItem
	72,  // 73: pmaster.GuildReactionList.list:type_name -> pmaster.GuildReaction
	74,  // 74: pmaster.HelpCategoryList.list:type_name -> pmaster.HelpCategory
	76,  // 75: pmaster.HelpContentList.list:type_name -> pmaster.HelpContent
	78,  // 76: pmaster.HelpInfoList.list:type_name -> pmaster.HelpInfo
	80,  // 77: pmaster.HomeBoardList.list:type_name -> pmaster.HomeBoard
	82,  // 78: pmaster.HomeMonitorList.list:type_name -> pmaster.HomeMonitor
	455, // 79: pmaster.HomeMotion.locationType:type_name -> penum.HomeLocationType
	456, // 80: pmaster.HomeMotion.motionType:type_name -> penum.HomeMotionType
	84,  // 81: pmaster.HomeMotionList.list:type_name -> pmaster.HomeMotion
	457, // 82: pmaster.HomeTime.type:type_name -> penum.HomeTimeType
	86,  // 83: pmaster.HomeTimeList.list:type_name -> pmaster.HomeTime
	458, // 84: pmaster.IdolCard.rarity:type_name -> penum.IdolCardRarity
	459, // 85: pmaster.IdolCard.planType:type_name -> penum.ProducePlanType
	443, // 86: pmaster.IdolCard.examEffectType:type_name -> penum.ProduceExamEffectType
	460, // 87: pmaster.IdolCardLevelLimit.rank:type_name -> penum.IdolCardLevelLimitRank
	89,  // 88: pmaster.IdolCardLevelLimitList.list:type_name -> pmaster.IdolCardLevelLimit
	460, // 89: pmaster.IdolCardLevelLimitProduceSkill.rank:type_name -> penum.IdolCardLevelLimitRank
	91,  // 90: pmaster.IdolCardLevelLimitProduceSkillList.list:type_name -> pmaster.IdolCardLevelLimitProduceSkill
	460, // 91: pmaster.IdolCardLevelLimitStatusUp.rank:type_name -> penum.IdolCardLevelLimitRank
	461, // 92: pmaster.IdolCardLevelLimitStatusUp.effectTypes:type_name -> penum.IdolCardLevelLimitEffectType
	93,  // 93: pmaster.IdolCardLevelLimitStatusUpList.list:type_name -> pmaster.IdolCardLevelLimitStatusUp
	462, // 94: pmaster.IdolCardList.list:type_name -> pcommon.IdolCard
	429, // 95: pmaster.IdolCardPiece.exchangeReward:type_name -> pcommon.Reward
	96,  // 96: pmaster.IdolCardPieceList.list:type_name -> pmaster.IdolCardPiece
	458, // 97: pmaster.IdolCardPieceQuantity.rarity:type_name -> penum.IdolCardRarity
	98,  // 98: pmaster.IdolCardPieceQuantityList.list:type_name -> pmaster.IdolCardPieceQuantity
	463, // 99: pmaster.IdolCardPotential.rank:type_name -> penum.IdolCardPotentialRank
	464, // 100: pmaster.IdolCardPotential.effectTypes:type_name -> penum.IdolCardPotentialEffectType
	100, // 101: pmaster.IdolCardPotentialList.list:type_name -> pmaster.IdolCardPotential
	463, // 102: pmaster.IdolCardPotentialProduceSkill.rank:type_name -> penum.IdolCardPotentialRank
	102, // 103: pmaster.IdolCardPotentialProduceSkillList.list:type_name -> pmaster.IdolCardPotentialProduceSkill
	104, // 104: pmaster.IdolCardSimulationList.list:type_name -> pmaster.IdolCardSimulation
	106, // 105: pmaster.IdolCardSkinList.list:type_name -> pmaster.IdolCardSkin
	465, // 106: pmaster.IdolCardSkinSelectReward.difficultyType:type_name -> penum.IdolCardDifficultyType
	108, // 107: pmaster.IdolCardSkinSelectRewardList.list:type_name -> pmaster.IdolCardSkinSelectReward
	110, // 108: pmaster.InvitationMissionList.list:type_name -> pmaster.InvitationMission
	429, // 109: pmaster.InvitationPointReward.reward:type_name -> pcommon.Reward
	112, // 110: pmaster.InvitationPointRewardList.list:type_name -> pmaster.InvitationPointReward
	466, // 111: pmaster.Item.type:type_name -> penum.ItemType
	467, // 112: pmaster.Item.rarity:type_name -> penum.ItemRarity
	468, // 113: pmaster.Item.exchangeType:type_name -> penum.ExchangeType
	420, // 114: pmaster.Item.gashas:type_name -> pmaster.Item.Gasha
	114, // 115: pmaster.ItemList.list:type_name -> pmaster.Item
	116, // 116: pmaster.JewelConsumptionCountList.list:type_name -> pmaster.JewelConsumptionCount
	466, // 117: pmaster.LimitItem.type:type_name -> penum.ItemType
	118, // 118: pmaster.LimitItemList.list:type_name -> pmaster.LimitItem
	120, // 119: pmaster.LocalizationList.list:type_name -> pmaster.Localization
	122, // 120: pmaster.LoginBonusMotionList.list:type_name -> pmaster.LoginBonusMotion
	124, // 121: pmaster.MainStoryChapterList.list:type_name -> pmaster.MainStoryChapter
	126, // 122: pmaster.MainStoryPartList.list:type_name -> pmaster.MainStoryPart
	427, // 123: pmaster.MainTask.missionType:type_name -> penum.MissionType
	429, // 124: pmaster.MainTask.rewards:type_name -> pcommon.Reward
	429, // 125: pmaster.MainTask.additionalRewards:type_name -> pcommon.Reward
	449, // 126: pmaster.MainTask.unlockFeatureTutorialType:type_name -> penum.TutorialType
	469, // 127: pmaster.MainTaskGroup.mainTaskType:type_name -> penum.MainTaskType
	129, // 128: pmaster.MainTaskGroupList.list:type_name -> pmaster.MainTaskGroup
	427, // 129: pmaster.MainTaskIcon.missionType:type_name -> penum.MissionType
	131, // 130: pmaster.MainTaskIconList.list:type_name -> pmaster.MainTaskIcon
	128, // 131: pmaster.MainTaskList.list:type_name -> pmaster.MainTask
	470, // 132: pmaster.Media.mediaType:type_name -> penum.MediaType
	134, // 133: pmaster.MediaList.list:type_name -> pmaster.Media
	471, // 134: pmaster.MeishiBaseAsset.meishiBaseAssetType:type_name -> penum.MeishiBaseAssetType
	136, // 135: pmaster.MeishiBaseAssetList.list:type_name -> pmaster.MeishiBaseAsset
	138, // 136: pmaster.MeishiBaseColorList.list:type_name -> pmaster.MeishiBaseColor
	472, // 137: pmaster.MeishiIllustrationAsset.type:type_name -> penum.MeishiIllustrationType
	140, // 138: pmaster.MeishiIllustrationAssetList.list:type_name -> pmaster.MeishiIllustrationAsset
	142, // 139: pmaster.MeishiTextColorList.list:type_name -> pmaster.MeishiTextColor
	473, // 140: pmaster.MemoryAbility.rarity:type_name -> penum.SkillRarity
	474, // 141: pmaster.MemoryAbilityList.list:type_name -> pcommon.MemoryAbility
	459, // 142: pmaster.MemoryExchangeItem.planType:type_name -> penum.ProducePlanType
	146, // 143: pmaster.MemoryExchangeItemList.list:type_name -> pmaster.MemoryExchangeItem
	475, // 144: pmaster.MemoryExchangeItemQuantity.grade:type_name -> penum.ResultGrade
	148, // 145: pmaster.MemoryExchangeItemQuantityList.list:type_name -> pmaster.MemoryExchangeItemQuantity
	475, // 146: pmaster.MemoryGift.grade:type_name -> penum.ResultGrade
	459, // 147: pmaster.MemoryGift.planType:type_name -> penum.ProducePlanType
	476, // 148: pmaster.MemoryGift.produceCard:type_name -> pcommon.ProduceCard
	477, // 149: pmaster.MemoryGift.produceCardPhaseType:type_name -> penum.ProduceMemoryProduceCardPhaseType
	474, // 150: pmaster.MemoryGift.memoryAbilities:type_name -> pcommon.MemoryAbility
	476, // 151: pmaster.MemoryGift.examBattleProduceCards:type_name -> pcommon.ProduceCard
	150, // 152: pmaster.MemoryGiftList.list:type_name -> pmaster.MemoryGift
	152, // 153: pmaster.MemoryTagList.list:type_name -> pmaster.MemoryTag
	478, // 154: pmaster.Mission.category:type_name -> penum.MissionCategory
	427, // 155: pmaster.Mission.type:type_name -> penum.MissionType
	156, // 156: pmaster.MissionDailyReleaseGroupList.list:type_name -> pmaster.MissionDailyReleaseGroup
	155, // 157: pmaster.MissionDailyReleaseList.list:type_name -> pmaster.MissionDailyRelease
	429, // 158: pmaster.MissionGroup.rewards:type_name -> pcommon.Reward
	159, // 159: pmaster.MissionGroupList.list:type_name -> pmaster.MissionGroup
	154, // 160: pmaster.MissionList.list:type_name -> pmaster.Mission
	163, // 161: pmaster.MissionPanelSheetGroupList.list:type_name -> pmaster.MissionPanelSheetGroup
	162, // 162: pmaster.MissionPanelSheetList.list:type_name -> pmaster.MissionPanelSheet
	166, // 163: pmaster.MissionPassList.list:type_name -> pmaster.MissionPass
	168, // 164: pmaster.MissionPassPointList.list:type_name -> pmaster.MissionPassPoint
	429, // 165: pmaster.MissionPassProgress.normalReward:type_name -> pcommon.Reward
	429, // 166: pmaster.MissionPassProgress.premiumReward:type_name -> pcommon.Reward
	170, // 167: pmaster.MissionPassProgressList.list:type_name -> pmaster.MissionPassProgress
	479, // 168: pmaster.MissionPoint.resetTimingType:type_name -> penum.ResetTimingType
	172, // 169: pmaster.MissionPointList.list:type_name -> pmaster.MissionPoint
	429, // 170: pmaster.MissionPointRewardSet.rewards:type_name -> pcommon.Reward
	174, // 171: pmaster.MissionPointRewardSetList.list:type_name -> pmaster.MissionPointRewardSet
	429, // 172: pmaster.MissionProgress.rewards:type_name -> pcommon.Reward
	176, // 173: pmaster.MissionProgressList.list:type_name -> pmaster.MissionProgress
	178, // 174: pmaster.MoneyList.list:type_name -> pmaster.Money
	181, // 175: pmaster.MusicHotList.list:type_name -> pmaster.MusicHot
	180, // 176: pmaster.MusicList.list:type_name -> pmaster.Music
	184, // 177: pmaster.MusicSingerList.list:type_name -> pmaster.MusicSinger
	480, // 178: pmaster.PhotoBackground.category:type_name -> penum.PhotoBackgroundCategory
	481, // 179: pmaster.PhotoBackground.timeTypes:type_name -> penum.PhotoBackgroundTimeType
	186, // 180: pmaster.PhotoBackgroundList.list:type_name -> pmaster.PhotoBackground
	188, // 181: pmaster.PhotoLookTargetVoiceCharacterList.list:type_name -> pmaster.PhotoLookTargetVoiceCharacter
	482, // 182: pmaster.PhotoPose.motionType:type_name -> penum.PhotoPoseMotionType
	483, // 183: pmaster.PhotoPose.lookTargetType:type_name -> penum.PhotoLookTargetType
	190, // 184: pmaster.PhotoPoseList.list:type_name -> pmaster.PhotoPose
	192, // 185: pmaster.PhotoReactionVoiceGroupList.list:type_name -> pmaster.PhotoReactionVoiceGroup
	194, // 186: pmaster.PhotoWaitVoiceCharacterList.list:type_name -> pmaster.PhotoWaitVoiceCharacter
	196, // 187: pmaster.PhotoWaitVoiceGroupList.list:type_name -> pmaster.PhotoWaitVoiceGroup
	435, // 188: pmaster.ProduceAdv.produceType:type_name -> penum.ProduceType
	484, // 189: pmaster.ProduceAdv.type:type_name -> penum.ProduceAdvType
	199, // 190: pmaster.ProduceAdvList.list:type_name -> pmaster.ProduceAdv
	485, // 191: pmaster.ProduceCard.rarity:type_name -> penum.ProduceCardRarity
	459, // 192: pmaster.ProduceCard.planType:type_name -> penum.ProducePlanType
	486, // 193: pmaster.ProduceCard.category:type_name -> penum.ProduceCardCategory
	487, // 194: pmaster.ProduceCard.costType:type_name -> penum.ExamCostType
	421, // 195: pmaster.ProduceCard.playEffects:type_name -> pmaster.ProduceCard.PlayEffect
	488, // 196: pmaster.ProduceCard.playMovePositionType:type_name -> penum.ProduceCardMovePositionType
	489, // 197: pmaster.ProduceCard.moveEffectTriggerType:type_name -> penum.ProduceCardMoveEffectTriggerType
	490, // 198: pmaster.ProduceCard.descriptions:type_name -> pcommon.ProduceDescriptionElement
	491, // 199: pmaster.ProduceCardGrowEffect.effectTypes:type_name -> penum.ProduceCardGrowEffectType
	487, // 200: pmaster.ProduceCardGrowEffect.costTypes:type_name -> penum.ExamCostType
	202, // 201: pmaster.ProduceCardGrowEffectList.list:type_name -> pmaster.ProduceCardGrowEffect
	476, // 202: pmaster.ProduceCardList.list:type_name -> pcommon.ProduceCard
	205, // 203: pmaster.ProduceCardRandomPoolList.list:type_name -> pmaster.ProduceCardRandomPool
	490, // 204: pmaster.ProduceCardSearch.descriptions:type_name -> pcommon.ProduceDescriptionElement
	459, // 205: pmaster.ProduceCardSearch.planType:type_name -> penum.ProducePlanType
	486, // 206: pmaster.ProduceCardSearch.cardCategories:type_name -> penum.ProduceCardCategory
	492, // 207: pmaster.ProduceCardSearch.cardStatusType:type_name -> penum.ProduceCardSearchStatusType
	493, // 208: pmaster.ProduceCardSearch.orderType:type_name -> penum.ProduceCardOrderType
	494, // 209: pmaster.ProduceCardSearch.cardPositionType:type_name -> penum.ProduceCardPositionType
	439, // 210: pmaster.ProduceCardSearch.staminaMinMaxType:type_name -> penum.ConditionMinMaxType
	443, // 211: pmaster.ProduceCardSearch.examEffectType:type_name -> penum.ProduceExamEffectType
	207, // 212: pmaster.ProduceCardSearchList.list:type_name -> pmaster.ProduceCardSearch
	210, // 213: pmaster.ProduceCardSimulationGroupList.list:type_name -> pmaster.ProduceCardSimulationGroup
	209, // 214: pmaster.ProduceCardSimulationList.list:type_name -> pmaster.ProduceCardSimulation
	213, // 215: pmaster.ProduceCardStatusEffectList.list:type_name -> pmaster.ProduceCardStatusEffect
	495, // 216: pmaster.ProduceCardStatusEnchant.triggerType:type_name -> penum.ProduceCardStatusEnchantTriggerType
	496, // 217: pmaster.ProduceCardStatusEnchant.fieldStatusType:type_name -> penum.ProduceExamFieldStatusType
	215, // 218: pmaster.ProduceCardStatusEnchantList.list:type_name -> pmaster.ProduceCardStatusEnchant
	217, // 219: pmaster.ProduceCardTagList.list:type_name -> pmaster.ProduceCardTag
	219, // 220: pmaster.ProduceChallengeCharacterList.list:type_name -> pmaster.ProduceChallengeCharacter
	221, // 221: pmaster.ProduceChallengeSlotList.list:type_name -> pmaster.ProduceChallengeSlot
	490, // 222: pmaster.ProduceDescription.descriptions:type_name -> pcommon.ProduceDescriptionElement
	223, // 223: pmaster.ProduceDescriptionList.list:type_name -> pmaster.ProduceDescription
	491, // 224: pmaster.ProduceDescriptionProduceCardGrowEffectType.type:type_name -> penum.ProduceCardGrowEffectType
	225, // 225: pmaster.ProduceDescriptionProduceCardGrowEffectTypeList.list:type_name -> pmaster.ProduceDescriptionProduceCardGrowEffectType
	444, // 226: pmaster.ProduceDescriptionProduceEffectType.type:type_name -> penum.ProduceEffectType
	227, // 227: pmaster.ProduceDescriptionProduceEffectTypeList.list:type_name -> pmaster.ProduceDescriptionProduceEffectType
	443, // 228: pmaster.ProduceDescriptionProduceExamEffectType.type:type_name -> penum.ProduceExamEffectType
	229, // 229: pmaster.ProduceDescriptionProduceExamEffectTypeList.list:type_name -> pmaster.ProduceDescriptionProduceExamEffectType
	459, // 230: pmaster.ProduceDescriptionProducePlanType.type:type_name -> penum.ProducePlanType
	231, // 231: pmaster.ProduceDescriptionProducePlanTypeList.list:type_name -> pmaster.ProduceDescriptionProducePlanType
	459, // 232: pmaster.ProduceDrink.planType:type_name -> penum.ProducePlanType
	497, // 233: pmaster.ProduceDrink.rarity:type_name -> penum.ProduceDrinkRarity
	490, // 234: pmaster.ProduceDrink.descriptions:type_name -> pcommon.ProduceDescriptionElement
	234, // 235: pmaster.ProduceDrinkEffectList.list:type_name -> pmaster.ProduceDrinkEffect
	233, // 236: pmaster.ProduceDrinkList.list:type_name -> pmaster.ProduceDrink
	444, // 237: pmaster.ProduceEffect.produceEffectType:type_name -> penum.ProduceEffectType
	498, // 238: pmaster.ProduceEffect.produceResourceType:type_name -> penum.ProduceResourceType
	422, // 239: pmaster.ProduceEffect.produceRewards:type_name -> pmaster.ProduceEffect.ProduceReward
	499, // 240: pmaster.ProduceEffect.pickRangeType:type_name -> penum.ProducePickRangeType
	444, // 241: pmaster.ProduceEffectIcon.type:type_name -> penum.ProduceEffectType
	498, // 242: pmaster.ProduceEffectIcon.resourceType:type_name -> penum.ProduceResourceType
	238, // 243: pmaster.ProduceEffectIconList.list:type_name -> pmaster.ProduceEffectIcon
	237, // 244: pmaster.ProduceEffectList.list:type_name -> pmaster.ProduceEffect
	241, // 245: pmaster.ProduceEventCharacterGrowthList.list:type_name -> pmaster.ProduceEventCharacterGrowth
	243, // 246: pmaster.ProduceEventSupportCardList.list:type_name -> pmaster.ProduceEventSupportCard
	500, // 247: pmaster.ProduceExamAutoCardSelectEvaluation.type:type_name -> penum.ExamPlayType
	443, // 248: pmaster.ProduceExamAutoCardSelectEvaluation.examEffectType:type_name -> penum.ProduceExamEffectType
	501, // 249: pmaster.ProduceExamAutoCardSelectEvaluation.evaluationType:type_name -> penum.ProduceExamAutoCardSelectEvaluationType
	245, // 250: pmaster.ProduceExamAutoCardSelectEvaluationList.list:type_name -> pmaster.ProduceExamAutoCardSelectEvaluation
	500, // 251: pmaster.ProduceExamAutoEvaluation.type:type_name -> penum.ExamPlayType
	443, // 252: pmaster.ProduceExamAutoEvaluation.examEffectType:type_name -> penum.ProduceExamEffectType
	502, // 253: pmaster.ProduceExamAutoEvaluation.evaluationType:type_name -> penum.ProduceExamAutoEvaluationType
	247, // 254: pmaster.ProduceExamAutoEvaluationList.list:type_name -> pmaster.ProduceExamAutoEvaluation
	500, // 255: pmaster.ProduceExamAutoResourceEvaluation.type:type_name -> penum.ExamPlayType
	498, // 256: pmaster.ProduceExamAutoResourceEvaluation.resourceType:type_name -> penum.ProduceResourceType
	502, // 257: pmaster.ProduceExamAutoResourceEvaluation.evaluationType:type_name -> penum.ProduceExamAutoEvaluationType
	249, // 258: pmaster.ProduceExamAutoResourceEvaluationList.list:type_name -> pmaster.ProduceExamAutoResourceEvaluation
	500, // 259: pmaster.ProduceExamAutoTriggerEvaluation.type:type_name -> penum.ExamPlayType
	251, // 260: pmaster.ProduceExamAutoTriggerEvaluationList.list:type_name -> pmaster.ProduceExamAutoTriggerEvaluation
	253, // 261: pmaster.ProduceExamBattleConfigList.list:type_name -> pmaster.ProduceExamBattleConfig
	255, // 262: pmaster.ProduceExamBattleNpcGroupList.list:type_name -> pmaster.ProduceExamBattleNpcGroup
	257, // 263: pmaster.ProduceExamBattleNpcMobList.list:type_name -> pmaster.ProduceExamBattleNpcMob
	259, // 264: pmaster.ProduceExamBattleScoreConfigList.list:type_name -> pmaster.ProduceExamBattleScoreConfig
	443, // 265: pmaster.ProduceExamEffect.effectType:type_name -> penum.ProduceExamEffectType
	490, // 266: pmaster.ProduceExamEffect.descriptions:type_name -> pcommon.ProduceDescriptionElement
	443, // 267: pmaster.ProduceExamEffect.targetExamEffectType:type_name -> penum.ProduceExamEffectType
	488, // 268: pmaster.ProduceExamEffect.movePositionType:type_name -> penum.ProduceCardMovePositionType
	499, // 269: pmaster.ProduceExamEffect.pickRangeType:type_name -> penum.ProducePickRangeType
	261, // 270: pmaster.ProduceExamEffectList.list:type_name -> pmaster.ProduceExamEffect
	496, // 271: pmaster.ProduceExamGimmickEffectGroup.fieldStatusType:type_name -> penum.ProduceExamFieldStatusType
	503, // 272: pmaster.ProduceExamGimmickEffectGroup.fieldStatusCheckType:type_name -> penum.ProduceExamTriggerCheckType
	490, // 273: pmaster.ProduceExamGimmickEffectGroup.descriptions:type_name -> pcommon.ProduceDescriptionElement
	490, // 274: pmaster.ProduceExamGimmickEffectGroup.fieldStatusDescriptions:type_name -> pcommon.ProduceDescriptionElement
	490, // 275: pmaster.ProduceExamGimmickEffectGroup.effectDescriptions:type_name -> pcommon.ProduceDescriptionElement
	263, // 276: pmaster.ProduceExamGimmickEffectGroupList.list:type_name -> pmaster.ProduceExamGimmickEffectGroup
	490, // 277: pmaster.ProduceExamStatusEnchant.descriptions:type_name -> pcommon.ProduceDescriptionElement
	265, // 278: pmaster.ProduceExamStatusEnchantList.list:type_name -> pmaster.ProduceExamStatusEnchant
	504, // 279: pmaster.ProduceExamTrigger.phaseTypes:type_name -> penum.ProduceExamPhaseType
	503, // 280: pmaster.ProduceExamTrigger.fieldStatusCheckTypes:type_name -> penum.ProduceExamTriggerCheckType
	496, // 281: pmaster.ProduceExamTrigger.fieldStatusTypes:type_name -> penum.ProduceExamFieldStatusType
	488, // 282: pmaster.ProduceExamTrigger.cardMovePositionType:type_name -> penum.ProduceCardMovePositionType
	443, // 283: pmaster.ProduceExamTrigger.effectTypes:type_name -> penum.ProduceExamEffectType
	505, // 284: pmaster.ProduceExamTrigger.lessonType:type_name -> penum.ProduceStepLessonType
	490, // 285: pmaster.ProduceExamTrigger.descriptions:type_name -> pcommon.ProduceDescriptionElement
	267, // 286: pmaster.ProduceExamTriggerList.list:type_name -> pmaster.ProduceExamTrigger
	435, // 287: pmaster.ProduceGroup.type:type_name -> penum.ProduceType
	269, // 288: pmaster.ProduceGroupList.list:type_name -> pmaster.ProduceGroup
	271, // 289: pmaster.ProduceHighScoreList.list:type_name -> pmaster.ProduceHighScore
	506, // 290: pmaster.ProduceItem.rarity:type_name -> penum.ProduceItemRarity
	459, // 291: pmaster.ProduceItem.planType:type_name -> penum.ProducePlanType
	423, // 292: pmaster.ProduceItem.skills:type_name -> pmaster.ProduceItem.Skill
	490, // 293: pmaster.ProduceItem.descriptions:type_name -> pcommon.ProduceDescriptionElement
	274, // 294: pmaster.ProduceItemChallengeGroupList.list:type_name -> pmaster.ProduceItemChallengeGroup
	507, // 295: pmaster.ProduceItemEffect.effectType:type_name -> penum.ProduceItemEffectType
	276, // 296: pmaster.ProduceItemEffectList.list:type_name -> pmaster.ProduceItemEffect
	508, // 297: pmaster.ProduceItemList.list:type_name -> pcommon.ProduceItem
	280, // 298: pmaster.ProduceItemSimulationGroupList.list:type_name -> pmaster.ProduceItemSimulationGroup
	279, // 299: pmaster.ProduceItemSimulationList.list:type_name -> pmaster.ProduceItemSimulation
	198, // 300: pmaster.ProduceList.list:type_name -> pmaster.Produce
	509, // 301: pmaster.ProduceLive.type:type_name -> penum.ProduceLiveType
	509, // 302: pmaster.ProduceLiveCommon.type:type_name -> penum.ProduceLiveType
	285, // 303: pmaster.ProduceLiveCommonList.list:type_name -> pmaster.ProduceLiveCommon
	284, // 304: pmaster.ProduceLiveList.list:type_name -> pmaster.ProduceLive
	288, // 305: pmaster.ProduceNavigationList.list:type_name -> pmaster.ProduceNavigation
	509, // 306: pmaster.ProduceResultMotion.liveType:type_name -> penum.ProduceLiveType
	290, // 307: pmaster.ProduceResultMotionList.list:type_name -> pmaster.ProduceResultMotion
	510, // 308: pmaster.ProduceScheduleBackground.locationType:type_name -> penum.ProduceScheduleLocationType
	292, // 309: pmaster.ProduceScheduleBackgroundList.list:type_name -> pmaster.ProduceScheduleBackground
	510, // 310: pmaster.ProduceScheduleMotion.locationType:type_name -> penum.ProduceScheduleLocationType
	511, // 311: pmaster.ProduceScheduleMotion.staminaMotionType:type_name -> penum.ProduceScheduleStaminaMotionType
	512, // 312: pmaster.ProduceScheduleMotion.motionType:type_name -> penum.ProduceScheduleMotionType
	294, // 313: pmaster.ProduceScheduleMotionList.list:type_name -> pmaster.ProduceScheduleMotion
	296, // 314: pmaster.ProduceSettingList.list:type_name -> pmaster.ProduceSetting
	473, // 315: pmaster.ProduceSkill.rarity:type_name -> penum.SkillRarity
	459, // 316: pmaster.ProduceSkill.planType:type_name -> penum.ProducePlanType
	490, // 317: pmaster.ProduceSkill.descriptions:type_name -> pcommon.ProduceDescriptionElement
	298, // 318: pmaster.ProduceSkillList.list:type_name -> pmaster.ProduceSkill
	513, // 319: pmaster.ProduceStartMotion.motionType:type_name -> penum.ProduceStartMotionType
	300, // 320: pmaster.ProduceStartMotionList.list:type_name -> pmaster.ProduceStartMotion
	514, // 321: pmaster.ProduceStepAuditionDifficulty.stepType:type_name -> penum.ProduceStepType
	302, // 322: pmaster.ProduceStepAuditionDifficultyList.list:type_name -> pmaster.ProduceStepAuditionDifficulty
	514, // 323: pmaster.ProduceStepAuditionMotion.stepType:type_name -> penum.ProduceStepType
	515, // 324: pmaster.ProduceStepAuditionMotion.motionType:type_name -> penum.ProduceStepAuditionMotionType
	304, // 325: pmaster.ProduceStepAuditionMotionList.list:type_name -> pmaster.ProduceStepAuditionMotion
	516, // 326: pmaster.ProduceStepEventDetail.suggestionType:type_name -> penum.ProduceEventSuggestionType
	490, // 327: pmaster.ProduceStepEventDetail.descriptions:type_name -> pcommon.ProduceDescriptionElement
	517, // 328: pmaster.ProduceStepEventDetail.eventType:type_name -> penum.ProduceEventType
	306, // 329: pmaster.ProduceStepEventDetailList.list:type_name -> pmaster.ProduceStepEventDetail
	514, // 330: pmaster.ProduceStepEventSuggestion.stepType:type_name -> penum.ProduceStepType
	514, // 331: pmaster.ProduceStepEventSuggestion.successStepType:type_name -> penum.ProduceStepType
	514, // 332: pmaster.ProduceStepEventSuggestion.failStepType:type_name -> penum.ProduceStepType
	490, // 333: pmaster.ProduceStepEventSuggestion.descriptions:type_name -> pcommon.ProduceDescriptionElement
	308, // 334: pmaster.ProduceStepEventSuggestionList.list:type_name -> pmaster.ProduceStepEventSuggestion
	311, // 335: pmaster.ProduceStepLessonLevelList.list:type_name -> pmaster.ProduceStepLessonLevel
	310, // 336: pmaster.ProduceStepLessonList.list:type_name -> pmaster.ProduceStepLesson
	514, // 337: pmaster.ProduceStepTransition.stepType:type_name -> penum.ProduceStepType
	518, // 338: pmaster.ProduceStepTransition.stepPhaseType:type_name -> penum.ProduceStepPhaseType
	314, // 339: pmaster.ProduceStepTransitionList.list:type_name -> pmaster.ProduceStepTransition
	519, // 340: pmaster.ProduceStory.type:type_name -> penum.ProduceStoryType
	316, // 341: pmaster.ProduceStoryList.list:type_name -> pmaster.ProduceStory
	520, // 342: pmaster.ProduceTrigger.phaseType:type_name -> penum.ProducePhaseType
	318, // 343: pmaster.ProduceTriggerList.list:type_name -> pmaster.ProduceTrigger
	320, // 344: pmaster.ProduceWeekMotionList.list:type_name -> pmaster.ProduceWeekMotion
	424, // 345: pmaster.ProducerLevel.unlockTargets:type_name -> pmaster.ProducerLevel.UnlockTarget
	429, // 346: pmaster.ProducerLevel.reward:type_name -> pcommon.Reward
	429, // 347: pmaster.ProducerLevel.bonusRewards:type_name -> pcommon.Reward
	322, // 348: pmaster.ProducerLevelList.list:type_name -> pmaster.ProducerLevel
	459, // 349: pmaster.PvpRateCommonProduceCard.planType:type_name -> penum.ProducePlanType
	476, // 350: pmaster.PvpRateCommonProduceCard.produceCards:type_name -> pcommon.ProduceCard
	324, // 351: pmaster.PvpRateCommonProduceCardList.list:type_name -> pmaster.PvpRateCommonProduceCard
	425, // 352: pmaster.PvpRateConfig.stages:type_name -> pmaster.PvpRateConfig.Stage
	326, // 353: pmaster.PvpRateConfigList.list:type_name -> pmaster.PvpRateConfig
	521, // 354: pmaster.PvpRateMotion.motionType:type_name -> penum.PvpRateMotionType
	328, // 355: pmaster.PvpRateMotionList.list:type_name -> pmaster.PvpRateMotion
	522, // 356: pmaster.PvpRateUnitSlotUnlock.grade:type_name -> penum.PvpRateGrade
	330, // 357: pmaster.PvpRateUnitSlotUnlockList.list:type_name -> pmaster.PvpRateUnitSlotUnlock
	523, // 358: pmaster.ResultGradePattern.type:type_name -> penum.ResultGradeType
	475, // 359: pmaster.ResultGradePattern.grade:type_name -> penum.ResultGrade
	332, // 360: pmaster.ResultGradePatternList.list:type_name -> pmaster.ResultGradePattern
	524, // 361: pmaster.Rule.type:type_name -> penum.RuleType
	525, // 362: pmaster.Rule.platformType:type_name -> penum.PlatformType
	334, // 363: pmaster.RuleList.list:type_name -> pmaster.Rule
	443, // 364: pmaster.SeminarExamTransition.examEffectType:type_name -> penum.ProduceExamEffectType
	429, // 365: pmaster.SeminarExamTransition.rewards:type_name -> pcommon.Reward
	336, // 366: pmaster.SeminarExamTransitionList.list:type_name -> pmaster.SeminarExamTransition
	338, // 367: pmaster.SettingList.list:type_name -> pmaster.Setting
	526, // 368: pmaster.Shop.type:type_name -> penum.ShopType
	479, // 369: pmaster.Shop.resetTimingType:type_name -> penum.ResetTimingType
	527, // 370: pmaster.Shop.resetWeekday:type_name -> penum.Weekday
	528, // 371: pmaster.ShopItem.labelTypes:type_name -> penum.ShopItemLabelType
	429, // 372: pmaster.ShopItem.rewards:type_name -> pcommon.Reward
	479, // 373: pmaster.ShopItem.resetTimingType:type_name -> penum.ResetTimingType
	527, // 374: pmaster.ShopItem.resetWeekday:type_name -> penum.Weekday
	341, // 375: pmaster.ShopItemList.list:type_name -> pmaster.ShopItem
	340, // 376: pmaster.ShopList.list:type_name -> pmaster.Shop
	344, // 377: pmaster.ShopProductList.list:type_name -> pmaster.ShopProduct
	529, // 378: pmaster.Story.type:type_name -> penum.StoryType
	429, // 379: pmaster.Story.reward:type_name -> pcommon.Reward
	530, // 380: pmaster.StoryEvent.storyEventType:type_name -> penum.StoryEventType
	347, // 381: pmaster.StoryEventList.list:type_name -> pmaster.StoryEvent
	529, // 382: pmaster.StoryGroup.storyType:type_name -> penum.StoryType
	349, // 383: pmaster.StoryGroupList.list:type_name -> pmaster.StoryGroup
	346, // 384: pmaster.StoryList.list:type_name -> pmaster.Story
	531, // 385: pmaster.SupportCard.type:type_name -> penum.SupportCardType
	459, // 386: pmaster.SupportCard.planType:type_name -> penum.ProducePlanType
	532, // 387: pmaster.SupportCard.rarity:type_name -> penum.SupportCardRarity
	429, // 388: pmaster.SupportCard.exchangeReward:type_name -> pcommon.Reward
	533, // 389: pmaster.SupportCard.produceCardUpgradeLessonParameterType:type_name -> penum.ProduceParameterType
	490, // 390: pmaster.SupportCard.upgradeProduceCardDescriptions:type_name -> pcommon.ProduceDescriptionElement
	532, // 391: pmaster.SupportCardBonus.rarity:type_name -> penum.SupportCardRarity
	353, // 392: pmaster.SupportCardBonusList.list:type_name -> pmaster.SupportCardBonus
	355, // 393: pmaster.SupportCardFlavorList.list:type_name -> pmaster.SupportCardFlavor
	534, // 394: pmaster.SupportCardLevelLimit.rank:type_name -> penum.SupportCardLevelLimitRank
	358, // 395: pmaster.SupportCardLevelLimitList.list:type_name -> pmaster.SupportCardLevelLimit
	357, // 396: pmaster.SupportCardLevelList.list:type_name -> pmaster.SupportCardLevel
	535, // 397: pmaster.SupportCardList.list:type_name -> pcommon.SupportCard
	362, // 398: pmaster.SupportCardProduceSkillLevelAssistList.list:type_name -> pmaster.SupportCardProduceSkillLevelAssist
	364, // 399: pmaster.SupportCardProduceSkillLevelDanceList.list:type_name -> pmaster.SupportCardProduceSkillLevelDance
	366, // 400: pmaster.SupportCardProduceSkillLevelVisualList.list:type_name -> pmaster.SupportCardProduceSkillLevelVisual
	368, // 401: pmaster.SupportCardProduceSkillLevelVocalList.list:type_name -> pmaster.SupportCardProduceSkillLevelVocal
	371, // 402: pmaster.SupportCardSimulationGroupList.list:type_name -> pmaster.SupportCardSimulationGroup
	370, // 403: pmaster.SupportCardSimulationList.list:type_name -> pmaster.SupportCardSimulation
	536, // 404: pmaster.Terms.type:type_name -> penum.TermsType
	374, // 405: pmaster.TermsList.list:type_name -> pmaster.Terms
	537, // 406: pmaster.Tips.type:type_name -> penum.TipsType
	538, // 407: pmaster.Tips.viewAreaType:type_name -> penum.ViewAreaType
	376, // 408: pmaster.TipsList.list:type_name -> pmaster.Tips
	378, // 409: pmaster.TitleAssetList.list:type_name -> pmaster.TitleAsset
	380, // 410: pmaster.TitleVoiceList.list:type_name -> pmaster.TitleVoice
	443, // 411: pmaster.TowerLayerExam.examEffectType:type_name -> penum.ProduceExamEffectType
	384, // 412: pmaster.TowerLayerExamList.list:type_name -> pmaster.TowerLayerExam
	383, // 413: pmaster.TowerLayerList.list:type_name -> pmaster.TowerLayer
	387, // 414: pmaster.TowerLayerRankList.list:type_name -> pmaster.TowerLayerRank
	382, // 415: pmaster.TowerList.list:type_name -> pmaster.Tower
	429, // 416: pmaster.TowerTotalClearRankReward.reward:type_name -> pcommon.Reward
	390, // 417: pmaster.TowerTotalClearRankRewardList.list:type_name -> pmaster.TowerTotalClearRankReward
	449, // 418: pmaster.Tutorial.tutorialType:type_name -> penum.TutorialType
	539, // 419: pmaster.Tutorial.navigationType:type_name -> penum.TutorialNavigationType
	540, // 420: pmaster.Tutorial.navigationPositionType:type_name -> penum.TutorialNavigationPositionType
	541, // 421: pmaster.Tutorial.tutorialProduceCommandType:type_name -> penum.TutorialProduceCommandType
	542, // 422: pmaster.TutorialCharacterVoice.type:type_name -> penum.TutorialCharacterVoiceType
	393, // 423: pmaster.TutorialCharacterVoiceList.list:type_name -> pmaster.TutorialCharacterVoice
	392, // 424: pmaster.TutorialList.list:type_name -> pmaster.Tutorial
	449, // 425: pmaster.TutorialProduce.tutorialType:type_name -> penum.TutorialType
	396, // 426: pmaster.TutorialProduceList.list:type_name -> pmaster.TutorialProduce
	449, // 427: pmaster.TutorialProduceStep.tutorialType:type_name -> penum.TutorialType
	514, // 428: pmaster.TutorialProduceStep.stepType:type_name -> penum.ProduceStepType
	398, // 429: pmaster.TutorialProduceStepList.list:type_name -> pmaster.TutorialProduceStep
	401, // 430: pmaster.VoiceGroupList.list:type_name -> pmaster.VoiceGroup
	400, // 431: pmaster.VoiceList.list:type_name -> pmaster.Voice
	543, // 432: pmaster.VoiceRoster.type:type_name -> penum.VoicePlayScreenType
	404, // 433: pmaster.VoiceRosterList.list:type_name -> pmaster.VoiceRoster
	544, // 434: pmaster.Work.type:type_name -> penum.WorkType
	436, // 435: pmaster.Work.rewardResourceType:type_name -> penum.ResourceType
	544, // 436: pmaster.WorkLevel.type:type_name -> penum.WorkType
	407, // 437: pmaster.WorkLevelList.list:type_name -> pmaster.WorkLevel
	544, // 438: pmaster.WorkLevelReward.type:type_name -> penum.WorkType
	409, // 439: pmaster.WorkLevelRewardList.list:type_name -> pmaster.WorkLevelReward
	406, // 440: pmaster.WorkList.list:type_name -> pmaster.Work
	545, // 441: pmaster.WorkMotion.motionType:type_name -> penum.WorkMotionType
	412, // 442: pmaster.WorkMotionList.list:type_name -> pmaster.WorkMotion
	414, // 443: pmaster.WorkSkipList.list:type_name -> pmaster.WorkSkip
	544, // 444: pmaster.WorkTime.type:type_name -> penum.WorkType
	416, // 445: pmaster.WorkTimeList.list:type_name -> pmaster.WorkTime
	498, // 446: pmaster.ProduceEffect.ProduceReward.resourceType:type_name -> penum.ProduceResourceType
	546, // 447: pmaster.ProducerLevel.UnlockTarget.type:type_name -> penum.ProducerLevelUnlockType
	547, // 448: pmaster.PvpRateConfig.Stage.stageType:type_name -> penum.PvpRateStageType
	459, // 449: pmaster.PvpRateConfig.Stage.planType:type_name -> penum.ProducePlanType
	450, // [450:450] is the sub-list for method output_type
	450, // [450:450] is the sub-list for method input_type
	450, // [450:450] is the sub-list for extension type_name
	450, // [450:450] is the sub-list for extension extendee
	0,   // [0:450] is the sub-list for field type_name
}

func init() { file_pmaster_proto_init() }
func file_pmaster_proto_init() {
	if File_pmaster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pmaster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementProgressList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppReviewList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetDownloadList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgmList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterAdv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterAdvList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterColorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterDearnessLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterDearnessLevelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterDearnessStoryGashaCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterDearnessStoryGashaCampaignList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterDetailList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterPushMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterPushMessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterTrueEndAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterTrueEndAchievementList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterTrueEndBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterTrueEndBonusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinGashaButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinGashaButtonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionSetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumptionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumptionSetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Costume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumeColorGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumeColorGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumeHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumeHeadList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumeMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumeMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumePhotoGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostumePhotoGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DearnessStoryCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DearnessStoryCampaignList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkTransitionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLabelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStoryCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStoryCampaignList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamInitialDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamInitialDeckList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamOutGameMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamOutGameMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamSettingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamSimulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamSimulationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureLockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GashaAnimation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GashaAnimationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GashaButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GashaButtonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDonationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDonationItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildReactionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpCategoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpContentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBoardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMonitorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeTimeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardLevelLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardLevelLimitList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardLevelLimitProduceSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardLevelLimitProduceSkillList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardLevelLimitStatusUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardLevelLimitStatusUpList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPiece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPieceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPieceQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPieceQuantityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPotential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPotentialList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPotentialProduceSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardPotentialProduceSkillList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardSimulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardSimulationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardSkinList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardSkinSelectReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdolCardSkinSelectRewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationMission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationMissionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationPointReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationPointRewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JewelConsumptionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JewelConsumptionCountList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Localization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalizationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginBonusMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginBonusMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainStoryChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainStoryChapterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainStoryPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainStoryPartList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTaskGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTaskIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTaskIconList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiBaseAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiBaseAssetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiBaseColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiBaseColorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiIllustrationAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiIllustrationAssetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiTextColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeishiTextColorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryAbilityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryExchangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryExchangeItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryExchangeItemQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryExchangeItemQuantityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryGiftList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionDailyRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionDailyReleaseGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionDailyReleaseGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionDailyReleaseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPanelSheet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPanelSheetGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPanelSheetGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPanelSheetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPassList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPassPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPassPointList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPassProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPassProgressList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPointList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPointRewardSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPointRewardSetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionProgressList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Money); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Music); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicHot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicHotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicSinger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicSingerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoBackground); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoBackgroundList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoLookTargetVoiceCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoLookTargetVoiceCharacterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoPose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoPoseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoReactionVoiceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoReactionVoiceGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWaitVoiceCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWaitVoiceCharacterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWaitVoiceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoWaitVoiceGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Produce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceAdv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceAdvList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardGrowEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardGrowEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardRandomPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardRandomPoolList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardSearchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardSimulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardSimulationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardSimulationGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardSimulationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardStatusEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardStatusEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardStatusEnchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardStatusEnchantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCardTagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceChallengeCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceChallengeCharacterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceChallengeSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceChallengeSlotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProduceCardGrowEffectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProduceCardGrowEffectTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProduceEffectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProduceEffectTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProduceExamEffectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProduceExamEffectTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProducePlanType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDescriptionProducePlanTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDrink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDrinkEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDrinkEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDrinkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEffectIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEffectIconList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEventCharacterGrowth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEventCharacterGrowthList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEventSupportCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEventSupportCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoCardSelectEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoCardSelectEvaluationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoEvaluationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoResourceEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoResourceEvaluationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoTriggerEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamAutoTriggerEvaluationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleNpcGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleNpcGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleNpcMob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleNpcMobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleScoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamBattleScoreConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamGimmickEffectGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamGimmickEffectGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamStatusEnchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamStatusEnchantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceExamTriggerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceHighScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceHighScoreList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemChallengeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemChallengeGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemEffectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemSimulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemSimulationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemSimulationGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItemSimulationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceLiveCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceLiveCommonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceLiveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceNavigation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceNavigationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceResultMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceResultMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceScheduleBackground); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceScheduleBackgroundList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceScheduleMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceScheduleMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSettingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSkillList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStartMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStartMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepAuditionDifficulty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepAuditionDifficultyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepAuditionMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepAuditionMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepEventDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepEventDetailList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepEventSuggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepEventSuggestionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepLesson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepLessonLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepLessonLevelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepLessonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStepTransitionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceTriggerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceWeekMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceWeekMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerLevelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateCommonProduceCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateCommonProduceCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateUnitSlotUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateUnitSlotUnlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultGradePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultGradePatternList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeminarExamTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeminarExamTransitionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopProductList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Story); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardBonusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardFlavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardFlavorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardLevelLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardLevelLimitList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardLevelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelAssist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelAssistList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelDance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelDanceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelVisual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelVisualList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelVocal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardProduceSkillLevelVocalList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardSimulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardSimulationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardSimulationGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportCardSimulationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Terms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleAssetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleVoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleVoiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLayerExam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLayerExamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLayerRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerLayerRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerTotalClearRankReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerTotalClearRankRewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tutorial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialCharacterVoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialCharacterVoiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialProduce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialProduceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialProduceStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialProduceStepList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceRoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceRosterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Work); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkLevelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkLevelReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkLevelRewardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkMotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSkip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSkipList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTimeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterDearnessLevel_ProduceSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterTrueEndAchievement_Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item_Gasha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceCard_PlayEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceEffect_ProduceReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceItem_Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerLevel_UnlockTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pmaster_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpRateConfig_Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pmaster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   426,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pmaster_proto_goTypes,
		DependencyIndexes: file_pmaster_proto_depIdxs,
		MessageInfos:      file_pmaster_proto_msgTypes,
	}.Build()
	File_pmaster_proto = out.File
	file_pmaster_proto_rawDesc = nil
	file_pmaster_proto_goTypes = nil
	file_pmaster_proto_depIdxs = nil
}
