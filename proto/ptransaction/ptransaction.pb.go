// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.26.1
// source: ptransaction.proto

package ptransaction

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
	pcommon "vertesan/campus/proto/pcommon"
	penum "vertesan/campus/proto/penum"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	ServerUserId                   string                 `protobuf:"bytes,3,opt,name=serverUserId,proto3" json:"serverUserId,omitempty"`
	PublicUserId                   string                 `protobuf:"bytes,2,opt,name=publicUserId,proto3" json:"publicUserId,omitempty"`
	TutorialClearedTime            int64                  `protobuf:"varint,7,opt,name=tutorialClearedTime,proto3" json:"tutorialClearedTime,omitempty"`
	ReceivedTutorialRewardIdolCard bool                   `protobuf:"varint,8,opt,name=receivedTutorialRewardIdolCard,proto3" json:"receivedTutorialRewardIdolCard,omitempty"`
	DmmGamesId                     string                 `protobuf:"bytes,101,opt,name=dmmGamesId,proto3" json:"dmmGamesId,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_ptransaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetServerUserId() string {
	if x != nil {
		return x.ServerUserId
	}
	return ""
}

func (x *User) GetPublicUserId() string {
	if x != nil {
		return x.PublicUserId
	}
	return ""
}

func (x *User) GetTutorialClearedTime() int64 {
	if x != nil {
		return x.TutorialClearedTime
	}
	return 0
}

func (x *User) GetReceivedTutorialRewardIdolCard() bool {
	if x != nil {
		return x.ReceivedTutorialRewardIdolCard
	}
	return false
}

func (x *User) GetDmmGamesId() string {
	if x != nil {
		return x.DmmGamesId
	}
	return ""
}

type UserActionPoint struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Quantity           int32                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	QuantityUpdateTime int64                  `protobuf:"varint,3,opt,name=quantityUpdateTime,proto3" json:"quantityUpdateTime,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserActionPoint) Reset() {
	*x = UserActionPoint{}
	mi := &file_ptransaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserActionPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionPoint) ProtoMessage() {}

func (x *UserActionPoint) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionPoint.ProtoReflect.Descriptor instead.
func (*UserActionPoint) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{1}
}

func (x *UserActionPoint) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *UserActionPoint) GetQuantityUpdateTime() int64 {
	if x != nil {
		return x.QuantityUpdateTime
	}
	return 0
}

type UserAuthProvider struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AuthProviderType penum.AuthProviderType `protobuf:"varint,2,opt,name=authProviderType,proto3,enum=penum.AuthProviderType" json:"authProviderType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserAuthProvider) Reset() {
	*x = UserAuthProvider{}
	mi := &file_ptransaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAuthProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthProvider) ProtoMessage() {}

func (x *UserAuthProvider) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthProvider.ProtoReflect.Descriptor instead.
func (*UserAuthProvider) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{2}
}

func (x *UserAuthProvider) GetAuthProviderType() penum.AuthProviderType {
	if x != nil {
		return x.AuthProviderType
	}
	return penum.AuthProviderType(0)
}

type UserBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FreeBalance   int32                  `protobuf:"varint,1,opt,name=freeBalance,proto3" json:"freeBalance,omitempty"`
	PaidBalance   int32                  `protobuf:"varint,2,opt,name=paidBalance,proto3" json:"paidBalance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserBalance) Reset() {
	*x = UserBalance{}
	mi := &file_ptransaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBalance) ProtoMessage() {}

func (x *UserBalance) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBalance.ProtoReflect.Descriptor instead.
func (*UserBalance) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{3}
}

func (x *UserBalance) GetFreeBalance() int32 {
	if x != nil {
		return x.FreeBalance
	}
	return 0
}

func (x *UserBalance) GetPaidBalance() int32 {
	if x != nil {
		return x.PaidBalance
	}
	return 0
}

type UserBanWarning struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	IsConfirmationRequired bool                   `protobuf:"varint,2,opt,name=isConfirmationRequired,proto3" json:"isConfirmationRequired,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserBanWarning) Reset() {
	*x = UserBanWarning{}
	mi := &file_ptransaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserBanWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBanWarning) ProtoMessage() {}

func (x *UserBanWarning) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBanWarning.ProtoReflect.Descriptor instead.
func (*UserBanWarning) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{4}
}

func (x *UserBanWarning) GetIsConfirmationRequired() bool {
	if x != nil {
		return x.IsConfirmationRequired
	}
	return false
}

type UserCharacter struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CharacterId         string                 `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	FanCount            int64                  `protobuf:"varint,3,opt,name=fanCount,proto3" json:"fanCount,omitempty"`
	TrueEndProduceTypes []penum.ProduceType    `protobuf:"varint,4,rep,packed,name=trueEndProduceTypes,proto3,enum=penum.ProduceType" json:"trueEndProduceTypes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UserCharacter) Reset() {
	*x = UserCharacter{}
	mi := &file_ptransaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCharacter) ProtoMessage() {}

func (x *UserCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCharacter.ProtoReflect.Descriptor instead.
func (*UserCharacter) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{5}
}

func (x *UserCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserCharacter) GetFanCount() int64 {
	if x != nil {
		return x.FanCount
	}
	return 0
}

func (x *UserCharacter) GetTrueEndProduceTypes() []penum.ProduceType {
	if x != nil {
		return x.TrueEndProduceTypes
	}
	return nil
}

type UserCharacterCostume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CharacterId   string                 `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	SetType       penum.CostumeSetType   `protobuf:"varint,3,opt,name=setType,proto3,enum=penum.CostumeSetType" json:"setType,omitempty"`
	CostumeHeadId string                 `protobuf:"bytes,5,opt,name=costumeHeadId,proto3" json:"costumeHeadId,omitempty"`
	CostumeId     string                 `protobuf:"bytes,4,opt,name=costumeId,proto3" json:"costumeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCharacterCostume) Reset() {
	*x = UserCharacterCostume{}
	mi := &file_ptransaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCharacterCostume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCharacterCostume) ProtoMessage() {}

func (x *UserCharacterCostume) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCharacterCostume.ProtoReflect.Descriptor instead.
func (*UserCharacterCostume) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{6}
}

func (x *UserCharacterCostume) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserCharacterCostume) GetSetType() penum.CostumeSetType {
	if x != nil {
		return x.SetType
	}
	return penum.CostumeSetType(0)
}

func (x *UserCharacterCostume) GetCostumeHeadId() string {
	if x != nil {
		return x.CostumeHeadId
	}
	return ""
}

func (x *UserCharacterCostume) GetCostumeId() string {
	if x != nil {
		return x.CostumeId
	}
	return ""
}

type UserCharacterRoster struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CharacterId    string                 `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	ViewedPlayable bool                   `protobuf:"varint,3,opt,name=viewedPlayable,proto3" json:"viewedPlayable,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserCharacterRoster) Reset() {
	*x = UserCharacterRoster{}
	mi := &file_ptransaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCharacterRoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCharacterRoster) ProtoMessage() {}

func (x *UserCharacterRoster) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCharacterRoster.ProtoReflect.Descriptor instead.
func (*UserCharacterRoster) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{7}
}

func (x *UserCharacterRoster) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserCharacterRoster) GetViewedPlayable() bool {
	if x != nil {
		return x.ViewedPlayable
	}
	return false
}

type UserComeback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ComebackId    string                 `protobuf:"bytes,2,opt,name=comebackId,proto3" json:"comebackId,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserComeback) Reset() {
	*x = UserComeback{}
	mi := &file_ptransaction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserComeback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserComeback) ProtoMessage() {}

func (x *UserComeback) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserComeback.ProtoReflect.Descriptor instead.
func (*UserComeback) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{8}
}

func (x *UserComeback) GetComebackId() string {
	if x != nil {
		return x.ComebackId
	}
	return ""
}

func (x *UserComeback) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type UserCostume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CostumeId     string                 `protobuf:"bytes,2,opt,name=costumeId,proto3" json:"costumeId,omitempty"`
	Checked       bool                   `protobuf:"varint,3,opt,name=checked,proto3" json:"checked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCostume) Reset() {
	*x = UserCostume{}
	mi := &file_ptransaction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCostume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCostume) ProtoMessage() {}

func (x *UserCostume) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCostume.ProtoReflect.Descriptor instead.
func (*UserCostume) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{9}
}

func (x *UserCostume) GetCostumeId() string {
	if x != nil {
		return x.CostumeId
	}
	return ""
}

func (x *UserCostume) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

type UserCostumeHead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CostumeHeadId string                 `protobuf:"bytes,2,opt,name=costumeHeadId,proto3" json:"costumeHeadId,omitempty"`
	Checked       bool                   `protobuf:"varint,3,opt,name=checked,proto3" json:"checked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCostumeHead) Reset() {
	*x = UserCostumeHead{}
	mi := &file_ptransaction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCostumeHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCostumeHead) ProtoMessage() {}

func (x *UserCostumeHead) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCostumeHead.ProtoReflect.Descriptor instead.
func (*UserCostumeHead) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{10}
}

func (x *UserCostumeHead) GetCostumeHeadId() string {
	if x != nil {
		return x.CostumeHeadId
	}
	return ""
}

func (x *UserCostumeHead) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

type UserCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          penum.CountType        `protobuf:"varint,2,opt,name=type,proto3,enum=penum.CountType" json:"type,omitempty"`
	TotalCount    int64                  `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	DailyCount    int64                  `protobuf:"varint,4,opt,name=dailyCount,proto3" json:"dailyCount,omitempty"`
	UpdatedTime   int64                  `protobuf:"varint,5,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCount) Reset() {
	*x = UserCount{}
	mi := &file_ptransaction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCount) ProtoMessage() {}

func (x *UserCount) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCount.ProtoReflect.Descriptor instead.
func (*UserCount) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{11}
}

func (x *UserCount) GetType() penum.CountType {
	if x != nil {
		return x.Type
	}
	return penum.CountType(0)
}

func (x *UserCount) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *UserCount) GetDailyCount() int64 {
	if x != nil {
		return x.DailyCount
	}
	return 0
}

func (x *UserCount) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

type UserDearnessStory struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	CharacterId                        string                 `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	DearnessLevel                      int32                  `protobuf:"varint,3,opt,name=dearnessLevel,proto3" json:"dearnessLevel,omitempty"`
	SatisfyDearnessProduceConditionSet bool                   `protobuf:"varint,4,opt,name=satisfyDearnessProduceConditionSet,proto3" json:"satisfyDearnessProduceConditionSet,omitempty"`
	Read                               bool                   `protobuf:"varint,6,opt,name=read,proto3" json:"read,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *UserDearnessStory) Reset() {
	*x = UserDearnessStory{}
	mi := &file_ptransaction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDearnessStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDearnessStory) ProtoMessage() {}

func (x *UserDearnessStory) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDearnessStory.ProtoReflect.Descriptor instead.
func (*UserDearnessStory) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{12}
}

func (x *UserDearnessStory) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserDearnessStory) GetDearnessLevel() int32 {
	if x != nil {
		return x.DearnessLevel
	}
	return 0
}

func (x *UserDearnessStory) GetSatisfyDearnessProduceConditionSet() bool {
	if x != nil {
		return x.SatisfyDearnessProduceConditionSet
	}
	return false
}

func (x *UserDearnessStory) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

type UserGashaButton struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	GashaId                string                 `protobuf:"bytes,2,opt,name=gashaId,proto3" json:"gashaId,omitempty"`
	GashaButtonId          string                 `protobuf:"bytes,3,opt,name=gashaButtonId,proto3" json:"gashaButtonId,omitempty"`
	LastDrawnTime          int64                  `protobuf:"varint,4,opt,name=lastDrawnTime,proto3" json:"lastDrawnTime,omitempty"`
	TodayDrawCount         int32                  `protobuf:"varint,5,opt,name=todayDrawCount,proto3" json:"todayDrawCount,omitempty"`
	TotalDrawCount         int32                  `protobuf:"varint,6,opt,name=totalDrawCount,proto3" json:"totalDrawCount,omitempty"`
	DiscountTodayDrawCount int32                  `protobuf:"varint,7,opt,name=discountTodayDrawCount,proto3" json:"discountTodayDrawCount,omitempty"`
	DiscountTotalDrawCount int32                  `protobuf:"varint,8,opt,name=discountTotalDrawCount,proto3" json:"discountTotalDrawCount,omitempty"`
	RedrawCount            int32                  `protobuf:"varint,9,opt,name=redrawCount,proto3" json:"redrawCount,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserGashaButton) Reset() {
	*x = UserGashaButton{}
	mi := &file_ptransaction_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGashaButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGashaButton) ProtoMessage() {}

func (x *UserGashaButton) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGashaButton.ProtoReflect.Descriptor instead.
func (*UserGashaButton) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{13}
}

func (x *UserGashaButton) GetGashaId() string {
	if x != nil {
		return x.GashaId
	}
	return ""
}

func (x *UserGashaButton) GetGashaButtonId() string {
	if x != nil {
		return x.GashaButtonId
	}
	return ""
}

func (x *UserGashaButton) GetLastDrawnTime() int64 {
	if x != nil {
		return x.LastDrawnTime
	}
	return 0
}

func (x *UserGashaButton) GetTodayDrawCount() int32 {
	if x != nil {
		return x.TodayDrawCount
	}
	return 0
}

func (x *UserGashaButton) GetTotalDrawCount() int32 {
	if x != nil {
		return x.TotalDrawCount
	}
	return 0
}

func (x *UserGashaButton) GetDiscountTodayDrawCount() int32 {
	if x != nil {
		return x.DiscountTodayDrawCount
	}
	return 0
}

func (x *UserGashaButton) GetDiscountTotalDrawCount() int32 {
	if x != nil {
		return x.DiscountTotalDrawCount
	}
	return 0
}

func (x *UserGashaButton) GetRedrawCount() int32 {
	if x != nil {
		return x.RedrawCount
	}
	return 0
}

type UserGuild struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JoinType      penum.GuildJoinType    `protobuf:"varint,999,opt,name=joinType,proto3,enum=penum.GuildJoinType" json:"joinType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserGuild) Reset() {
	*x = UserGuild{}
	mi := &file_ptransaction_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGuild) ProtoMessage() {}

func (x *UserGuild) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGuild.ProtoReflect.Descriptor instead.
func (*UserGuild) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{14}
}

func (x *UserGuild) GetJoinType() penum.GuildJoinType {
	if x != nil {
		return x.JoinType
	}
	return penum.GuildJoinType(0)
}

type UserHomeCharacter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HomeType      penum.HomeType         `protobuf:"varint,2,opt,name=homeType,proto3,enum=penum.HomeType" json:"homeType,omitempty"`
	CharacterId   string                 `protobuf:"bytes,3,opt,name=characterId,proto3" json:"characterId,omitempty"`
	IsRandom      bool                   `protobuf:"varint,4,opt,name=isRandom,proto3" json:"isRandom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserHomeCharacter) Reset() {
	*x = UserHomeCharacter{}
	mi := &file_ptransaction_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserHomeCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHomeCharacter) ProtoMessage() {}

func (x *UserHomeCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHomeCharacter.ProtoReflect.Descriptor instead.
func (*UserHomeCharacter) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{15}
}

func (x *UserHomeCharacter) GetHomeType() penum.HomeType {
	if x != nil {
		return x.HomeType
	}
	return penum.HomeType(0)
}

func (x *UserHomeCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserHomeCharacter) GetIsRandom() bool {
	if x != nil {
		return x.IsRandom
	}
	return false
}

type UserIdolCard struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	IdolCardId     string                       `protobuf:"bytes,2,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	LevelLimitRank penum.IdolCardLevelLimitRank `protobuf:"varint,3,opt,name=levelLimitRank,proto3,enum=penum.IdolCardLevelLimitRank" json:"levelLimitRank,omitempty"`
	PotentialRank  penum.IdolCardPotentialRank  `protobuf:"varint,4,opt,name=potentialRank,proto3,enum=penum.IdolCardPotentialRank" json:"potentialRank,omitempty"`
	IdolCardSkinId string                       `protobuf:"bytes,5,opt,name=idolCardSkinId,proto3" json:"idolCardSkinId,omitempty"`
	CreatedTime    int64                        `protobuf:"varint,999,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserIdolCard) Reset() {
	*x = UserIdolCard{}
	mi := &file_ptransaction_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIdolCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdolCard) ProtoMessage() {}

func (x *UserIdolCard) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdolCard.ProtoReflect.Descriptor instead.
func (*UserIdolCard) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{16}
}

func (x *UserIdolCard) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *UserIdolCard) GetLevelLimitRank() penum.IdolCardLevelLimitRank {
	if x != nil {
		return x.LevelLimitRank
	}
	return penum.IdolCardLevelLimitRank(0)
}

func (x *UserIdolCard) GetPotentialRank() penum.IdolCardPotentialRank {
	if x != nil {
		return x.PotentialRank
	}
	return penum.IdolCardPotentialRank(0)
}

func (x *UserIdolCard) GetIdolCardSkinId() string {
	if x != nil {
		return x.IdolCardSkinId
	}
	return ""
}

func (x *UserIdolCard) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type UserIdolCardSkin struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IdolCardSkinId string                 `protobuf:"bytes,2,opt,name=idolCardSkinId,proto3" json:"idolCardSkinId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserIdolCardSkin) Reset() {
	*x = UserIdolCardSkin{}
	mi := &file_ptransaction_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIdolCardSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdolCardSkin) ProtoMessage() {}

func (x *UserIdolCardSkin) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdolCardSkin.ProtoReflect.Descriptor instead.
func (*UserIdolCardSkin) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{17}
}

func (x *UserIdolCardSkin) GetIdolCardSkinId() string {
	if x != nil {
		return x.IdolCardSkinId
	}
	return ""
}

type UserInvitation struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	TotalInvitationPoint                   int64                  `protobuf:"varint,2,opt,name=totalInvitationPoint,proto3" json:"totalInvitationPoint,omitempty"`
	ReceivedInvitationPointRewardThreshold int64                  `protobuf:"varint,3,opt,name=receivedInvitationPointRewardThreshold,proto3" json:"receivedInvitationPointRewardThreshold,omitempty"`
	IsCodeEntered                          bool                   `protobuf:"varint,5,opt,name=isCodeEntered,proto3" json:"isCodeEntered,omitempty"`
	CodeEntryEndTime                       int64                  `protobuf:"varint,6,opt,name=codeEntryEndTime,proto3" json:"codeEntryEndTime,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *UserInvitation) Reset() {
	*x = UserInvitation{}
	mi := &file_ptransaction_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvitation) ProtoMessage() {}

func (x *UserInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvitation.ProtoReflect.Descriptor instead.
func (*UserInvitation) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{18}
}

func (x *UserInvitation) GetTotalInvitationPoint() int64 {
	if x != nil {
		return x.TotalInvitationPoint
	}
	return 0
}

func (x *UserInvitation) GetReceivedInvitationPointRewardThreshold() int64 {
	if x != nil {
		return x.ReceivedInvitationPointRewardThreshold
	}
	return 0
}

func (x *UserInvitation) GetIsCodeEntered() bool {
	if x != nil {
		return x.IsCodeEntered
	}
	return false
}

func (x *UserInvitation) GetCodeEntryEndTime() int64 {
	if x != nil {
		return x.CodeEntryEndTime
	}
	return 0
}

type UserItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        string                 `protobuf:"bytes,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	ExpiryTime    int64                  `protobuf:"varint,3,opt,name=expiryTime,proto3" json:"expiryTime,omitempty"`
	Quantity      int64                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserItem) Reset() {
	*x = UserItem{}
	mi := &file_ptransaction_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserItem) ProtoMessage() {}

func (x *UserItem) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserItem.ProtoReflect.Descriptor instead.
func (*UserItem) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{19}
}

func (x *UserItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *UserItem) GetExpiryTime() int64 {
	if x != nil {
		return x.ExpiryTime
	}
	return 0
}

func (x *UserItem) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type UserMeishi struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Number           int32                  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	ImagePath        string                 `protobuf:"bytes,3,opt,name=imagePath,proto3" json:"imagePath,omitempty"`
	UseUserMemoryIds []string               `protobuf:"bytes,4,rep,name=useUserMemoryIds,proto3" json:"useUserMemoryIds,omitempty"`
	UseUserPhotoIds  []string               `protobuf:"bytes,5,rep,name=useUserPhotoIds,proto3" json:"useUserPhotoIds,omitempty"`
	UseUserMovieIds  []string               `protobuf:"bytes,6,rep,name=useUserMovieIds,proto3" json:"useUserMovieIds,omitempty"`
	Timeline         string                 `protobuf:"bytes,7,opt,name=timeline,proto3" json:"timeline,omitempty"`
	BaseLayoutNumber int32                  `protobuf:"varint,100,opt,name=baseLayoutNumber,proto3" json:"baseLayoutNumber,omitempty"`
	BaseUserMemoryId string                 `protobuf:"bytes,117,opt,name=baseUserMemoryId,proto3" json:"baseUserMemoryId,omitempty"`
	BaseUserPhotoId  string                 `protobuf:"bytes,118,opt,name=baseUserPhotoId,proto3" json:"baseUserPhotoId,omitempty"`
	BaseUserMovieId  string                 `protobuf:"bytes,119,opt,name=baseUserMovieId,proto3" json:"baseUserMovieId,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserMeishi) Reset() {
	*x = UserMeishi{}
	mi := &file_ptransaction_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMeishi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeishi) ProtoMessage() {}

func (x *UserMeishi) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeishi.ProtoReflect.Descriptor instead.
func (*UserMeishi) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{20}
}

func (x *UserMeishi) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserMeishi) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *UserMeishi) GetUseUserMemoryIds() []string {
	if x != nil {
		return x.UseUserMemoryIds
	}
	return nil
}

func (x *UserMeishi) GetUseUserPhotoIds() []string {
	if x != nil {
		return x.UseUserPhotoIds
	}
	return nil
}

func (x *UserMeishi) GetUseUserMovieIds() []string {
	if x != nil {
		return x.UseUserMovieIds
	}
	return nil
}

func (x *UserMeishi) GetTimeline() string {
	if x != nil {
		return x.Timeline
	}
	return ""
}

func (x *UserMeishi) GetBaseLayoutNumber() int32 {
	if x != nil {
		return x.BaseLayoutNumber
	}
	return 0
}

func (x *UserMeishi) GetBaseUserMemoryId() string {
	if x != nil {
		return x.BaseUserMemoryId
	}
	return ""
}

func (x *UserMeishi) GetBaseUserPhotoId() string {
	if x != nil {
		return x.BaseUserPhotoId
	}
	return ""
}

func (x *UserMeishi) GetBaseUserMovieId() string {
	if x != nil {
		return x.BaseUserMovieId
	}
	return ""
}

type UserMeishiBaseAsset struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MeishiBaseAssetId string                 `protobuf:"bytes,2,opt,name=meishiBaseAssetId,proto3" json:"meishiBaseAssetId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UserMeishiBaseAsset) Reset() {
	*x = UserMeishiBaseAsset{}
	mi := &file_ptransaction_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMeishiBaseAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeishiBaseAsset) ProtoMessage() {}

func (x *UserMeishiBaseAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeishiBaseAsset.ProtoReflect.Descriptor instead.
func (*UserMeishiBaseAsset) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{21}
}

func (x *UserMeishiBaseAsset) GetMeishiBaseAssetId() string {
	if x != nil {
		return x.MeishiBaseAssetId
	}
	return ""
}

type UserMeishiIllustrationAsset struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	MeishiIllustrationAssetId string                 `protobuf:"bytes,2,opt,name=meishiIllustrationAssetId,proto3" json:"meishiIllustrationAssetId,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UserMeishiIllustrationAsset) Reset() {
	*x = UserMeishiIllustrationAsset{}
	mi := &file_ptransaction_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMeishiIllustrationAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeishiIllustrationAsset) ProtoMessage() {}

func (x *UserMeishiIllustrationAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeishiIllustrationAsset.ProtoReflect.Descriptor instead.
func (*UserMeishiIllustrationAsset) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{22}
}

func (x *UserMeishiIllustrationAsset) GetMeishiIllustrationAssetId() string {
	if x != nil {
		return x.MeishiIllustrationAssetId
	}
	return ""
}

type UserMemory struct {
	state                    protoimpl.MessageState                  `protogen:"open.v1"`
	UserMemoryId             string                                  `protobuf:"bytes,2,opt,name=userMemoryId,proto3" json:"userMemoryId,omitempty"`
	MemoryTagId              string                                  `protobuf:"bytes,4,opt,name=memoryTagId,proto3" json:"memoryTagId,omitempty"`
	IsProtected              bool                                    `protobuf:"varint,5,opt,name=isProtected,proto3" json:"isProtected,omitempty"`
	AssetId                  string                                  `protobuf:"bytes,6,opt,name=assetId,proto3" json:"assetId,omitempty"`
	ImagePath                string                                  `protobuf:"bytes,7,opt,name=imagePath,proto3" json:"imagePath,omitempty"`
	Grade                    penum.ResultGrade                       `protobuf:"varint,8,opt,name=grade,proto3,enum=penum.ResultGrade" json:"grade,omitempty"`
	Power                    int32                                   `protobuf:"varint,9,opt,name=power,proto3" json:"power,omitempty"`
	ProduceId                string                                  `protobuf:"bytes,10,opt,name=produceId,proto3" json:"produceId,omitempty"`
	CharacterId              string                                  `protobuf:"bytes,11,opt,name=characterId,proto3" json:"characterId,omitempty"`
	IdolCardId               string                                  `protobuf:"bytes,12,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	IdolCardSkinId           string                                  `protobuf:"bytes,13,opt,name=idolCardSkinId,proto3" json:"idolCardSkinId,omitempty"`
	PlanType                 penum.ProducePlanType                   `protobuf:"varint,14,opt,name=planType,proto3,enum=penum.ProducePlanType" json:"planType,omitempty"`
	IdolCardLevelLimitRank   penum.IdolCardLevelLimitRank            `protobuf:"varint,15,opt,name=idolCardLevelLimitRank,proto3,enum=penum.IdolCardLevelLimitRank" json:"idolCardLevelLimitRank,omitempty"`
	IdolCardPotentialRank    penum.IdolCardPotentialRank             `protobuf:"varint,16,opt,name=idolCardPotentialRank,proto3,enum=penum.IdolCardPotentialRank" json:"idolCardPotentialRank,omitempty"`
	ShotTime                 int64                                   `protobuf:"varint,17,opt,name=shotTime,proto3" json:"shotTime,omitempty"`
	NoProduceHistory         bool                                    `protobuf:"varint,18,opt,name=noProduceHistory,proto3" json:"noProduceHistory,omitempty"`
	InheritCount             int32                                   `protobuf:"varint,19,opt,name=inheritCount,proto3" json:"inheritCount,omitempty"`
	ProduceCard              *pcommon.ProduceCard                    `protobuf:"bytes,22,opt,name=produceCard,proto3" json:"produceCard,omitempty"`
	ProduceCardPhaseType     penum.ProduceMemoryProduceCardPhaseType `protobuf:"varint,23,opt,name=produceCardPhaseType,proto3,enum=penum.ProduceMemoryProduceCardPhaseType" json:"produceCardPhaseType,omitempty"`
	Abilities                []*UserMemory_MemoryAbility             `protobuf:"bytes,26,rep,name=abilities,proto3" json:"abilities,omitempty"`
	Vocal                    int32                                   `protobuf:"varint,30,opt,name=vocal,proto3" json:"vocal,omitempty"`
	Dance                    int32                                   `protobuf:"varint,31,opt,name=dance,proto3" json:"dance,omitempty"`
	Visual                   int32                                   `protobuf:"varint,32,opt,name=visual,proto3" json:"visual,omitempty"`
	Stamina                  int32                                   `protobuf:"varint,33,opt,name=stamina,proto3" json:"stamina,omitempty"`
	ExamBattleProduceCards   []*pcommon.ProduceCard                  `protobuf:"bytes,36,rep,name=examBattleProduceCards,proto3" json:"examBattleProduceCards,omitempty"`
	ExamBattleProduceItemIds []string                                `protobuf:"bytes,37,rep,name=examBattleProduceItemIds,proto3" json:"examBattleProduceItemIds,omitempty"`
	EndingLiveType           penum.ProduceLiveType                   `protobuf:"varint,99,opt,name=endingLiveType,proto3,enum=penum.ProduceLiveType" json:"endingLiveType,omitempty"`
	ProduceLiveType          penum.ProduceLiveType                   `protobuf:"varint,100,opt,name=produceLiveType,proto3,enum=penum.ProduceLiveType" json:"produceLiveType,omitempty"`
	LiveCostumeId            string                                  `protobuf:"bytes,101,opt,name=liveCostumeId,proto3" json:"liveCostumeId,omitempty"`
	LiveCostumeHeadId        string                                  `protobuf:"bytes,102,opt,name=liveCostumeHeadId,proto3" json:"liveCostumeHeadId,omitempty"`
	ReshootingCount          int32                                   `protobuf:"varint,103,opt,name=reshootingCount,proto3" json:"reshootingCount,omitempty"`
	MusicId                  string                                  `protobuf:"bytes,104,opt,name=musicId,proto3" json:"musicId,omitempty"`
	IsHighScoreRush          bool                                    `protobuf:"varint,105,opt,name=isHighScoreRush,proto3" json:"isHighScoreRush,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UserMemory) Reset() {
	*x = UserMemory{}
	mi := &file_ptransaction_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemory) ProtoMessage() {}

func (x *UserMemory) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemory.ProtoReflect.Descriptor instead.
func (*UserMemory) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{23}
}

func (x *UserMemory) GetUserMemoryId() string {
	if x != nil {
		return x.UserMemoryId
	}
	return ""
}

func (x *UserMemory) GetMemoryTagId() string {
	if x != nil {
		return x.MemoryTagId
	}
	return ""
}

func (x *UserMemory) GetIsProtected() bool {
	if x != nil {
		return x.IsProtected
	}
	return false
}

func (x *UserMemory) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *UserMemory) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *UserMemory) GetGrade() penum.ResultGrade {
	if x != nil {
		return x.Grade
	}
	return penum.ResultGrade(0)
}

func (x *UserMemory) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *UserMemory) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *UserMemory) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserMemory) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *UserMemory) GetIdolCardSkinId() string {
	if x != nil {
		return x.IdolCardSkinId
	}
	return ""
}

func (x *UserMemory) GetPlanType() penum.ProducePlanType {
	if x != nil {
		return x.PlanType
	}
	return penum.ProducePlanType(0)
}

func (x *UserMemory) GetIdolCardLevelLimitRank() penum.IdolCardLevelLimitRank {
	if x != nil {
		return x.IdolCardLevelLimitRank
	}
	return penum.IdolCardLevelLimitRank(0)
}

func (x *UserMemory) GetIdolCardPotentialRank() penum.IdolCardPotentialRank {
	if x != nil {
		return x.IdolCardPotentialRank
	}
	return penum.IdolCardPotentialRank(0)
}

func (x *UserMemory) GetShotTime() int64 {
	if x != nil {
		return x.ShotTime
	}
	return 0
}

func (x *UserMemory) GetNoProduceHistory() bool {
	if x != nil {
		return x.NoProduceHistory
	}
	return false
}

func (x *UserMemory) GetInheritCount() int32 {
	if x != nil {
		return x.InheritCount
	}
	return 0
}

func (x *UserMemory) GetProduceCard() *pcommon.ProduceCard {
	if x != nil {
		return x.ProduceCard
	}
	return nil
}

func (x *UserMemory) GetProduceCardPhaseType() penum.ProduceMemoryProduceCardPhaseType {
	if x != nil {
		return x.ProduceCardPhaseType
	}
	return penum.ProduceMemoryProduceCardPhaseType(0)
}

func (x *UserMemory) GetAbilities() []*UserMemory_MemoryAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *UserMemory) GetVocal() int32 {
	if x != nil {
		return x.Vocal
	}
	return 0
}

func (x *UserMemory) GetDance() int32 {
	if x != nil {
		return x.Dance
	}
	return 0
}

func (x *UserMemory) GetVisual() int32 {
	if x != nil {
		return x.Visual
	}
	return 0
}

func (x *UserMemory) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *UserMemory) GetExamBattleProduceCards() []*pcommon.ProduceCard {
	if x != nil {
		return x.ExamBattleProduceCards
	}
	return nil
}

func (x *UserMemory) GetExamBattleProduceItemIds() []string {
	if x != nil {
		return x.ExamBattleProduceItemIds
	}
	return nil
}

func (x *UserMemory) GetEndingLiveType() penum.ProduceLiveType {
	if x != nil {
		return x.EndingLiveType
	}
	return penum.ProduceLiveType(0)
}

func (x *UserMemory) GetProduceLiveType() penum.ProduceLiveType {
	if x != nil {
		return x.ProduceLiveType
	}
	return penum.ProduceLiveType(0)
}

func (x *UserMemory) GetLiveCostumeId() string {
	if x != nil {
		return x.LiveCostumeId
	}
	return ""
}

func (x *UserMemory) GetLiveCostumeHeadId() string {
	if x != nil {
		return x.LiveCostumeHeadId
	}
	return ""
}

func (x *UserMemory) GetReshootingCount() int32 {
	if x != nil {
		return x.ReshootingCount
	}
	return 0
}

func (x *UserMemory) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *UserMemory) GetIsHighScoreRush() bool {
	if x != nil {
		return x.IsHighScoreRush
	}
	return false
}

type UserMemoryInherit struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	UserMemoryId           string                 `protobuf:"bytes,2,opt,name=userMemoryId,proto3" json:"userMemoryId,omitempty"`
	ExamBattleProduceCards []*pcommon.ProduceCard `protobuf:"bytes,4,rep,name=examBattleProduceCards,proto3" json:"examBattleProduceCards,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserMemoryInherit) Reset() {
	*x = UserMemoryInherit{}
	mi := &file_ptransaction_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemoryInherit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemoryInherit) ProtoMessage() {}

func (x *UserMemoryInherit) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemoryInherit.ProtoReflect.Descriptor instead.
func (*UserMemoryInherit) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{24}
}

func (x *UserMemoryInherit) GetUserMemoryId() string {
	if x != nil {
		return x.UserMemoryId
	}
	return ""
}

func (x *UserMemoryInherit) GetExamBattleProduceCards() []*pcommon.ProduceCard {
	if x != nil {
		return x.ExamBattleProduceCards
	}
	return nil
}

type UserMission struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	MissionId               string                 `protobuf:"bytes,2,opt,name=missionId,proto3" json:"missionId,omitempty"`
	Progress                int64                  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	ReceivedThresholds      []int64                `protobuf:"varint,4,rep,packed,name=receivedThresholds,proto3" json:"receivedThresholds,omitempty"`
	IsUnlock                bool                   `protobuf:"varint,5,opt,name=isUnlock,proto3" json:"isUnlock,omitempty"`
	FirstThresholdClearTime int64                  `protobuf:"varint,6,opt,name=firstThresholdClearTime,proto3" json:"firstThresholdClearTime,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UserMission) Reset() {
	*x = UserMission{}
	mi := &file_ptransaction_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMission) ProtoMessage() {}

func (x *UserMission) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMission.ProtoReflect.Descriptor instead.
func (*UserMission) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{25}
}

func (x *UserMission) GetMissionId() string {
	if x != nil {
		return x.MissionId
	}
	return ""
}

func (x *UserMission) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *UserMission) GetReceivedThresholds() []int64 {
	if x != nil {
		return x.ReceivedThresholds
	}
	return nil
}

func (x *UserMission) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (x *UserMission) GetFirstThresholdClearTime() int64 {
	if x != nil {
		return x.FirstThresholdClearTime
	}
	return 0
}

type UserMissionDailyReleaseGroup struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	MissionDailyReleaseGroupId string                 `protobuf:"bytes,2,opt,name=missionDailyReleaseGroupId,proto3" json:"missionDailyReleaseGroupId,omitempty"`
	StartTime                  int64                  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UserMissionDailyReleaseGroup) Reset() {
	*x = UserMissionDailyReleaseGroup{}
	mi := &file_ptransaction_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMissionDailyReleaseGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMissionDailyReleaseGroup) ProtoMessage() {}

func (x *UserMissionDailyReleaseGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMissionDailyReleaseGroup.ProtoReflect.Descriptor instead.
func (*UserMissionDailyReleaseGroup) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{26}
}

func (x *UserMissionDailyReleaseGroup) GetMissionDailyReleaseGroupId() string {
	if x != nil {
		return x.MissionDailyReleaseGroupId
	}
	return ""
}

func (x *UserMissionDailyReleaseGroup) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type UserMissionGroup struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MissionGroupId string                 `protobuf:"bytes,2,opt,name=missionGroupId,proto3" json:"missionGroupId,omitempty"`
	Received       bool                   `protobuf:"varint,3,opt,name=received,proto3" json:"received,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserMissionGroup) Reset() {
	*x = UserMissionGroup{}
	mi := &file_ptransaction_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMissionGroup) ProtoMessage() {}

func (x *UserMissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMissionGroup.ProtoReflect.Descriptor instead.
func (*UserMissionGroup) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{27}
}

func (x *UserMissionGroup) GetMissionGroupId() string {
	if x != nil {
		return x.MissionGroupId
	}
	return ""
}

func (x *UserMissionGroup) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

type UserMissionPass struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	MissionPassId                          string                 `protobuf:"bytes,2,opt,name=missionPassId,proto3" json:"missionPassId,omitempty"`
	ReceivedNormalThresholds               []int32                `protobuf:"varint,4,rep,packed,name=receivedNormalThresholds,proto3" json:"receivedNormalThresholds,omitempty"`
	ReceivedPremiumThresholds              []int32                `protobuf:"varint,5,rep,packed,name=receivedPremiumThresholds,proto3" json:"receivedPremiumThresholds,omitempty"`
	HasPremiumPass                         bool                   `protobuf:"varint,6,opt,name=hasPremiumPass,proto3" json:"hasPremiumPass,omitempty"`
	ProvidedReceivedWeeklyMissionPassPoint bool                   `protobuf:"varint,7,opt,name=providedReceivedWeeklyMissionPassPoint,proto3" json:"providedReceivedWeeklyMissionPassPoint,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *UserMissionPass) Reset() {
	*x = UserMissionPass{}
	mi := &file_ptransaction_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMissionPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMissionPass) ProtoMessage() {}

func (x *UserMissionPass) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMissionPass.ProtoReflect.Descriptor instead.
func (*UserMissionPass) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{28}
}

func (x *UserMissionPass) GetMissionPassId() string {
	if x != nil {
		return x.MissionPassId
	}
	return ""
}

func (x *UserMissionPass) GetReceivedNormalThresholds() []int32 {
	if x != nil {
		return x.ReceivedNormalThresholds
	}
	return nil
}

func (x *UserMissionPass) GetReceivedPremiumThresholds() []int32 {
	if x != nil {
		return x.ReceivedPremiumThresholds
	}
	return nil
}

func (x *UserMissionPass) GetHasPremiumPass() bool {
	if x != nil {
		return x.HasPremiumPass
	}
	return false
}

func (x *UserMissionPass) GetProvidedReceivedWeeklyMissionPassPoint() bool {
	if x != nil {
		return x.ProvidedReceivedWeeklyMissionPassPoint
	}
	return false
}

type UserMissionPassPoint struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MissionPassId      string                 `protobuf:"bytes,2,opt,name=missionPassId,proto3" json:"missionPassId,omitempty"`
	MissionPassPointId string                 `protobuf:"bytes,3,opt,name=missionPassPointId,proto3" json:"missionPassPointId,omitempty"`
	Point              int32                  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserMissionPassPoint) Reset() {
	*x = UserMissionPassPoint{}
	mi := &file_ptransaction_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMissionPassPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMissionPassPoint) ProtoMessage() {}

func (x *UserMissionPassPoint) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMissionPassPoint.ProtoReflect.Descriptor instead.
func (*UserMissionPassPoint) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{29}
}

func (x *UserMissionPassPoint) GetMissionPassId() string {
	if x != nil {
		return x.MissionPassId
	}
	return ""
}

func (x *UserMissionPassPoint) GetMissionPassPointId() string {
	if x != nil {
		return x.MissionPassPointId
	}
	return ""
}

func (x *UserMissionPassPoint) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type UserMissionPoint struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MissionPointId string                 `protobuf:"bytes,2,opt,name=missionPointId,proto3" json:"missionPointId,omitempty"`
	Point          int32                  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	ReceivedPoints []int32                `protobuf:"varint,4,rep,packed,name=receivedPoints,proto3" json:"receivedPoints,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserMissionPoint) Reset() {
	*x = UserMissionPoint{}
	mi := &file_ptransaction_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMissionPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMissionPoint) ProtoMessage() {}

func (x *UserMissionPoint) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMissionPoint.ProtoReflect.Descriptor instead.
func (*UserMissionPoint) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{30}
}

func (x *UserMissionPoint) GetMissionPointId() string {
	if x != nil {
		return x.MissionPointId
	}
	return ""
}

func (x *UserMissionPoint) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *UserMissionPoint) GetReceivedPoints() []int32 {
	if x != nil {
		return x.ReceivedPoints
	}
	return nil
}

type UserMoney struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	UnreceivedTotalQuantity           int32                  `protobuf:"varint,2,opt,name=unreceivedTotalQuantity,proto3" json:"unreceivedTotalQuantity,omitempty"`
	UnreceivedTotalElapsedTimeSeconds int32                  `protobuf:"varint,3,opt,name=unreceivedTotalElapsedTimeSeconds,proto3" json:"unreceivedTotalElapsedTimeSeconds,omitempty"`
	LastReceivedTime                  int64                  `protobuf:"varint,4,opt,name=lastReceivedTime,proto3" json:"lastReceivedTime,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *UserMoney) Reset() {
	*x = UserMoney{}
	mi := &file_ptransaction_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMoney) ProtoMessage() {}

func (x *UserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMoney.ProtoReflect.Descriptor instead.
func (*UserMoney) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{31}
}

func (x *UserMoney) GetUnreceivedTotalQuantity() int32 {
	if x != nil {
		return x.UnreceivedTotalQuantity
	}
	return 0
}

func (x *UserMoney) GetUnreceivedTotalElapsedTimeSeconds() int32 {
	if x != nil {
		return x.UnreceivedTotalElapsedTimeSeconds
	}
	return 0
}

func (x *UserMoney) GetLastReceivedTime() int64 {
	if x != nil {
		return x.LastReceivedTime
	}
	return 0
}

type UserMovie struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserMovieId   string                 `protobuf:"bytes,2,opt,name=userMovieId,proto3" json:"userMovieId,omitempty"`
	MoviePath     string                 `protobuf:"bytes,3,opt,name=moviePath,proto3" json:"moviePath,omitempty"`
	RetakeCount   int32                  `protobuf:"varint,4,opt,name=retakeCount,proto3" json:"retakeCount,omitempty"`
	MeishiNumber  int32                  `protobuf:"varint,5,opt,name=meishiNumber,proto3" json:"meishiNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMovie) Reset() {
	*x = UserMovie{}
	mi := &file_ptransaction_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMovie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMovie) ProtoMessage() {}

func (x *UserMovie) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMovie.ProtoReflect.Descriptor instead.
func (*UserMovie) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{32}
}

func (x *UserMovie) GetUserMovieId() string {
	if x != nil {
		return x.UserMovieId
	}
	return ""
}

func (x *UserMovie) GetMoviePath() string {
	if x != nil {
		return x.MoviePath
	}
	return ""
}

func (x *UserMovie) GetRetakeCount() int32 {
	if x != nil {
		return x.RetakeCount
	}
	return 0
}

func (x *UserMovie) GetMeishiNumber() int32 {
	if x != nil {
		return x.MeishiNumber
	}
	return 0
}

type UserMusic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MusicId       string                 `protobuf:"bytes,2,opt,name=musicId,proto3" json:"musicId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMusic) Reset() {
	*x = UserMusic{}
	mi := &file_ptransaction_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMusic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMusic) ProtoMessage() {}

func (x *UserMusic) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMusic.ProtoReflect.Descriptor instead.
func (*UserMusic) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{33}
}

func (x *UserMusic) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

type UserPhoto struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserPhotoId       string                 `protobuf:"bytes,2,opt,name=userPhotoId,proto3" json:"userPhotoId,omitempty"`
	ImagePath         string                 `protobuf:"bytes,3,opt,name=imagePath,proto3" json:"imagePath,omitempty"`
	IdolCardId        string                 `protobuf:"bytes,4,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	Name              string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ShotTime          int64                  `protobuf:"varint,6,opt,name=shotTime,proto3" json:"shotTime,omitempty"`
	IsProtected       bool                   `protobuf:"varint,7,opt,name=isProtected,proto3" json:"isProtected,omitempty"`
	CharacterIds      []string               `protobuf:"bytes,8,rep,name=characterIds,proto3" json:"characterIds,omitempty"`
	PhotoBackgroundId string                 `protobuf:"bytes,9,opt,name=photoBackgroundId,proto3" json:"photoBackgroundId,omitempty"`
	ReshootingCount   int64                  `protobuf:"varint,10,opt,name=reshootingCount,proto3" json:"reshootingCount,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UserPhoto) Reset() {
	*x = UserPhoto{}
	mi := &file_ptransaction_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhoto) ProtoMessage() {}

func (x *UserPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhoto.ProtoReflect.Descriptor instead.
func (*UserPhoto) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{34}
}

func (x *UserPhoto) GetUserPhotoId() string {
	if x != nil {
		return x.UserPhotoId
	}
	return ""
}

func (x *UserPhoto) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *UserPhoto) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *UserPhoto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserPhoto) GetShotTime() int64 {
	if x != nil {
		return x.ShotTime
	}
	return 0
}

func (x *UserPhoto) GetIsProtected() bool {
	if x != nil {
		return x.IsProtected
	}
	return false
}

func (x *UserPhoto) GetCharacterIds() []string {
	if x != nil {
		return x.CharacterIds
	}
	return nil
}

func (x *UserPhoto) GetPhotoBackgroundId() string {
	if x != nil {
		return x.PhotoBackgroundId
	}
	return ""
}

func (x *UserPhoto) GetReshootingCount() int64 {
	if x != nil {
		return x.ReshootingCount
	}
	return 0
}

type UserPhotoBackground struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PhotoBackgroundId string                 `protobuf:"bytes,2,opt,name=photoBackgroundId,proto3" json:"photoBackgroundId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UserPhotoBackground) Reset() {
	*x = UserPhotoBackground{}
	mi := &file_ptransaction_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPhotoBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhotoBackground) ProtoMessage() {}

func (x *UserPhotoBackground) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhotoBackground.ProtoReflect.Descriptor instead.
func (*UserPhotoBackground) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{35}
}

func (x *UserPhotoBackground) GetPhotoBackgroundId() string {
	if x != nil {
		return x.PhotoBackgroundId
	}
	return ""
}

type UserPhotoPose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhotoPoseId   string                 `protobuf:"bytes,2,opt,name=photoPoseId,proto3" json:"photoPoseId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPhotoPose) Reset() {
	*x = UserPhotoPose{}
	mi := &file_ptransaction_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPhotoPose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhotoPose) ProtoMessage() {}

func (x *UserPhotoPose) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhotoPose.ProtoReflect.Descriptor instead.
func (*UserPhotoPose) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{36}
}

func (x *UserPhotoPose) GetPhotoPoseId() string {
	if x != nil {
		return x.PhotoPoseId
	}
	return ""
}

type UserPreference struct {
	state                  protoimpl.MessageState       `protogen:"open.v1"`
	PhotoButtonExecuteType penum.PhotoButtonExecuteType `protobuf:"varint,2,opt,name=photoButtonExecuteType,proto3,enum=penum.PhotoButtonExecuteType" json:"photoButtonExecuteType,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserPreference) Reset() {
	*x = UserPreference{}
	mi := &file_ptransaction_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPreference) ProtoMessage() {}

func (x *UserPreference) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPreference.ProtoReflect.Descriptor instead.
func (*UserPreference) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{37}
}

func (x *UserPreference) GetPhotoButtonExecuteType() penum.PhotoButtonExecuteType {
	if x != nil {
		return x.PhotoButtonExecuteType
	}
	return penum.PhotoButtonExecuteType(0)
}

type UserProduce struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProduceId     string                 `protobuf:"bytes,2,opt,name=produceId,proto3" json:"produceId,omitempty"`
	PlayCount     int32                  `protobuf:"varint,3,opt,name=playCount,proto3" json:"playCount,omitempty"`
	ClearCount    int32                  `protobuf:"varint,4,opt,name=clearCount,proto3" json:"clearCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduce) Reset() {
	*x = UserProduce{}
	mi := &file_ptransaction_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduce) ProtoMessage() {}

func (x *UserProduce) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduce.ProtoReflect.Descriptor instead.
func (*UserProduce) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{38}
}

func (x *UserProduce) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *UserProduce) GetPlayCount() int32 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *UserProduce) GetClearCount() int32 {
	if x != nil {
		return x.ClearCount
	}
	return 0
}

type UserProduceAdv struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssetId       string                 `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceAdv) Reset() {
	*x = UserProduceAdv{}
	mi := &file_ptransaction_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceAdv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceAdv) ProtoMessage() {}

func (x *UserProduceAdv) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceAdv.ProtoReflect.Descriptor instead.
func (*UserProduceAdv) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{39}
}

func (x *UserProduceAdv) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type UserProduceCard struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ProduceCardId           string                 `protobuf:"bytes,2,opt,name=produceCardId,proto3" json:"produceCardId,omitempty"`
	ProduceCardUpgradeCount int32                  `protobuf:"varint,3,opt,name=produceCardUpgradeCount,proto3" json:"produceCardUpgradeCount,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UserProduceCard) Reset() {
	*x = UserProduceCard{}
	mi := &file_ptransaction_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceCard) ProtoMessage() {}

func (x *UserProduceCard) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceCard.ProtoReflect.Descriptor instead.
func (*UserProduceCard) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{40}
}

func (x *UserProduceCard) GetProduceCardId() string {
	if x != nil {
		return x.ProduceCardId
	}
	return ""
}

func (x *UserProduceCard) GetProduceCardUpgradeCount() int32 {
	if x != nil {
		return x.ProduceCardUpgradeCount
	}
	return 0
}

type UserProduceCardReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProduceCardId string                 `protobuf:"bytes,2,opt,name=produceCardId,proto3" json:"produceCardId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceCardReward) Reset() {
	*x = UserProduceCardReward{}
	mi := &file_ptransaction_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceCardReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceCardReward) ProtoMessage() {}

func (x *UserProduceCardReward) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceCardReward.ProtoReflect.Descriptor instead.
func (*UserProduceCardReward) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{41}
}

func (x *UserProduceCardReward) GetProduceCardId() string {
	if x != nil {
		return x.ProduceCardId
	}
	return ""
}

type UserProduceCharacter struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	CharacterId               string                 `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	ProduceId                 string                 `protobuf:"bytes,3,opt,name=produceId,proto3" json:"produceId,omitempty"`
	UnlockChallengeSlotNumber int32                  `protobuf:"varint,7,opt,name=unlockChallengeSlotNumber,proto3" json:"unlockChallengeSlotNumber,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UserProduceCharacter) Reset() {
	*x = UserProduceCharacter{}
	mi := &file_ptransaction_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceCharacter) ProtoMessage() {}

func (x *UserProduceCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceCharacter.ProtoReflect.Descriptor instead.
func (*UserProduceCharacter) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{42}
}

func (x *UserProduceCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserProduceCharacter) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *UserProduceCharacter) GetUnlockChallengeSlotNumber() int32 {
	if x != nil {
		return x.UnlockChallengeSlotNumber
	}
	return 0
}

type UserProduceDrink struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProduceDrinkId string                 `protobuf:"bytes,2,opt,name=produceDrinkId,proto3" json:"produceDrinkId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserProduceDrink) Reset() {
	*x = UserProduceDrink{}
	mi := &file_ptransaction_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceDrink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceDrink) ProtoMessage() {}

func (x *UserProduceDrink) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceDrink.ProtoReflect.Descriptor instead.
func (*UserProduceDrink) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{43}
}

func (x *UserProduceDrink) GetProduceDrinkId() string {
	if x != nil {
		return x.ProduceDrinkId
	}
	return ""
}

type UserProduceGroupCharacter struct {
	state                            protoimpl.MessageState          `protogen:"open.v1"`
	CharacterId                      string                          `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	ProduceGroupId                   string                          `protobuf:"bytes,3,opt,name=produceGroupId,proto3" json:"produceGroupId,omitempty"`
	ViewUnlockAnimationAuditionTypes []penum.ProduceStepAuditionType `protobuf:"varint,4,rep,packed,name=viewUnlockAnimationAuditionTypes,proto3,enum=penum.ProduceStepAuditionType" json:"viewUnlockAnimationAuditionTypes,omitempty"`
	EndingLiveType                   penum.ProduceLiveType           `protobuf:"varint,5,opt,name=endingLiveType,proto3,enum=penum.ProduceLiveType" json:"endingLiveType,omitempty"`
	DisableForceLiveCommon           bool                            `protobuf:"varint,6,opt,name=disableForceLiveCommon,proto3" json:"disableForceLiveCommon,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UserProduceGroupCharacter) Reset() {
	*x = UserProduceGroupCharacter{}
	mi := &file_ptransaction_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceGroupCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceGroupCharacter) ProtoMessage() {}

func (x *UserProduceGroupCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceGroupCharacter.ProtoReflect.Descriptor instead.
func (*UserProduceGroupCharacter) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{44}
}

func (x *UserProduceGroupCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserProduceGroupCharacter) GetProduceGroupId() string {
	if x != nil {
		return x.ProduceGroupId
	}
	return ""
}

func (x *UserProduceGroupCharacter) GetViewUnlockAnimationAuditionTypes() []penum.ProduceStepAuditionType {
	if x != nil {
		return x.ViewUnlockAnimationAuditionTypes
	}
	return nil
}

func (x *UserProduceGroupCharacter) GetEndingLiveType() penum.ProduceLiveType {
	if x != nil {
		return x.EndingLiveType
	}
	return penum.ProduceLiveType(0)
}

func (x *UserProduceGroupCharacter) GetDisableForceLiveCommon() bool {
	if x != nil {
		return x.DisableForceLiveCommon
	}
	return false
}

type UserProduceIdolCard struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ProduceId               string                 `protobuf:"bytes,2,opt,name=produceId,proto3" json:"produceId,omitempty"`
	IdolCardId              string                 `protobuf:"bytes,3,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	ChallengeProduceItemIds []string               `protobuf:"bytes,10,rep,name=challengeProduceItemIds,proto3" json:"challengeProduceItemIds,omitempty"`
	LiveType                penum.ProduceLiveType  `protobuf:"varint,11,opt,name=liveType,proto3,enum=penum.ProduceLiveType" json:"liveType,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UserProduceIdolCard) Reset() {
	*x = UserProduceIdolCard{}
	mi := &file_ptransaction_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceIdolCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceIdolCard) ProtoMessage() {}

func (x *UserProduceIdolCard) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceIdolCard.ProtoReflect.Descriptor instead.
func (*UserProduceIdolCard) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{45}
}

func (x *UserProduceIdolCard) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *UserProduceIdolCard) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *UserProduceIdolCard) GetChallengeProduceItemIds() []string {
	if x != nil {
		return x.ChallengeProduceItemIds
	}
	return nil
}

func (x *UserProduceIdolCard) GetLiveType() penum.ProduceLiveType {
	if x != nil {
		return x.LiveType
	}
	return penum.ProduceLiveType(0)
}

type UserProduceItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProduceItemId string                 `protobuf:"bytes,2,opt,name=produceItemId,proto3" json:"produceItemId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceItem) Reset() {
	*x = UserProduceItem{}
	mi := &file_ptransaction_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceItem) ProtoMessage() {}

func (x *UserProduceItem) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceItem.ProtoReflect.Descriptor instead.
func (*UserProduceItem) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{46}
}

func (x *UserProduceItem) GetProduceItemId() string {
	if x != nil {
		return x.ProduceItemId
	}
	return ""
}

type UserProduceLive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MusicId       string                 `protobuf:"bytes,2,opt,name=musicId,proto3" json:"musicId,omitempty"`
	LiveType      penum.ProduceLiveType  `protobuf:"varint,3,opt,name=liveType,proto3,enum=penum.ProduceLiveType" json:"liveType,omitempty"`
	Viewed        bool                   `protobuf:"varint,4,opt,name=viewed,proto3" json:"viewed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceLive) Reset() {
	*x = UserProduceLive{}
	mi := &file_ptransaction_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceLive) ProtoMessage() {}

func (x *UserProduceLive) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceLive.ProtoReflect.Descriptor instead.
func (*UserProduceLive) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{47}
}

func (x *UserProduceLive) GetMusicId() string {
	if x != nil {
		return x.MusicId
	}
	return ""
}

func (x *UserProduceLive) GetLiveType() penum.ProduceLiveType {
	if x != nil {
		return x.LiveType
	}
	return penum.ProduceLiveType(0)
}

func (x *UserProduceLive) GetViewed() bool {
	if x != nil {
		return x.Viewed
	}
	return false
}

type UserProduceMemoryDeck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProduceType   penum.ProduceType      `protobuf:"varint,2,opt,name=produceType,proto3,enum=penum.ProduceType" json:"produceType,omitempty"`
	Number        int32                  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	UserMemoryIds []string               `protobuf:"bytes,4,rep,name=userMemoryIds,proto3" json:"userMemoryIds,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceMemoryDeck) Reset() {
	*x = UserProduceMemoryDeck{}
	mi := &file_ptransaction_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceMemoryDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceMemoryDeck) ProtoMessage() {}

func (x *UserProduceMemoryDeck) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceMemoryDeck.ProtoReflect.Descriptor instead.
func (*UserProduceMemoryDeck) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{48}
}

func (x *UserProduceMemoryDeck) GetProduceType() penum.ProduceType {
	if x != nil {
		return x.ProduceType
	}
	return penum.ProduceType(0)
}

func (x *UserProduceMemoryDeck) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceMemoryDeck) GetUserMemoryIds() []string {
	if x != nil {
		return x.UserMemoryIds
	}
	return nil
}

func (x *UserProduceMemoryDeck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserProduceProgress struct {
	state                                         protoimpl.MessageState                             `protogen:"open.v1"`
	ProduceGroupId                                string                                             `protobuf:"bytes,2,opt,name=produceGroupId,proto3" json:"produceGroupId,omitempty"`
	ProduceId                                     string                                             `protobuf:"bytes,3,opt,name=produceId,proto3" json:"produceId,omitempty"`
	ProducerLevel                                 int32                                              `protobuf:"varint,5,opt,name=producerLevel,proto3" json:"producerLevel,omitempty"`
	CharacterId                                   string                                             `protobuf:"bytes,6,opt,name=characterId,proto3" json:"characterId,omitempty"`
	IdolCardId                                    string                                             `protobuf:"bytes,7,opt,name=idolCardId,proto3" json:"idolCardId,omitempty"`
	IdolCardSkinId                                string                                             `protobuf:"bytes,8,opt,name=idolCardSkinId,proto3" json:"idolCardSkinId,omitempty"`
	IdolCardLevelLimitRank                        penum.IdolCardLevelLimitRank                       `protobuf:"varint,9,opt,name=idolCardLevelLimitRank,proto3,enum=penum.IdolCardLevelLimitRank" json:"idolCardLevelLimitRank,omitempty"`
	IdolCardPotentialRank                         penum.IdolCardPotentialRank                        `protobuf:"varint,10,opt,name=idolCardPotentialRank,proto3,enum=penum.IdolCardPotentialRank" json:"idolCardPotentialRank,omitempty"`
	SatisfiedConditionSetIds                      []string                                           `protobuf:"bytes,11,rep,name=satisfiedConditionSetIds,proto3" json:"satisfiedConditionSetIds,omitempty"`
	ProduceBoostItemIds                           []string                                           `protobuf:"bytes,12,rep,name=produceBoostItemIds,proto3" json:"produceBoostItemIds,omitempty"`
	TrueEndProduceTypes                           []penum.ProduceType                                `protobuf:"varint,13,rep,packed,name=trueEndProduceTypes,proto3,enum=penum.ProduceType" json:"trueEndProduceTypes,omitempty"`
	HasForceLiveCommonIdolCard                    bool                                               `protobuf:"varint,15,opt,name=hasForceLiveCommonIdolCard,proto3" json:"hasForceLiveCommonIdolCard,omitempty"`
	DisableForceLiveCommon                        bool                                               `protobuf:"varint,16,opt,name=disableForceLiveCommon,proto3" json:"disableForceLiveCommon,omitempty"`
	ProduceHighScoreId                            string                                             `protobuf:"bytes,80,opt,name=produceHighScoreId,proto3" json:"produceHighScoreId,omitempty"`
	ProduceCampaigns                              []*pcommon.ProduceCampaign                         `protobuf:"bytes,91,rep,name=produceCampaigns,proto3" json:"produceCampaigns,omitempty"`
	Status                                        penum.ProduceProgressStatus                        `protobuf:"varint,100,opt,name=status,proto3,enum=penum.ProduceProgressStatus" json:"status,omitempty"`
	ProduceScore                                  int32                                              `protobuf:"varint,101,opt,name=produceScore,proto3" json:"produceScore,omitempty"`
	IsFailedProduce                               bool                                               `protobuf:"varint,102,opt,name=isFailedProduce,proto3" json:"isFailedProduce,omitempty"`
	StepNumber                                    int32                                              `protobuf:"varint,103,opt,name=stepNumber,proto3" json:"stepNumber,omitempty"`
	StepType                                      penum.ProduceStepType                              `protobuf:"varint,105,opt,name=stepType,proto3,enum=penum.ProduceStepType" json:"stepType,omitempty"`
	StepId                                        string                                             `protobuf:"bytes,106,opt,name=stepId,proto3" json:"stepId,omitempty"`
	EffectStepType                                penum.ProduceStepType                              `protobuf:"varint,107,opt,name=effectStepType,proto3,enum=penum.ProduceStepType" json:"effectStepType,omitempty"`
	EffectStepId                                  string                                             `protobuf:"bytes,108,opt,name=effectStepId,proto3" json:"effectStepId,omitempty"`
	StepSelectNumber                              int32                                              `protobuf:"varint,109,opt,name=stepSelectNumber,proto3" json:"stepSelectNumber,omitempty"`
	OriginStepType                                penum.ProduceStepType                              `protobuf:"varint,110,opt,name=originStepType,proto3,enum=penum.ProduceStepType" json:"originStepType,omitempty"`
	InProgressStep                                bool                                               `protobuf:"varint,112,opt,name=inProgressStep,proto3" json:"inProgressStep,omitempty"`
	ContinueCount                                 int32                                              `protobuf:"varint,113,opt,name=continueCount,proto3" json:"continueCount,omitempty"`
	ProduceNavigationNormalNumber                 int32                                              `protobuf:"varint,114,opt,name=produceNavigationNormalNumber,proto3" json:"produceNavigationNormalNumber,omitempty"`
	ProduceNavigationAuditionNumber               int32                                              `protobuf:"varint,115,opt,name=produceNavigationAuditionNumber,proto3" json:"produceNavigationAuditionNumber,omitempty"`
	ProduceNavigationLoseNumber                   int32                                              `protobuf:"varint,116,opt,name=produceNavigationLoseNumber,proto3" json:"produceNavigationLoseNumber,omitempty"`
	ResultMemory                                  *pcommon.Memory                                    `protobuf:"bytes,118,opt,name=resultMemory,proto3" json:"resultMemory,omitempty"`
	LastProduceEventCharacterGrowthNumber         int32                                              `protobuf:"varint,121,opt,name=lastProduceEventCharacterGrowthNumber,proto3" json:"lastProduceEventCharacterGrowthNumber,omitempty"`
	IsChangeCostumeProduce                        bool                                               `protobuf:"varint,123,opt,name=isChangeCostumeProduce,proto3" json:"isChangeCostumeProduce,omitempty"`
	IsChangeCostumeLive                           bool                                               `protobuf:"varint,124,opt,name=isChangeCostumeLive,proto3" json:"isChangeCostumeLive,omitempty"`
	IsChangeCostumeTraining                       bool                                               `protobuf:"varint,126,opt,name=isChangeCostumeTraining,proto3" json:"isChangeCostumeTraining,omitempty"`
	RentalPublicUserId                            string                                             `protobuf:"bytes,125,opt,name=rentalPublicUserId,proto3" json:"rentalPublicUserId,omitempty"`
	Vocal                                         int32                                              `protobuf:"varint,200,opt,name=vocal,proto3" json:"vocal,omitempty"`
	Dance                                         int32                                              `protobuf:"varint,201,opt,name=dance,proto3" json:"dance,omitempty"`
	Visual                                        int32                                              `protobuf:"varint,202,opt,name=visual,proto3" json:"visual,omitempty"`
	VocalGrowthRatePermil                         int32                                              `protobuf:"varint,203,opt,name=vocalGrowthRatePermil,proto3" json:"vocalGrowthRatePermil,omitempty"`
	DanceGrowthRatePermil                         int32                                              `protobuf:"varint,204,opt,name=danceGrowthRatePermil,proto3" json:"danceGrowthRatePermil,omitempty"`
	VisualGrowthRatePermil                        int32                                              `protobuf:"varint,205,opt,name=visualGrowthRatePermil,proto3" json:"visualGrowthRatePermil,omitempty"`
	VocalAdditionalLimit                          int32                                              `protobuf:"varint,206,opt,name=vocalAdditionalLimit,proto3" json:"vocalAdditionalLimit,omitempty"`
	DanceAdditionalLimit                          int32                                              `protobuf:"varint,207,opt,name=danceAdditionalLimit,proto3" json:"danceAdditionalLimit,omitempty"`
	VisualAdditionalLimit                         int32                                              `protobuf:"varint,208,opt,name=visualAdditionalLimit,proto3" json:"visualAdditionalLimit,omitempty"`
	Stamina                                       int32                                              `protobuf:"varint,220,opt,name=stamina,proto3" json:"stamina,omitempty"`
	MaxStamina                                    int32                                              `protobuf:"varint,221,opt,name=maxStamina,proto3" json:"maxStamina,omitempty"`
	StaminaRecoverValueRatePermil                 int32                                              `protobuf:"varint,222,opt,name=staminaRecoverValueRatePermil,proto3" json:"staminaRecoverValueRatePermil,omitempty"`
	StaminaReduceValueRatePermil                  int32                                              `protobuf:"varint,223,opt,name=staminaReduceValueRatePermil,proto3" json:"staminaReduceValueRatePermil,omitempty"`
	StaminaRecoverDisableTurn                     int32                                              `protobuf:"varint,224,opt,name=staminaRecoverDisableTurn,proto3" json:"staminaRecoverDisableTurn,omitempty"`
	ProducePoint                                  int32                                              `protobuf:"varint,230,opt,name=producePoint,proto3" json:"producePoint,omitempty"`
	ProducePointAdditionValueRatePermil           int32                                              `protobuf:"varint,231,opt,name=producePointAdditionValueRatePermil,proto3" json:"producePointAdditionValueRatePermil,omitempty"`
	ProducePointReduceValueRatePermil             int32                                              `protobuf:"varint,232,opt,name=producePointReduceValueRatePermil,proto3" json:"producePointReduceValueRatePermil,omitempty"`
	ProducePointGetDisableTurn                    int32                                              `protobuf:"varint,233,opt,name=producePointGetDisableTurn,proto3" json:"producePointGetDisableTurn,omitempty"`
	VoteCount                                     int32                                              `protobuf:"varint,235,opt,name=voteCount,proto3" json:"voteCount,omitempty"`
	HighScoreGold                                 int32                                              `protobuf:"varint,236,opt,name=highScoreGold,proto3" json:"highScoreGold,omitempty"`
	CharacterProduceSkills                        []*UserProduceProgress_ProduceSkill                `protobuf:"bytes,253,rep,name=characterProduceSkills,proto3" json:"characterProduceSkills,omitempty"`
	DearnessStoryDearnessLevel                    int32                                              `protobuf:"varint,254,opt,name=dearnessStoryDearnessLevel,proto3" json:"dearnessStoryDearnessLevel,omitempty"`
	IdolCardProduceSkills                         []*UserProduceProgress_ProduceSkill                `protobuf:"bytes,273,rep,name=idolCardProduceSkills,proto3" json:"idolCardProduceSkills,omitempty"`
	ProduceCardRemainSelectRerollCount            int32                                              `protobuf:"varint,311,opt,name=produceCardRemainSelectRerollCount,proto3" json:"produceCardRemainSelectRerollCount,omitempty"`
	HiddenProduceCardReroll                       bool                                               `protobuf:"varint,312,opt,name=hiddenProduceCardReroll,proto3" json:"hiddenProduceCardReroll,omitempty"`
	ExcludeProduceCardIds                         []string                                           `protobuf:"bytes,313,rep,name=excludeProduceCardIds,proto3" json:"excludeProduceCardIds,omitempty"`
	ProduceCardRemainExcludeCount                 int32                                              `protobuf:"varint,314,opt,name=produceCardRemainExcludeCount,proto3" json:"produceCardRemainExcludeCount,omitempty"`
	HiddenProduceCardExclude                      bool                                               `protobuf:"varint,315,opt,name=hiddenProduceCardExclude,proto3" json:"hiddenProduceCardExclude,omitempty"`
	ProduceItems                                  []*UserProduceProgress_ProduceItem                 `protobuf:"bytes,353,rep,name=produceItems,proto3" json:"produceItems,omitempty"`
	ProduceItemGetDisableTurn                     int32                                              `protobuf:"varint,354,opt,name=produceItemGetDisableTurn,proto3" json:"produceItemGetDisableTurn,omitempty"`
	ProduceDrinkIds                               []string                                           `protobuf:"bytes,400,rep,name=produceDrinkIds,proto3" json:"produceDrinkIds,omitempty"`
	ProduceDrinkGetDisableTurn                    int32                                              `protobuf:"varint,401,opt,name=produceDrinkGetDisableTurn,proto3" json:"produceDrinkGetDisableTurn,omitempty"`
	AuditionEffectParameterBonusPermil            int32                                              `protobuf:"varint,504,opt,name=auditionEffectParameterBonusPermil,proto3" json:"auditionEffectParameterBonusPermil,omitempty"`
	AuditionNpcEnhancePermil                      int32                                              `protobuf:"varint,505,opt,name=auditionNpcEnhancePermil,proto3" json:"auditionNpcEnhancePermil,omitempty"`
	EventSchoolStaminaPermil                      int32                                              `protobuf:"varint,550,opt,name=eventSchoolStaminaPermil,proto3" json:"eventSchoolStaminaPermil,omitempty"`
	EventActivityProducePointPermil               int32                                              `protobuf:"varint,551,opt,name=eventActivityProducePointPermil,proto3" json:"eventActivityProducePointPermil,omitempty"`
	EventBusinessVoteCountPermil                  int32                                              `protobuf:"varint,552,opt,name=eventBusinessVoteCountPermil,proto3" json:"eventBusinessVoteCountPermil,omitempty"`
	ExamSeedValue                                 int32                                              `protobuf:"varint,600,opt,name=examSeedValue,proto3" json:"examSeedValue,omitempty"`
	ProduceExamGimmickEffectGroupId               string                                             `protobuf:"bytes,601,opt,name=produceExamGimmickEffectGroupId,proto3" json:"produceExamGimmickEffectGroupId,omitempty"`
	ExamStatusEnchants                            []*UserProduceProgress_ExamStatusEnchant           `protobuf:"bytes,607,rep,name=examStatusEnchants,proto3" json:"examStatusEnchants,omitempty"`
	LessonVocalSpChangeRatePermil                 int32                                              `protobuf:"varint,608,opt,name=lessonVocalSpChangeRatePermil,proto3" json:"lessonVocalSpChangeRatePermil,omitempty"`
	LessonDanceSpChangeRatePermil                 int32                                              `protobuf:"varint,609,opt,name=lessonDanceSpChangeRatePermil,proto3" json:"lessonDanceSpChangeRatePermil,omitempty"`
	LessonVisualSpChangeRatePermil                int32                                              `protobuf:"varint,610,opt,name=lessonVisualSpChangeRatePermil,proto3" json:"lessonVisualSpChangeRatePermil,omitempty"`
	ExamResultType                                penum.ProduceExamResultType                        `protobuf:"varint,616,opt,name=examResultType,proto3,enum=penum.ProduceExamResultType" json:"examResultType,omitempty"`
	LessonGrowthResult                            *pcommon.ProduceLessonGrowthResult                 `protobuf:"bytes,618,opt,name=lessonGrowthResult,proto3" json:"lessonGrowthResult,omitempty"`
	ExamEndResult                                 *pcommon.ProduceExamEndResult                      `protobuf:"bytes,620,opt,name=examEndResult,proto3" json:"examEndResult,omitempty"`
	LessonLimitUpScore                            int32                                              `protobuf:"varint,622,opt,name=lessonLimitUpScore,proto3" json:"lessonLimitUpScore,omitempty"`
	ExamExtraTurn                                 int32                                              `protobuf:"varint,625,opt,name=examExtraTurn,proto3" json:"examExtraTurn,omitempty"`
	SelfLessonTypeStaminaPermils                  []*UserProduceProgress_SelfLessonTypeStaminaPermil `protobuf:"bytes,627,rep,name=selfLessonTypeStaminaPermils,proto3" json:"selfLessonTypeStaminaPermils,omitempty"`
	LiveType                                      penum.ProduceLiveType                              `protobuf:"varint,650,opt,name=liveType,proto3,enum=penum.ProduceLiveType" json:"liveType,omitempty"`
	LessonPresentAdditionalProduceCardRewardCount int32                                              `protobuf:"varint,700,opt,name=lessonPresentAdditionalProduceCardRewardCount,proto3" json:"lessonPresentAdditionalProduceCardRewardCount,omitempty"`
	CustomizeAdditionalProduceCardCount           int32                                              `protobuf:"varint,760,opt,name=customizeAdditionalProduceCardCount,proto3" json:"customizeAdditionalProduceCardCount,omitempty"`
	CustomizeDiscountPermils                      []int32                                            `protobuf:"varint,761,rep,packed,name=customizeDiscountPermils,proto3" json:"customizeDiscountPermils,omitempty"`
	ShopProduceCardUpgradePrice                   int32                                              `protobuf:"varint,800,opt,name=shopProduceCardUpgradePrice,proto3" json:"shopProduceCardUpgradePrice,omitempty"`
	ShopProduceCardDeletePrice                    int32                                              `protobuf:"varint,801,opt,name=shopProduceCardDeletePrice,proto3" json:"shopProduceCardDeletePrice,omitempty"`
	ShopDiscountPermils                           []int32                                            `protobuf:"varint,802,rep,packed,name=shopDiscountPermils,proto3" json:"shopDiscountPermils,omitempty"`
	ShopProduceCardUpgradeDiscountPermils         []int32                                            `protobuf:"varint,803,rep,packed,name=shopProduceCardUpgradeDiscountPermils,proto3" json:"shopProduceCardUpgradeDiscountPermils,omitempty"`
	ShopProduceCardDeleteDiscountPermils          []int32                                            `protobuf:"varint,804,rep,packed,name=shopProduceCardDeleteDiscountPermils,proto3" json:"shopProduceCardDeleteDiscountPermils,omitempty"`
	ShopProduceCardDiscounts                      []*UserProduceProgress_ShopProduceCardDiscount     `protobuf:"bytes,807,rep,name=shopProduceCardDiscounts,proto3" json:"shopProduceCardDiscounts,omitempty"`
	ShopProduceDrinkDiscountPermils               []int32                                            `protobuf:"varint,808,rep,packed,name=shopProduceDrinkDiscountPermils,proto3" json:"shopProduceDrinkDiscountPermils,omitempty"`
	ShopRemainRerollCount                         int32                                              `protobuf:"varint,811,opt,name=shopRemainRerollCount,proto3" json:"shopRemainRerollCount,omitempty"`
	HiddenShopReroll                              bool                                               `protobuf:"varint,812,opt,name=hiddenShopReroll,proto3" json:"hiddenShopReroll,omitempty"`
	SatisfyProduceExamTriggerIds                  []string                                           `protobuf:"bytes,852,rep,name=satisfyProduceExamTriggerIds,proto3" json:"satisfyProduceExamTriggerIds,omitempty"`
	unknownFields                                 protoimpl.UnknownFields
	sizeCache                                     protoimpl.SizeCache
}

func (x *UserProduceProgress) Reset() {
	*x = UserProduceProgress{}
	mi := &file_ptransaction_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgress) ProtoMessage() {}

func (x *UserProduceProgress) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgress.ProtoReflect.Descriptor instead.
func (*UserProduceProgress) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{49}
}

func (x *UserProduceProgress) GetProduceGroupId() string {
	if x != nil {
		return x.ProduceGroupId
	}
	return ""
}

func (x *UserProduceProgress) GetProduceId() string {
	if x != nil {
		return x.ProduceId
	}
	return ""
}

func (x *UserProduceProgress) GetProducerLevel() int32 {
	if x != nil {
		return x.ProducerLevel
	}
	return 0
}

func (x *UserProduceProgress) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserProduceProgress) GetIdolCardId() string {
	if x != nil {
		return x.IdolCardId
	}
	return ""
}

func (x *UserProduceProgress) GetIdolCardSkinId() string {
	if x != nil {
		return x.IdolCardSkinId
	}
	return ""
}

func (x *UserProduceProgress) GetIdolCardLevelLimitRank() penum.IdolCardLevelLimitRank {
	if x != nil {
		return x.IdolCardLevelLimitRank
	}
	return penum.IdolCardLevelLimitRank(0)
}

func (x *UserProduceProgress) GetIdolCardPotentialRank() penum.IdolCardPotentialRank {
	if x != nil {
		return x.IdolCardPotentialRank
	}
	return penum.IdolCardPotentialRank(0)
}

func (x *UserProduceProgress) GetSatisfiedConditionSetIds() []string {
	if x != nil {
		return x.SatisfiedConditionSetIds
	}
	return nil
}

func (x *UserProduceProgress) GetProduceBoostItemIds() []string {
	if x != nil {
		return x.ProduceBoostItemIds
	}
	return nil
}

func (x *UserProduceProgress) GetTrueEndProduceTypes() []penum.ProduceType {
	if x != nil {
		return x.TrueEndProduceTypes
	}
	return nil
}

func (x *UserProduceProgress) GetHasForceLiveCommonIdolCard() bool {
	if x != nil {
		return x.HasForceLiveCommonIdolCard
	}
	return false
}

func (x *UserProduceProgress) GetDisableForceLiveCommon() bool {
	if x != nil {
		return x.DisableForceLiveCommon
	}
	return false
}

func (x *UserProduceProgress) GetProduceHighScoreId() string {
	if x != nil {
		return x.ProduceHighScoreId
	}
	return ""
}

func (x *UserProduceProgress) GetProduceCampaigns() []*pcommon.ProduceCampaign {
	if x != nil {
		return x.ProduceCampaigns
	}
	return nil
}

func (x *UserProduceProgress) GetStatus() penum.ProduceProgressStatus {
	if x != nil {
		return x.Status
	}
	return penum.ProduceProgressStatus(0)
}

func (x *UserProduceProgress) GetProduceScore() int32 {
	if x != nil {
		return x.ProduceScore
	}
	return 0
}

func (x *UserProduceProgress) GetIsFailedProduce() bool {
	if x != nil {
		return x.IsFailedProduce
	}
	return false
}

func (x *UserProduceProgress) GetStepNumber() int32 {
	if x != nil {
		return x.StepNumber
	}
	return 0
}

func (x *UserProduceProgress) GetStepType() penum.ProduceStepType {
	if x != nil {
		return x.StepType
	}
	return penum.ProduceStepType(0)
}

func (x *UserProduceProgress) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

func (x *UserProduceProgress) GetEffectStepType() penum.ProduceStepType {
	if x != nil {
		return x.EffectStepType
	}
	return penum.ProduceStepType(0)
}

func (x *UserProduceProgress) GetEffectStepId() string {
	if x != nil {
		return x.EffectStepId
	}
	return ""
}

func (x *UserProduceProgress) GetStepSelectNumber() int32 {
	if x != nil {
		return x.StepSelectNumber
	}
	return 0
}

func (x *UserProduceProgress) GetOriginStepType() penum.ProduceStepType {
	if x != nil {
		return x.OriginStepType
	}
	return penum.ProduceStepType(0)
}

func (x *UserProduceProgress) GetInProgressStep() bool {
	if x != nil {
		return x.InProgressStep
	}
	return false
}

func (x *UserProduceProgress) GetContinueCount() int32 {
	if x != nil {
		return x.ContinueCount
	}
	return 0
}

func (x *UserProduceProgress) GetProduceNavigationNormalNumber() int32 {
	if x != nil {
		return x.ProduceNavigationNormalNumber
	}
	return 0
}

func (x *UserProduceProgress) GetProduceNavigationAuditionNumber() int32 {
	if x != nil {
		return x.ProduceNavigationAuditionNumber
	}
	return 0
}

func (x *UserProduceProgress) GetProduceNavigationLoseNumber() int32 {
	if x != nil {
		return x.ProduceNavigationLoseNumber
	}
	return 0
}

func (x *UserProduceProgress) GetResultMemory() *pcommon.Memory {
	if x != nil {
		return x.ResultMemory
	}
	return nil
}

func (x *UserProduceProgress) GetLastProduceEventCharacterGrowthNumber() int32 {
	if x != nil {
		return x.LastProduceEventCharacterGrowthNumber
	}
	return 0
}

func (x *UserProduceProgress) GetIsChangeCostumeProduce() bool {
	if x != nil {
		return x.IsChangeCostumeProduce
	}
	return false
}

func (x *UserProduceProgress) GetIsChangeCostumeLive() bool {
	if x != nil {
		return x.IsChangeCostumeLive
	}
	return false
}

func (x *UserProduceProgress) GetIsChangeCostumeTraining() bool {
	if x != nil {
		return x.IsChangeCostumeTraining
	}
	return false
}

func (x *UserProduceProgress) GetRentalPublicUserId() string {
	if x != nil {
		return x.RentalPublicUserId
	}
	return ""
}

func (x *UserProduceProgress) GetVocal() int32 {
	if x != nil {
		return x.Vocal
	}
	return 0
}

func (x *UserProduceProgress) GetDance() int32 {
	if x != nil {
		return x.Dance
	}
	return 0
}

func (x *UserProduceProgress) GetVisual() int32 {
	if x != nil {
		return x.Visual
	}
	return 0
}

func (x *UserProduceProgress) GetVocalGrowthRatePermil() int32 {
	if x != nil {
		return x.VocalGrowthRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetDanceGrowthRatePermil() int32 {
	if x != nil {
		return x.DanceGrowthRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetVisualGrowthRatePermil() int32 {
	if x != nil {
		return x.VisualGrowthRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetVocalAdditionalLimit() int32 {
	if x != nil {
		return x.VocalAdditionalLimit
	}
	return 0
}

func (x *UserProduceProgress) GetDanceAdditionalLimit() int32 {
	if x != nil {
		return x.DanceAdditionalLimit
	}
	return 0
}

func (x *UserProduceProgress) GetVisualAdditionalLimit() int32 {
	if x != nil {
		return x.VisualAdditionalLimit
	}
	return 0
}

func (x *UserProduceProgress) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *UserProduceProgress) GetMaxStamina() int32 {
	if x != nil {
		return x.MaxStamina
	}
	return 0
}

func (x *UserProduceProgress) GetStaminaRecoverValueRatePermil() int32 {
	if x != nil {
		return x.StaminaRecoverValueRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetStaminaReduceValueRatePermil() int32 {
	if x != nil {
		return x.StaminaReduceValueRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetStaminaRecoverDisableTurn() int32 {
	if x != nil {
		return x.StaminaRecoverDisableTurn
	}
	return 0
}

func (x *UserProduceProgress) GetProducePoint() int32 {
	if x != nil {
		return x.ProducePoint
	}
	return 0
}

func (x *UserProduceProgress) GetProducePointAdditionValueRatePermil() int32 {
	if x != nil {
		return x.ProducePointAdditionValueRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetProducePointReduceValueRatePermil() int32 {
	if x != nil {
		return x.ProducePointReduceValueRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetProducePointGetDisableTurn() int32 {
	if x != nil {
		return x.ProducePointGetDisableTurn
	}
	return 0
}

func (x *UserProduceProgress) GetVoteCount() int32 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

func (x *UserProduceProgress) GetHighScoreGold() int32 {
	if x != nil {
		return x.HighScoreGold
	}
	return 0
}

func (x *UserProduceProgress) GetCharacterProduceSkills() []*UserProduceProgress_ProduceSkill {
	if x != nil {
		return x.CharacterProduceSkills
	}
	return nil
}

func (x *UserProduceProgress) GetDearnessStoryDearnessLevel() int32 {
	if x != nil {
		return x.DearnessStoryDearnessLevel
	}
	return 0
}

func (x *UserProduceProgress) GetIdolCardProduceSkills() []*UserProduceProgress_ProduceSkill {
	if x != nil {
		return x.IdolCardProduceSkills
	}
	return nil
}

func (x *UserProduceProgress) GetProduceCardRemainSelectRerollCount() int32 {
	if x != nil {
		return x.ProduceCardRemainSelectRerollCount
	}
	return 0
}

func (x *UserProduceProgress) GetHiddenProduceCardReroll() bool {
	if x != nil {
		return x.HiddenProduceCardReroll
	}
	return false
}

func (x *UserProduceProgress) GetExcludeProduceCardIds() []string {
	if x != nil {
		return x.ExcludeProduceCardIds
	}
	return nil
}

func (x *UserProduceProgress) GetProduceCardRemainExcludeCount() int32 {
	if x != nil {
		return x.ProduceCardRemainExcludeCount
	}
	return 0
}

func (x *UserProduceProgress) GetHiddenProduceCardExclude() bool {
	if x != nil {
		return x.HiddenProduceCardExclude
	}
	return false
}

func (x *UserProduceProgress) GetProduceItems() []*UserProduceProgress_ProduceItem {
	if x != nil {
		return x.ProduceItems
	}
	return nil
}

func (x *UserProduceProgress) GetProduceItemGetDisableTurn() int32 {
	if x != nil {
		return x.ProduceItemGetDisableTurn
	}
	return 0
}

func (x *UserProduceProgress) GetProduceDrinkIds() []string {
	if x != nil {
		return x.ProduceDrinkIds
	}
	return nil
}

func (x *UserProduceProgress) GetProduceDrinkGetDisableTurn() int32 {
	if x != nil {
		return x.ProduceDrinkGetDisableTurn
	}
	return 0
}

func (x *UserProduceProgress) GetAuditionEffectParameterBonusPermil() int32 {
	if x != nil {
		return x.AuditionEffectParameterBonusPermil
	}
	return 0
}

func (x *UserProduceProgress) GetAuditionNpcEnhancePermil() int32 {
	if x != nil {
		return x.AuditionNpcEnhancePermil
	}
	return 0
}

func (x *UserProduceProgress) GetEventSchoolStaminaPermil() int32 {
	if x != nil {
		return x.EventSchoolStaminaPermil
	}
	return 0
}

func (x *UserProduceProgress) GetEventActivityProducePointPermil() int32 {
	if x != nil {
		return x.EventActivityProducePointPermil
	}
	return 0
}

func (x *UserProduceProgress) GetEventBusinessVoteCountPermil() int32 {
	if x != nil {
		return x.EventBusinessVoteCountPermil
	}
	return 0
}

func (x *UserProduceProgress) GetExamSeedValue() int32 {
	if x != nil {
		return x.ExamSeedValue
	}
	return 0
}

func (x *UserProduceProgress) GetProduceExamGimmickEffectGroupId() string {
	if x != nil {
		return x.ProduceExamGimmickEffectGroupId
	}
	return ""
}

func (x *UserProduceProgress) GetExamStatusEnchants() []*UserProduceProgress_ExamStatusEnchant {
	if x != nil {
		return x.ExamStatusEnchants
	}
	return nil
}

func (x *UserProduceProgress) GetLessonVocalSpChangeRatePermil() int32 {
	if x != nil {
		return x.LessonVocalSpChangeRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetLessonDanceSpChangeRatePermil() int32 {
	if x != nil {
		return x.LessonDanceSpChangeRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetLessonVisualSpChangeRatePermil() int32 {
	if x != nil {
		return x.LessonVisualSpChangeRatePermil
	}
	return 0
}

func (x *UserProduceProgress) GetExamResultType() penum.ProduceExamResultType {
	if x != nil {
		return x.ExamResultType
	}
	return penum.ProduceExamResultType(0)
}

func (x *UserProduceProgress) GetLessonGrowthResult() *pcommon.ProduceLessonGrowthResult {
	if x != nil {
		return x.LessonGrowthResult
	}
	return nil
}

func (x *UserProduceProgress) GetExamEndResult() *pcommon.ProduceExamEndResult {
	if x != nil {
		return x.ExamEndResult
	}
	return nil
}

func (x *UserProduceProgress) GetLessonLimitUpScore() int32 {
	if x != nil {
		return x.LessonLimitUpScore
	}
	return 0
}

func (x *UserProduceProgress) GetExamExtraTurn() int32 {
	if x != nil {
		return x.ExamExtraTurn
	}
	return 0
}

func (x *UserProduceProgress) GetSelfLessonTypeStaminaPermils() []*UserProduceProgress_SelfLessonTypeStaminaPermil {
	if x != nil {
		return x.SelfLessonTypeStaminaPermils
	}
	return nil
}

func (x *UserProduceProgress) GetLiveType() penum.ProduceLiveType {
	if x != nil {
		return x.LiveType
	}
	return penum.ProduceLiveType(0)
}

func (x *UserProduceProgress) GetLessonPresentAdditionalProduceCardRewardCount() int32 {
	if x != nil {
		return x.LessonPresentAdditionalProduceCardRewardCount
	}
	return 0
}

func (x *UserProduceProgress) GetCustomizeAdditionalProduceCardCount() int32 {
	if x != nil {
		return x.CustomizeAdditionalProduceCardCount
	}
	return 0
}

func (x *UserProduceProgress) GetCustomizeDiscountPermils() []int32 {
	if x != nil {
		return x.CustomizeDiscountPermils
	}
	return nil
}

func (x *UserProduceProgress) GetShopProduceCardUpgradePrice() int32 {
	if x != nil {
		return x.ShopProduceCardUpgradePrice
	}
	return 0
}

func (x *UserProduceProgress) GetShopProduceCardDeletePrice() int32 {
	if x != nil {
		return x.ShopProduceCardDeletePrice
	}
	return 0
}

func (x *UserProduceProgress) GetShopDiscountPermils() []int32 {
	if x != nil {
		return x.ShopDiscountPermils
	}
	return nil
}

func (x *UserProduceProgress) GetShopProduceCardUpgradeDiscountPermils() []int32 {
	if x != nil {
		return x.ShopProduceCardUpgradeDiscountPermils
	}
	return nil
}

func (x *UserProduceProgress) GetShopProduceCardDeleteDiscountPermils() []int32 {
	if x != nil {
		return x.ShopProduceCardDeleteDiscountPermils
	}
	return nil
}

func (x *UserProduceProgress) GetShopProduceCardDiscounts() []*UserProduceProgress_ShopProduceCardDiscount {
	if x != nil {
		return x.ShopProduceCardDiscounts
	}
	return nil
}

func (x *UserProduceProgress) GetShopProduceDrinkDiscountPermils() []int32 {
	if x != nil {
		return x.ShopProduceDrinkDiscountPermils
	}
	return nil
}

func (x *UserProduceProgress) GetShopRemainRerollCount() int32 {
	if x != nil {
		return x.ShopRemainRerollCount
	}
	return 0
}

func (x *UserProduceProgress) GetHiddenShopReroll() bool {
	if x != nil {
		return x.HiddenShopReroll
	}
	return false
}

func (x *UserProduceProgress) GetSatisfyProduceExamTriggerIds() []string {
	if x != nil {
		return x.SatisfyProduceExamTriggerIds
	}
	return nil
}

type UserProduceProgressAudition struct {
	state                 protoimpl.MessageState                  `protogen:"open.v1"`
	Status                penum.ProduceProgressAuditionStatusType `protobuf:"varint,2,opt,name=status,proto3,enum=penum.ProduceProgressAuditionStatusType" json:"status,omitempty"`
	VocalPermil           int32                                   `protobuf:"varint,3,opt,name=vocalPermil,proto3" json:"vocalPermil,omitempty"`
	DancePermil           int32                                   `protobuf:"varint,4,opt,name=dancePermil,proto3" json:"dancePermil,omitempty"`
	VisualPermil          int32                                   `protobuf:"varint,5,opt,name=visualPermil,proto3" json:"visualPermil,omitempty"`
	VoteBonusPermil       int32                                   `protobuf:"varint,6,opt,name=voteBonusPermil,proto3" json:"voteBonusPermil,omitempty"`
	StepSelectNumber      int32                                   `protobuf:"varint,99,opt,name=stepSelectNumber,proto3" json:"stepSelectNumber,omitempty"`
	Rank                  int32                                   `protobuf:"varint,100,opt,name=rank,proto3" json:"rank,omitempty"`
	Score                 int32                                   `protobuf:"varint,101,opt,name=score,proto3" json:"score,omitempty"`
	Stamina               int32                                   `protobuf:"varint,102,opt,name=stamina,proto3" json:"stamina,omitempty"`
	ProduceDrinkIds       []string                                `protobuf:"bytes,104,rep,name=produceDrinkIds,proto3" json:"produceDrinkIds,omitempty"`
	ProduceItemIds        []string                                `protobuf:"bytes,105,rep,name=produceItemIds,proto3" json:"produceItemIds,omitempty"`
	ProduceItemFireCounts []int32                                 `protobuf:"varint,106,rep,packed,name=produceItemFireCounts,proto3" json:"produceItemFireCounts,omitempty"`
	ExamSkipCount         int32                                   `protobuf:"varint,107,opt,name=examSkipCount,proto3" json:"examSkipCount,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UserProduceProgressAudition) Reset() {
	*x = UserProduceProgressAudition{}
	mi := &file_ptransaction_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressAudition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressAudition) ProtoMessage() {}

func (x *UserProduceProgressAudition) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressAudition.ProtoReflect.Descriptor instead.
func (*UserProduceProgressAudition) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{50}
}

func (x *UserProduceProgressAudition) GetStatus() penum.ProduceProgressAuditionStatusType {
	if x != nil {
		return x.Status
	}
	return penum.ProduceProgressAuditionStatusType(0)
}

func (x *UserProduceProgressAudition) GetVocalPermil() int32 {
	if x != nil {
		return x.VocalPermil
	}
	return 0
}

func (x *UserProduceProgressAudition) GetDancePermil() int32 {
	if x != nil {
		return x.DancePermil
	}
	return 0
}

func (x *UserProduceProgressAudition) GetVisualPermil() int32 {
	if x != nil {
		return x.VisualPermil
	}
	return 0
}

func (x *UserProduceProgressAudition) GetVoteBonusPermil() int32 {
	if x != nil {
		return x.VoteBonusPermil
	}
	return 0
}

func (x *UserProduceProgressAudition) GetStepSelectNumber() int32 {
	if x != nil {
		return x.StepSelectNumber
	}
	return 0
}

func (x *UserProduceProgressAudition) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UserProduceProgressAudition) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserProduceProgressAudition) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *UserProduceProgressAudition) GetProduceDrinkIds() []string {
	if x != nil {
		return x.ProduceDrinkIds
	}
	return nil
}

func (x *UserProduceProgressAudition) GetProduceItemIds() []string {
	if x != nil {
		return x.ProduceItemIds
	}
	return nil
}

func (x *UserProduceProgressAudition) GetProduceItemFireCounts() []int32 {
	if x != nil {
		return x.ProduceItemFireCounts
	}
	return nil
}

func (x *UserProduceProgressAudition) GetExamSkipCount() int32 {
	if x != nil {
		return x.ExamSkipCount
	}
	return 0
}

type UserProduceProgressBusiness struct {
	state                             protoimpl.MessageState        `protogen:"open.v1"`
	BusinessType                      penum.ProduceStepBusinessType `protobuf:"varint,2,opt,name=businessType,proto3,enum=penum.ProduceStepBusinessType" json:"businessType,omitempty"`
	Number                            int32                         `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Name                              string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DestinationNumber                 int32                         `protobuf:"varint,5,opt,name=destinationNumber,proto3" json:"destinationNumber,omitempty"`
	ProducePoint                      int32                         `protobuf:"varint,6,opt,name=producePoint,proto3" json:"producePoint,omitempty"`
	Stamina                           int32                         `protobuf:"varint,7,opt,name=stamina,proto3" json:"stamina,omitempty"`
	ExcellentPermil                   int32                         `protobuf:"varint,8,opt,name=excellentPermil,proto3" json:"excellentPermil,omitempty"`
	ProduceStepEventDetailId          string                        `protobuf:"bytes,9,opt,name=produceStepEventDetailId,proto3" json:"produceStepEventDetailId,omitempty"`
	ExcellentProduceStepEventDetailId string                        `protobuf:"bytes,10,opt,name=excellentProduceStepEventDetailId,proto3" json:"excellentProduceStepEventDetailId,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *UserProduceProgressBusiness) Reset() {
	*x = UserProduceProgressBusiness{}
	mi := &file_ptransaction_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressBusiness) ProtoMessage() {}

func (x *UserProduceProgressBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressBusiness.ProtoReflect.Descriptor instead.
func (*UserProduceProgressBusiness) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{51}
}

func (x *UserProduceProgressBusiness) GetBusinessType() penum.ProduceStepBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return penum.ProduceStepBusinessType(0)
}

func (x *UserProduceProgressBusiness) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceProgressBusiness) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserProduceProgressBusiness) GetDestinationNumber() int32 {
	if x != nil {
		return x.DestinationNumber
	}
	return 0
}

func (x *UserProduceProgressBusiness) GetProducePoint() int32 {
	if x != nil {
		return x.ProducePoint
	}
	return 0
}

func (x *UserProduceProgressBusiness) GetStamina() int32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *UserProduceProgressBusiness) GetExcellentPermil() int32 {
	if x != nil {
		return x.ExcellentPermil
	}
	return 0
}

func (x *UserProduceProgressBusiness) GetProduceStepEventDetailId() string {
	if x != nil {
		return x.ProduceStepEventDetailId
	}
	return ""
}

func (x *UserProduceProgressBusiness) GetExcellentProduceStepEventDetailId() string {
	if x != nil {
		return x.ExcellentProduceStepEventDetailId
	}
	return ""
}

type UserProduceProgressEffect struct {
	state                   protoimpl.MessageState              `protogen:"open.v1"`
	Number                  int32                               `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Numbers                 []int32                             `protobuf:"varint,3,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
	Type                    penum.ProduceEffectType             `protobuf:"varint,4,opt,name=type,proto3,enum=penum.ProduceEffectType" json:"type,omitempty"`
	Value                   int32                               `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Rewards                 []*UserProduceProgressEffect_Reward `protobuf:"bytes,10,rep,name=rewards,proto3" json:"rewards,omitempty"`
	PickRangeType           penum.ProducePickRangeType          `protobuf:"varint,13,opt,name=pickRangeType,proto3,enum=penum.ProducePickRangeType" json:"pickRangeType,omitempty"`
	PickCountMin            int32                               `protobuf:"varint,14,opt,name=pickCountMin,proto3" json:"pickCountMin,omitempty"`
	PickCountMax            int32                               `protobuf:"varint,15,opt,name=pickCountMax,proto3" json:"pickCountMax,omitempty"`
	PickIndexes             []int32                             `protobuf:"varint,17,rep,packed,name=pickIndexes,proto3" json:"pickIndexes,omitempty"`
	ActivatedProduceItemIds []string                            `protobuf:"bytes,18,rep,name=activatedProduceItemIds,proto3" json:"activatedProduceItemIds,omitempty"`
	IsNext                  bool                                `protobuf:"varint,26,opt,name=isNext,proto3" json:"isNext,omitempty"`
	ProduceEffectId         string                              `protobuf:"bytes,27,opt,name=produceEffectId,proto3" json:"produceEffectId,omitempty"`
	OriginType              penum.ProduceTriggerOriginType      `protobuf:"varint,28,opt,name=originType,proto3,enum=penum.ProduceTriggerOriginType" json:"originType,omitempty"`
	OriginId                string                              `protobuf:"bytes,29,opt,name=originId,proto3" json:"originId,omitempty"`
	OriginLevel             int32                               `protobuf:"varint,30,opt,name=originLevel,proto3" json:"originLevel,omitempty"`
	OriginOwnerId           string                              `protobuf:"bytes,31,opt,name=originOwnerId,proto3" json:"originOwnerId,omitempty"`
	OriginProduceTriggerIds []string                            `protobuf:"bytes,32,rep,name=originProduceTriggerIds,proto3" json:"originProduceTriggerIds,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UserProduceProgressEffect) Reset() {
	*x = UserProduceProgressEffect{}
	mi := &file_ptransaction_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressEffect) ProtoMessage() {}

func (x *UserProduceProgressEffect) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressEffect.ProtoReflect.Descriptor instead.
func (*UserProduceProgressEffect) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{52}
}

func (x *UserProduceProgressEffect) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceProgressEffect) GetNumbers() []int32 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *UserProduceProgressEffect) GetType() penum.ProduceEffectType {
	if x != nil {
		return x.Type
	}
	return penum.ProduceEffectType(0)
}

func (x *UserProduceProgressEffect) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserProduceProgressEffect) GetRewards() []*UserProduceProgressEffect_Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *UserProduceProgressEffect) GetPickRangeType() penum.ProducePickRangeType {
	if x != nil {
		return x.PickRangeType
	}
	return penum.ProducePickRangeType(0)
}

func (x *UserProduceProgressEffect) GetPickCountMin() int32 {
	if x != nil {
		return x.PickCountMin
	}
	return 0
}

func (x *UserProduceProgressEffect) GetPickCountMax() int32 {
	if x != nil {
		return x.PickCountMax
	}
	return 0
}

func (x *UserProduceProgressEffect) GetPickIndexes() []int32 {
	if x != nil {
		return x.PickIndexes
	}
	return nil
}

func (x *UserProduceProgressEffect) GetActivatedProduceItemIds() []string {
	if x != nil {
		return x.ActivatedProduceItemIds
	}
	return nil
}

func (x *UserProduceProgressEffect) GetIsNext() bool {
	if x != nil {
		return x.IsNext
	}
	return false
}

func (x *UserProduceProgressEffect) GetProduceEffectId() string {
	if x != nil {
		return x.ProduceEffectId
	}
	return ""
}

func (x *UserProduceProgressEffect) GetOriginType() penum.ProduceTriggerOriginType {
	if x != nil {
		return x.OriginType
	}
	return penum.ProduceTriggerOriginType(0)
}

func (x *UserProduceProgressEffect) GetOriginId() string {
	if x != nil {
		return x.OriginId
	}
	return ""
}

func (x *UserProduceProgressEffect) GetOriginLevel() int32 {
	if x != nil {
		return x.OriginLevel
	}
	return 0
}

func (x *UserProduceProgressEffect) GetOriginOwnerId() string {
	if x != nil {
		return x.OriginOwnerId
	}
	return ""
}

func (x *UserProduceProgressEffect) GetOriginProduceTriggerIds() []string {
	if x != nil {
		return x.OriginProduceTriggerIds
	}
	return nil
}

type UserProduceProgressEvent struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ProduceStepEventDetailId string                 `protobuf:"bytes,2,opt,name=produceStepEventDetailId,proto3" json:"produceStepEventDetailId,omitempty"`
	Number                   int32                  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	SuggestionIndex          int64                  `protobuf:"varint,4,opt,name=suggestionIndex,proto3" json:"suggestionIndex,omitempty"`
	Success                  bool                   `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UserProduceProgressEvent) Reset() {
	*x = UserProduceProgressEvent{}
	mi := &file_ptransaction_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressEvent) ProtoMessage() {}

func (x *UserProduceProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressEvent.ProtoReflect.Descriptor instead.
func (*UserProduceProgressEvent) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{53}
}

func (x *UserProduceProgressEvent) GetProduceStepEventDetailId() string {
	if x != nil {
		return x.ProduceStepEventDetailId
	}
	return ""
}

func (x *UserProduceProgressEvent) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceProgressEvent) GetSuggestionIndex() int64 {
	if x != nil {
		return x.SuggestionIndex
	}
	return 0
}

func (x *UserProduceProgressEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UserProduceProgressMemory struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Number        int32                                      `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	UserMemoryId  string                                     `protobuf:"bytes,3,opt,name=userMemoryId,proto3" json:"userMemoryId,omitempty"`
	IsRental      bool                                       `protobuf:"varint,5,opt,name=isRental,proto3" json:"isRental,omitempty"`
	Abilities     []*UserProduceProgressMemory_MemoryAbility `protobuf:"bytes,28,rep,name=abilities,proto3" json:"abilities,omitempty"`
	Memory        *pcommon.Memory                            `protobuf:"bytes,100,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgressMemory) Reset() {
	*x = UserProduceProgressMemory{}
	mi := &file_ptransaction_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressMemory) ProtoMessage() {}

func (x *UserProduceProgressMemory) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressMemory.ProtoReflect.Descriptor instead.
func (*UserProduceProgressMemory) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{54}
}

func (x *UserProduceProgressMemory) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceProgressMemory) GetUserMemoryId() string {
	if x != nil {
		return x.UserMemoryId
	}
	return ""
}

func (x *UserProduceProgressMemory) GetIsRental() bool {
	if x != nil {
		return x.IsRental
	}
	return false
}

func (x *UserProduceProgressMemory) GetAbilities() []*UserProduceProgressMemory_MemoryAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *UserProduceProgressMemory) GetMemory() *pcommon.Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

type UserProduceProgressPresent struct {
	state          protoimpl.MessageState               `protogen:"open.v1"`
	PositionNumber int32                                `protobuf:"varint,2,opt,name=positionNumber,proto3" json:"positionNumber,omitempty"`
	Received       bool                                 `protobuf:"varint,3,opt,name=received,proto3" json:"received,omitempty"`
	DisplayType    penum.ProduceDisplayType             `protobuf:"varint,4,opt,name=displayType,proto3,enum=penum.ProduceDisplayType" json:"displayType,omitempty"`
	RewardCount    int32                                `protobuf:"varint,5,opt,name=rewardCount,proto3" json:"rewardCount,omitempty"`
	PickCount      int32                                `protobuf:"varint,6,opt,name=pickCount,proto3" json:"pickCount,omitempty"`
	Rewards        []*UserProduceProgressPresent_Reward `protobuf:"bytes,11,rep,name=rewards,proto3" json:"rewards,omitempty"`
	RewardIndexes  []int32                              `protobuf:"varint,12,rep,packed,name=rewardIndexes,proto3" json:"rewardIndexes,omitempty"`
	IsVoteBonus    bool                                 `protobuf:"varint,14,opt,name=isVoteBonus,proto3" json:"isVoteBonus,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserProduceProgressPresent) Reset() {
	*x = UserProduceProgressPresent{}
	mi := &file_ptransaction_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressPresent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressPresent) ProtoMessage() {}

func (x *UserProduceProgressPresent) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressPresent.ProtoReflect.Descriptor instead.
func (*UserProduceProgressPresent) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{55}
}

func (x *UserProduceProgressPresent) GetPositionNumber() int32 {
	if x != nil {
		return x.PositionNumber
	}
	return 0
}

func (x *UserProduceProgressPresent) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

func (x *UserProduceProgressPresent) GetDisplayType() penum.ProduceDisplayType {
	if x != nil {
		return x.DisplayType
	}
	return penum.ProduceDisplayType(0)
}

func (x *UserProduceProgressPresent) GetRewardCount() int32 {
	if x != nil {
		return x.RewardCount
	}
	return 0
}

func (x *UserProduceProgressPresent) GetPickCount() int32 {
	if x != nil {
		return x.PickCount
	}
	return 0
}

func (x *UserProduceProgressPresent) GetRewards() []*UserProduceProgressPresent_Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *UserProduceProgressPresent) GetRewardIndexes() []int32 {
	if x != nil {
		return x.RewardIndexes
	}
	return nil
}

func (x *UserProduceProgressPresent) GetIsVoteBonus() bool {
	if x != nil {
		return x.IsVoteBonus
	}
	return false
}

type UserProduceProgressProduceCard struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Number        int32                           `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	ProduceCardId string                          `protobuf:"bytes,3,opt,name=produceCardId,proto3" json:"produceCardId,omitempty"`
	UpgradeCount  int32                           `protobuf:"varint,4,opt,name=upgradeCount,proto3" json:"upgradeCount,omitempty"`
	Deleted       bool                            `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	OriginType    penum.ProduceResourceOriginType `protobuf:"varint,7,opt,name=originType,proto3,enum=penum.ProduceResourceOriginType" json:"originType,omitempty"`
	Customizes    []*pcommon.ProduceCardCustomize `protobuf:"bytes,10,rep,name=customizes,proto3" json:"customizes,omitempty"`
	Customizing   bool                            `protobuf:"varint,11,opt,name=customizing,proto3" json:"customizing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgressProduceCard) Reset() {
	*x = UserProduceProgressProduceCard{}
	mi := &file_ptransaction_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressProduceCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressProduceCard) ProtoMessage() {}

func (x *UserProduceProgressProduceCard) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressProduceCard.ProtoReflect.Descriptor instead.
func (*UserProduceProgressProduceCard) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{56}
}

func (x *UserProduceProgressProduceCard) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceProgressProduceCard) GetProduceCardId() string {
	if x != nil {
		return x.ProduceCardId
	}
	return ""
}

func (x *UserProduceProgressProduceCard) GetUpgradeCount() int32 {
	if x != nil {
		return x.UpgradeCount
	}
	return 0
}

func (x *UserProduceProgressProduceCard) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *UserProduceProgressProduceCard) GetOriginType() penum.ProduceResourceOriginType {
	if x != nil {
		return x.OriginType
	}
	return penum.ProduceResourceOriginType(0)
}

func (x *UserProduceProgressProduceCard) GetCustomizes() []*pcommon.ProduceCardCustomize {
	if x != nil {
		return x.Customizes
	}
	return nil
}

func (x *UserProduceProgressProduceCard) GetCustomizing() bool {
	if x != nil {
		return x.Customizing
	}
	return false
}

type UserProduceProgressSchedule struct {
	state                           protoimpl.MessageState      `protogen:"open.v1"`
	StepNumber                      int32                       `protobuf:"varint,2,opt,name=stepNumber,proto3" json:"stepNumber,omitempty"`
	AddStepLevel                    int32                       `protobuf:"varint,3,opt,name=addStepLevel,proto3" json:"addStepLevel,omitempty"`
	VocalProduceStepSelfLessonId    string                      `protobuf:"bytes,30,opt,name=vocalProduceStepSelfLessonId,proto3" json:"vocalProduceStepSelfLessonId,omitempty"`
	VocalSpProduceStepSelfLessonId  string                      `protobuf:"bytes,31,opt,name=vocalSpProduceStepSelfLessonId,proto3" json:"vocalSpProduceStepSelfLessonId,omitempty"`
	DanceProduceStepSelfLessonId    string                      `protobuf:"bytes,33,opt,name=danceProduceStepSelfLessonId,proto3" json:"danceProduceStepSelfLessonId,omitempty"`
	DanceSpProduceStepSelfLessonId  string                      `protobuf:"bytes,34,opt,name=danceSpProduceStepSelfLessonId,proto3" json:"danceSpProduceStepSelfLessonId,omitempty"`
	VisualProduceStepSelfLessonId   string                      `protobuf:"bytes,36,opt,name=visualProduceStepSelfLessonId,proto3" json:"visualProduceStepSelfLessonId,omitempty"`
	VisualSpProduceStepSelfLessonId string                      `protobuf:"bytes,37,opt,name=visualSpProduceStepSelfLessonId,proto3" json:"visualSpProduceStepSelfLessonId,omitempty"`
	StepTypes                       []penum.ProduceStepType     `protobuf:"varint,24,rep,packed,name=stepTypes,proto3,enum=penum.ProduceStepType" json:"stepTypes,omitempty"`
	SelectedStepType                penum.ProduceStepType       `protobuf:"varint,25,opt,name=selectedStepType,proto3,enum=penum.ProduceStepType" json:"selectedStepType,omitempty"`
	ExamResultType                  penum.ProduceExamResultType `protobuf:"varint,26,opt,name=examResultType,proto3,enum=penum.ProduceExamResultType" json:"examResultType,omitempty"`
	RefreshStamina                  int32                       `protobuf:"varint,27,opt,name=refreshStamina,proto3" json:"refreshStamina,omitempty"`
	AuditionRank                    int32                       `protobuf:"varint,28,opt,name=auditionRank,proto3" json:"auditionRank,omitempty"`
	StepSelectNumber                int32                       `protobuf:"varint,41,opt,name=stepSelectNumber,proto3" json:"stepSelectNumber,omitempty"`
	MaxAuditionStepSelectNumber     int32                       `protobuf:"varint,42,opt,name=maxAuditionStepSelectNumber,proto3" json:"maxAuditionStepSelectNumber,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UserProduceProgressSchedule) Reset() {
	*x = UserProduceProgressSchedule{}
	mi := &file_ptransaction_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressSchedule) ProtoMessage() {}

func (x *UserProduceProgressSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressSchedule.ProtoReflect.Descriptor instead.
func (*UserProduceProgressSchedule) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{57}
}

func (x *UserProduceProgressSchedule) GetStepNumber() int32 {
	if x != nil {
		return x.StepNumber
	}
	return 0
}

func (x *UserProduceProgressSchedule) GetAddStepLevel() int32 {
	if x != nil {
		return x.AddStepLevel
	}
	return 0
}

func (x *UserProduceProgressSchedule) GetVocalProduceStepSelfLessonId() string {
	if x != nil {
		return x.VocalProduceStepSelfLessonId
	}
	return ""
}

func (x *UserProduceProgressSchedule) GetVocalSpProduceStepSelfLessonId() string {
	if x != nil {
		return x.VocalSpProduceStepSelfLessonId
	}
	return ""
}

func (x *UserProduceProgressSchedule) GetDanceProduceStepSelfLessonId() string {
	if x != nil {
		return x.DanceProduceStepSelfLessonId
	}
	return ""
}

func (x *UserProduceProgressSchedule) GetDanceSpProduceStepSelfLessonId() string {
	if x != nil {
		return x.DanceSpProduceStepSelfLessonId
	}
	return ""
}

func (x *UserProduceProgressSchedule) GetVisualProduceStepSelfLessonId() string {
	if x != nil {
		return x.VisualProduceStepSelfLessonId
	}
	return ""
}

func (x *UserProduceProgressSchedule) GetVisualSpProduceStepSelfLessonId() string {
	if x != nil {
		return x.VisualSpProduceStepSelfLessonId
	}
	return ""
}

func (x *UserProduceProgressSchedule) GetStepTypes() []penum.ProduceStepType {
	if x != nil {
		return x.StepTypes
	}
	return nil
}

func (x *UserProduceProgressSchedule) GetSelectedStepType() penum.ProduceStepType {
	if x != nil {
		return x.SelectedStepType
	}
	return penum.ProduceStepType(0)
}

func (x *UserProduceProgressSchedule) GetExamResultType() penum.ProduceExamResultType {
	if x != nil {
		return x.ExamResultType
	}
	return penum.ProduceExamResultType(0)
}

func (x *UserProduceProgressSchedule) GetRefreshStamina() int32 {
	if x != nil {
		return x.RefreshStamina
	}
	return 0
}

func (x *UserProduceProgressSchedule) GetAuditionRank() int32 {
	if x != nil {
		return x.AuditionRank
	}
	return 0
}

func (x *UserProduceProgressSchedule) GetStepSelectNumber() int32 {
	if x != nil {
		return x.StepSelectNumber
	}
	return 0
}

func (x *UserProduceProgressSchedule) GetMaxAuditionStepSelectNumber() int32 {
	if x != nil {
		return x.MaxAuditionStepSelectNumber
	}
	return 0
}

type UserProduceProgressShop struct {
	state                         protoimpl.MessageState    `protogen:"open.v1"`
	PositionNumber                int32                     `protobuf:"varint,2,opt,name=positionNumber,proto3" json:"positionNumber,omitempty"`
	Purchased                     bool                      `protobuf:"varint,3,opt,name=purchased,proto3" json:"purchased,omitempty"`
	ResourceType                  penum.ProduceResourceType `protobuf:"varint,4,opt,name=resourceType,proto3,enum=penum.ProduceResourceType" json:"resourceType,omitempty"`
	ResourceId                    string                    `protobuf:"bytes,5,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	UpgradeCount                  int32                     `protobuf:"varint,6,opt,name=upgradeCount,proto3" json:"upgradeCount,omitempty"`
	Price                         int32                     `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	DiscountPermil                int32                     `protobuf:"varint,8,opt,name=discountPermil,proto3" json:"discountPermil,omitempty"`
	EffectDiscountPermils         []int32                   `protobuf:"varint,9,rep,packed,name=effectDiscountPermils,proto3" json:"effectDiscountPermils,omitempty"`
	EffectResourceDiscountPermils []int32                   `protobuf:"varint,10,rep,packed,name=effectResourceDiscountPermils,proto3" json:"effectResourceDiscountPermils,omitempty"`
	NextPrice                     int32                     `protobuf:"varint,11,opt,name=nextPrice,proto3" json:"nextPrice,omitempty"`
	Lock                          bool                      `protobuf:"varint,12,opt,name=lock,proto3" json:"lock,omitempty"`
	HighScoreReward               bool                      `protobuf:"varint,13,opt,name=highScoreReward,proto3" json:"highScoreReward,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *UserProduceProgressShop) Reset() {
	*x = UserProduceProgressShop{}
	mi := &file_ptransaction_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressShop) ProtoMessage() {}

func (x *UserProduceProgressShop) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressShop.ProtoReflect.Descriptor instead.
func (*UserProduceProgressShop) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{58}
}

func (x *UserProduceProgressShop) GetPositionNumber() int32 {
	if x != nil {
		return x.PositionNumber
	}
	return 0
}

func (x *UserProduceProgressShop) GetPurchased() bool {
	if x != nil {
		return x.Purchased
	}
	return false
}

func (x *UserProduceProgressShop) GetResourceType() penum.ProduceResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ProduceResourceType(0)
}

func (x *UserProduceProgressShop) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *UserProduceProgressShop) GetUpgradeCount() int32 {
	if x != nil {
		return x.UpgradeCount
	}
	return 0
}

func (x *UserProduceProgressShop) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UserProduceProgressShop) GetDiscountPermil() int32 {
	if x != nil {
		return x.DiscountPermil
	}
	return 0
}

func (x *UserProduceProgressShop) GetEffectDiscountPermils() []int32 {
	if x != nil {
		return x.EffectDiscountPermils
	}
	return nil
}

func (x *UserProduceProgressShop) GetEffectResourceDiscountPermils() []int32 {
	if x != nil {
		return x.EffectResourceDiscountPermils
	}
	return nil
}

func (x *UserProduceProgressShop) GetNextPrice() int32 {
	if x != nil {
		return x.NextPrice
	}
	return 0
}

func (x *UserProduceProgressShop) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

func (x *UserProduceProgressShop) GetHighScoreReward() bool {
	if x != nil {
		return x.HighScoreReward
	}
	return false
}

type UserProduceProgressSupportCard struct {
	state                                  protoimpl.MessageState                         `protogen:"open.v1"`
	Number                                 int32                                          `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	IsRental                               bool                                           `protobuf:"varint,4,opt,name=isRental,proto3" json:"isRental,omitempty"`
	SupportCardId                          string                                         `protobuf:"bytes,5,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	Level                                  int32                                          `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	LevelLimitRank                         penum.SupportCardLevelLimitRank                `protobuf:"varint,7,opt,name=levelLimitRank,proto3,enum=penum.SupportCardLevelLimitRank" json:"levelLimitRank,omitempty"`
	ProduceSkillIds                        []string                                       `protobuf:"bytes,8,rep,name=produceSkillIds,proto3" json:"produceSkillIds,omitempty"`
	ProduceSkillLevels                     []int64                                        `protobuf:"varint,9,rep,packed,name=produceSkillLevels,proto3" json:"produceSkillLevels,omitempty"`
	ProduceSkillTriggerCounts              []int64                                        `protobuf:"varint,10,rep,packed,name=produceSkillTriggerCounts,proto3" json:"produceSkillTriggerCounts,omitempty"`
	ProduceSkills                          []*UserProduceProgressSupportCard_ProduceSkill `protobuf:"bytes,11,rep,name=produceSkills,proto3" json:"produceSkills,omitempty"`
	EventStaminaRecoverUpPermil            int32                                          `protobuf:"varint,12,opt,name=eventStaminaRecoverUpPermil,proto3" json:"eventStaminaRecoverUpPermil,omitempty"`
	EventProducePointAdditionValueUpPermil int32                                          `protobuf:"varint,13,opt,name=eventProducePointAdditionValueUpPermil,proto3" json:"eventProducePointAdditionValueUpPermil,omitempty"`
	EventParameterAdditionValueUpPermil    int32                                          `protobuf:"varint,14,opt,name=eventParameterAdditionValueUpPermil,proto3" json:"eventParameterAdditionValueUpPermil,omitempty"`
	EventProbabilityUpPermyriad            int32                                          `protobuf:"varint,15,opt,name=eventProbabilityUpPermyriad,proto3" json:"eventProbabilityUpPermyriad,omitempty"`
	ProduceCardUpgradePermil               int32                                          `protobuf:"varint,16,opt,name=produceCardUpgradePermil,proto3" json:"produceCardUpgradePermil,omitempty"`
	EventProduceCardUpgrade                bool                                           `protobuf:"varint,18,opt,name=eventProduceCardUpgrade,proto3" json:"eventProduceCardUpgrade,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *UserProduceProgressSupportCard) Reset() {
	*x = UserProduceProgressSupportCard{}
	mi := &file_ptransaction_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressSupportCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressSupportCard) ProtoMessage() {}

func (x *UserProduceProgressSupportCard) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressSupportCard.ProtoReflect.Descriptor instead.
func (*UserProduceProgressSupportCard) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{59}
}

func (x *UserProduceProgressSupportCard) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceProgressSupportCard) GetIsRental() bool {
	if x != nil {
		return x.IsRental
	}
	return false
}

func (x *UserProduceProgressSupportCard) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *UserProduceProgressSupportCard) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserProduceProgressSupportCard) GetLevelLimitRank() penum.SupportCardLevelLimitRank {
	if x != nil {
		return x.LevelLimitRank
	}
	return penum.SupportCardLevelLimitRank(0)
}

func (x *UserProduceProgressSupportCard) GetProduceSkillIds() []string {
	if x != nil {
		return x.ProduceSkillIds
	}
	return nil
}

func (x *UserProduceProgressSupportCard) GetProduceSkillLevels() []int64 {
	if x != nil {
		return x.ProduceSkillLevels
	}
	return nil
}

func (x *UserProduceProgressSupportCard) GetProduceSkillTriggerCounts() []int64 {
	if x != nil {
		return x.ProduceSkillTriggerCounts
	}
	return nil
}

func (x *UserProduceProgressSupportCard) GetProduceSkills() []*UserProduceProgressSupportCard_ProduceSkill {
	if x != nil {
		return x.ProduceSkills
	}
	return nil
}

func (x *UserProduceProgressSupportCard) GetEventStaminaRecoverUpPermil() int32 {
	if x != nil {
		return x.EventStaminaRecoverUpPermil
	}
	return 0
}

func (x *UserProduceProgressSupportCard) GetEventProducePointAdditionValueUpPermil() int32 {
	if x != nil {
		return x.EventProducePointAdditionValueUpPermil
	}
	return 0
}

func (x *UserProduceProgressSupportCard) GetEventParameterAdditionValueUpPermil() int32 {
	if x != nil {
		return x.EventParameterAdditionValueUpPermil
	}
	return 0
}

func (x *UserProduceProgressSupportCard) GetEventProbabilityUpPermyriad() int32 {
	if x != nil {
		return x.EventProbabilityUpPermyriad
	}
	return 0
}

func (x *UserProduceProgressSupportCard) GetProduceCardUpgradePermil() int32 {
	if x != nil {
		return x.ProduceCardUpgradePermil
	}
	return 0
}

func (x *UserProduceProgressSupportCard) GetEventProduceCardUpgrade() bool {
	if x != nil {
		return x.EventProduceCardUpgrade
	}
	return false
}

type UserProduceRerollMemory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Number        int32                  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	ResultMemory  *pcommon.Memory        `protobuf:"bytes,4,opt,name=resultMemory,proto3" json:"resultMemory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceRerollMemory) Reset() {
	*x = UserProduceRerollMemory{}
	mi := &file_ptransaction_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceRerollMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceRerollMemory) ProtoMessage() {}

func (x *UserProduceRerollMemory) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceRerollMemory.ProtoReflect.Descriptor instead.
func (*UserProduceRerollMemory) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{60}
}

func (x *UserProduceRerollMemory) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceRerollMemory) GetResultMemory() *pcommon.Memory {
	if x != nil {
		return x.ResultMemory
	}
	return nil
}

type UserProduceStartAchievement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AchievementId string                 `protobuf:"bytes,2,opt,name=achievementId,proto3" json:"achievementId,omitempty"`
	Progress      int64                  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceStartAchievement) Reset() {
	*x = UserProduceStartAchievement{}
	mi := &file_ptransaction_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceStartAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceStartAchievement) ProtoMessage() {}

func (x *UserProduceStartAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceStartAchievement.ProtoReflect.Descriptor instead.
func (*UserProduceStartAchievement) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{61}
}

func (x *UserProduceStartAchievement) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *UserProduceStartAchievement) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type UserProduceStory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoryId       string                 `protobuf:"bytes,2,opt,name=storyId,proto3" json:"storyId,omitempty"`
	Read          bool                   `protobuf:"varint,4,opt,name=read,proto3" json:"read,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceStory) Reset() {
	*x = UserProduceStory{}
	mi := &file_ptransaction_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceStory) ProtoMessage() {}

func (x *UserProduceStory) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceStory.ProtoReflect.Descriptor instead.
func (*UserProduceStory) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{62}
}

func (x *UserProduceStory) GetStoryId() string {
	if x != nil {
		return x.StoryId
	}
	return ""
}

func (x *UserProduceStory) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

type UserProduceSupportCardDeck struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProduceType    penum.ProduceType      `protobuf:"varint,2,opt,name=produceType,proto3,enum=penum.ProduceType" json:"produceType,omitempty"`
	Number         int32                  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	SupportCardIds []string               `protobuf:"bytes,4,rep,name=supportCardIds,proto3" json:"supportCardIds,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserProduceSupportCardDeck) Reset() {
	*x = UserProduceSupportCardDeck{}
	mi := &file_ptransaction_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceSupportCardDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceSupportCardDeck) ProtoMessage() {}

func (x *UserProduceSupportCardDeck) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceSupportCardDeck.ProtoReflect.Descriptor instead.
func (*UserProduceSupportCardDeck) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{63}
}

func (x *UserProduceSupportCardDeck) GetProduceType() penum.ProduceType {
	if x != nil {
		return x.ProduceType
	}
	return penum.ProduceType(0)
}

func (x *UserProduceSupportCardDeck) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserProduceSupportCardDeck) GetSupportCardIds() []string {
	if x != nil {
		return x.SupportCardIds
	}
	return nil
}

func (x *UserProduceSupportCardDeck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserProfile struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Name                     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BornMonth                int32                  `protobuf:"varint,4,opt,name=bornMonth,proto3" json:"bornMonth,omitempty"`
	BornDay                  int32                  `protobuf:"varint,5,opt,name=bornDay,proto3" json:"bornDay,omitempty"`
	LastBirthdayUpdatedTime  int64                  `protobuf:"varint,6,opt,name=lastBirthdayUpdatedTime,proto3" json:"lastBirthdayUpdatedTime,omitempty"`
	SupportCardId            string                 `protobuf:"bytes,7,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	UserMemoryId             string                 `protobuf:"bytes,8,opt,name=userMemoryId,proto3" json:"userMemoryId,omitempty"`
	Comment                  string                 `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	Exp                      int64                  `protobuf:"varint,10,opt,name=exp,proto3" json:"exp,omitempty"`
	TotalFanCount            int64                  `protobuf:"varint,11,opt,name=totalFanCount,proto3" json:"totalFanCount,omitempty"`
	AdditionFollowLimitCount int32                  `protobuf:"varint,12,opt,name=additionFollowLimitCount,proto3" json:"additionFollowLimitCount,omitempty"`
	SelectedMeishiNumber     int32                  `protobuf:"varint,13,opt,name=selectedMeishiNumber,proto3" json:"selectedMeishiNumber,omitempty"`
	MaxPvpRateUnitPower      int32                  `protobuf:"varint,14,opt,name=maxPvpRateUnitPower,proto3" json:"maxPvpRateUnitPower,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	mi := &file_ptransaction_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{64}
}

func (x *UserProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserProfile) GetBornMonth() int32 {
	if x != nil {
		return x.BornMonth
	}
	return 0
}

func (x *UserProfile) GetBornDay() int32 {
	if x != nil {
		return x.BornDay
	}
	return 0
}

func (x *UserProfile) GetLastBirthdayUpdatedTime() int64 {
	if x != nil {
		return x.LastBirthdayUpdatedTime
	}
	return 0
}

func (x *UserProfile) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *UserProfile) GetUserMemoryId() string {
	if x != nil {
		return x.UserMemoryId
	}
	return ""
}

func (x *UserProfile) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UserProfile) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *UserProfile) GetTotalFanCount() int64 {
	if x != nil {
		return x.TotalFanCount
	}
	return 0
}

func (x *UserProfile) GetAdditionFollowLimitCount() int32 {
	if x != nil {
		return x.AdditionFollowLimitCount
	}
	return 0
}

func (x *UserProfile) GetSelectedMeishiNumber() int32 {
	if x != nil {
		return x.SelectedMeishiNumber
	}
	return 0
}

func (x *UserProfile) GetMaxPvpRateUnitPower() int32 {
	if x != nil {
		return x.MaxPvpRateUnitPower
	}
	return 0
}

type UserPvpRate struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Grade                      penum.PvpRateGrade     `protobuf:"varint,3,opt,name=grade,proto3,enum=penum.PvpRateGrade" json:"grade,omitempty"`
	BestGrade                  penum.PvpRateGrade     `protobuf:"varint,4,opt,name=bestGrade,proto3,enum=penum.PvpRateGrade" json:"bestGrade,omitempty"`
	IsInitializedCurrentSeason bool                   `protobuf:"varint,5,opt,name=isInitializedCurrentSeason,proto3" json:"isInitializedCurrentSeason,omitempty"`
	PhaseType                  penum.PvpRatePhaseType `protobuf:"varint,100,opt,name=phaseType,proto3,enum=penum.PvpRatePhaseType" json:"phaseType,omitempty"`
	RivalMatchTime             int64                  `protobuf:"varint,101,opt,name=rivalMatchTime,proto3" json:"rivalMatchTime,omitempty"`
	SupportBonusPermyriad      int32                  `protobuf:"varint,104,opt,name=supportBonusPermyriad,proto3" json:"supportBonusPermyriad,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UserPvpRate) Reset() {
	*x = UserPvpRate{}
	mi := &file_ptransaction_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPvpRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPvpRate) ProtoMessage() {}

func (x *UserPvpRate) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPvpRate.ProtoReflect.Descriptor instead.
func (*UserPvpRate) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{65}
}

func (x *UserPvpRate) GetGrade() penum.PvpRateGrade {
	if x != nil {
		return x.Grade
	}
	return penum.PvpRateGrade(0)
}

func (x *UserPvpRate) GetBestGrade() penum.PvpRateGrade {
	if x != nil {
		return x.BestGrade
	}
	return penum.PvpRateGrade(0)
}

func (x *UserPvpRate) GetIsInitializedCurrentSeason() bool {
	if x != nil {
		return x.IsInitializedCurrentSeason
	}
	return false
}

func (x *UserPvpRate) GetPhaseType() penum.PvpRatePhaseType {
	if x != nil {
		return x.PhaseType
	}
	return penum.PvpRatePhaseType(0)
}

func (x *UserPvpRate) GetRivalMatchTime() int64 {
	if x != nil {
		return x.RivalMatchTime
	}
	return 0
}

func (x *UserPvpRate) GetSupportBonusPermyriad() int32 {
	if x != nil {
		return x.SupportBonusPermyriad
	}
	return 0
}

type UserPvpRateUnit struct {
	state           protoimpl.MessageState                    `protogen:"open.v1"`
	StageFormations []*pcommon.PvpRateSetupUnitStageFormation `protobuf:"bytes,3,rep,name=stageFormations,proto3" json:"stageFormations,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UserPvpRateUnit) Reset() {
	*x = UserPvpRateUnit{}
	mi := &file_ptransaction_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPvpRateUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPvpRateUnit) ProtoMessage() {}

func (x *UserPvpRateUnit) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPvpRateUnit.ProtoReflect.Descriptor instead.
func (*UserPvpRateUnit) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{66}
}

func (x *UserPvpRateUnit) GetStageFormations() []*pcommon.PvpRateSetupUnitStageFormation {
	if x != nil {
		return x.StageFormations
	}
	return nil
}

type UserShopItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShopItemId       string                 `protobuf:"bytes,2,opt,name=shopItemId,proto3" json:"shopItemId,omitempty"`
	LastPurchaseTime int64                  `protobuf:"varint,3,opt,name=lastPurchaseTime,proto3" json:"lastPurchaseTime,omitempty"`
	PurchasedCount   int64                  `protobuf:"varint,4,opt,name=purchasedCount,proto3" json:"purchasedCount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserShopItem) Reset() {
	*x = UserShopItem{}
	mi := &file_ptransaction_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserShopItem) ProtoMessage() {}

func (x *UserShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserShopItem.ProtoReflect.Descriptor instead.
func (*UserShopItem) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{67}
}

func (x *UserShopItem) GetShopItemId() string {
	if x != nil {
		return x.ShopItemId
	}
	return ""
}

func (x *UserShopItem) GetLastPurchaseTime() int64 {
	if x != nil {
		return x.LastPurchaseTime
	}
	return 0
}

func (x *UserShopItem) GetPurchasedCount() int64 {
	if x != nil {
		return x.PurchasedCount
	}
	return 0
}

type UserStory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoryId       string                 `protobuf:"bytes,2,opt,name=storyId,proto3" json:"storyId,omitempty"`
	IsUnlocked    bool                   `protobuf:"varint,4,opt,name=isUnlocked,proto3" json:"isUnlocked,omitempty"`
	Read          bool                   `protobuf:"varint,6,opt,name=read,proto3" json:"read,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserStory) Reset() {
	*x = UserStory{}
	mi := &file_ptransaction_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStory) ProtoMessage() {}

func (x *UserStory) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStory.ProtoReflect.Descriptor instead.
func (*UserStory) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{68}
}

func (x *UserStory) GetStoryId() string {
	if x != nil {
		return x.StoryId
	}
	return ""
}

func (x *UserStory) GetIsUnlocked() bool {
	if x != nil {
		return x.IsUnlocked
	}
	return false
}

func (x *UserStory) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

type UserSupportCard struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	SupportCardId  string                          `protobuf:"bytes,2,opt,name=supportCardId,proto3" json:"supportCardId,omitempty"`
	StockQuantity  int32                           `protobuf:"varint,3,opt,name=stockQuantity,proto3" json:"stockQuantity,omitempty"`
	Level          int32                           `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	LevelLimitRank penum.SupportCardLevelLimitRank `protobuf:"varint,5,opt,name=levelLimitRank,proto3,enum=penum.SupportCardLevelLimitRank" json:"levelLimitRank,omitempty"`
	CreatedTime    int64                           `protobuf:"varint,999,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserSupportCard) Reset() {
	*x = UserSupportCard{}
	mi := &file_ptransaction_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSupportCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSupportCard) ProtoMessage() {}

func (x *UserSupportCard) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSupportCard.ProtoReflect.Descriptor instead.
func (*UserSupportCard) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{69}
}

func (x *UserSupportCard) GetSupportCardId() string {
	if x != nil {
		return x.SupportCardId
	}
	return ""
}

func (x *UserSupportCard) GetStockQuantity() int32 {
	if x != nil {
		return x.StockQuantity
	}
	return 0
}

func (x *UserSupportCard) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserSupportCard) GetLevelLimitRank() penum.SupportCardLevelLimitRank {
	if x != nil {
		return x.LevelLimitRank
	}
	return penum.SupportCardLevelLimitRank(0)
}

func (x *UserSupportCard) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type UserTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeType      penum.TimeType         `protobuf:"varint,2,opt,name=timeType,proto3,enum=penum.TimeType" json:"timeType,omitempty"`
	DataOfTime    int64                  `protobuf:"varint,3,opt,name=dataOfTime,proto3" json:"dataOfTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTime) Reset() {
	*x = UserTime{}
	mi := &file_ptransaction_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTime) ProtoMessage() {}

func (x *UserTime) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTime.ProtoReflect.Descriptor instead.
func (*UserTime) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{70}
}

func (x *UserTime) GetTimeType() penum.TimeType {
	if x != nil {
		return x.TimeType
	}
	return penum.TimeType(0)
}

func (x *UserTime) GetDataOfTime() int64 {
	if x != nil {
		return x.DataOfTime
	}
	return 0
}

type UserTower struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TowerId            string                 `protobuf:"bytes,2,opt,name=towerId,proto3" json:"towerId,omitempty"`
	LayerCount         int32                  `protobuf:"varint,3,opt,name=layerCount,proto3" json:"layerCount,omitempty"`
	ClearLayerCount    int32                  `protobuf:"varint,4,opt,name=clearLayerCount,proto3" json:"clearLayerCount,omitempty"`
	TotalClearRank     int32                  `protobuf:"varint,5,opt,name=totalClearRank,proto3" json:"totalClearRank,omitempty"`
	ReceivedLayerCount int32                  `protobuf:"varint,6,opt,name=receivedLayerCount,proto3" json:"receivedLayerCount,omitempty"`
	UserMemoryIds      []string               `protobuf:"bytes,11,rep,name=userMemoryIds,proto3" json:"userMemoryIds,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserTower) Reset() {
	*x = UserTower{}
	mi := &file_ptransaction_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTower) ProtoMessage() {}

func (x *UserTower) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTower.ProtoReflect.Descriptor instead.
func (*UserTower) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{71}
}

func (x *UserTower) GetTowerId() string {
	if x != nil {
		return x.TowerId
	}
	return ""
}

func (x *UserTower) GetLayerCount() int32 {
	if x != nil {
		return x.LayerCount
	}
	return 0
}

func (x *UserTower) GetClearLayerCount() int32 {
	if x != nil {
		return x.ClearLayerCount
	}
	return 0
}

func (x *UserTower) GetTotalClearRank() int32 {
	if x != nil {
		return x.TotalClearRank
	}
	return 0
}

func (x *UserTower) GetReceivedLayerCount() int32 {
	if x != nil {
		return x.ReceivedLayerCount
	}
	return 0
}

func (x *UserTower) GetUserMemoryIds() []string {
	if x != nil {
		return x.UserMemoryIds
	}
	return nil
}

type UserTutorial struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          penum.TutorialType     `protobuf:"varint,2,opt,name=type,proto3,enum=penum.TutorialType" json:"type,omitempty"`
	Step          int32                  `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTutorial) Reset() {
	*x = UserTutorial{}
	mi := &file_ptransaction_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTutorial) ProtoMessage() {}

func (x *UserTutorial) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTutorial.ProtoReflect.Descriptor instead.
func (*UserTutorial) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{72}
}

func (x *UserTutorial) GetType() penum.TutorialType {
	if x != nil {
		return x.Type
	}
	return penum.TutorialType(0)
}

func (x *UserTutorial) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type UserWork struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Type                   penum.WorkType         `protobuf:"varint,2,opt,name=type,proto3,enum=penum.WorkType" json:"type,omitempty"`
	DurationMinutes        int32                  `protobuf:"varint,3,opt,name=durationMinutes,proto3" json:"durationMinutes,omitempty"`
	Level                  int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	CharacterId            string                 `protobuf:"bytes,5,opt,name=characterId,proto3" json:"characterId,omitempty"`
	CharacterDearnessLevel int32                  `protobuf:"varint,6,opt,name=characterDearnessLevel,proto3" json:"characterDearnessLevel,omitempty"`
	StartedTime            int64                  `protobuf:"varint,7,opt,name=startedTime,proto3" json:"startedTime,omitempty"`
	LastSkippedTime        int64                  `protobuf:"varint,8,opt,name=lastSkippedTime,proto3" json:"lastSkippedTime,omitempty"`
	SkipCount              int32                  `protobuf:"varint,9,opt,name=skipCount,proto3" json:"skipCount,omitempty"`
	TotalFinishCount       int32                  `protobuf:"varint,10,opt,name=totalFinishCount,proto3" json:"totalFinishCount,omitempty"`
	FixedIsExcellent       bool                   `protobuf:"varint,11,opt,name=fixedIsExcellent,proto3" json:"fixedIsExcellent,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UserWork) Reset() {
	*x = UserWork{}
	mi := &file_ptransaction_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWork) ProtoMessage() {}

func (x *UserWork) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWork.ProtoReflect.Descriptor instead.
func (*UserWork) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{73}
}

func (x *UserWork) GetType() penum.WorkType {
	if x != nil {
		return x.Type
	}
	return penum.WorkType(0)
}

func (x *UserWork) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *UserWork) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserWork) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserWork) GetCharacterDearnessLevel() int32 {
	if x != nil {
		return x.CharacterDearnessLevel
	}
	return 0
}

func (x *UserWork) GetStartedTime() int64 {
	if x != nil {
		return x.StartedTime
	}
	return 0
}

func (x *UserWork) GetLastSkippedTime() int64 {
	if x != nil {
		return x.LastSkippedTime
	}
	return 0
}

func (x *UserWork) GetSkipCount() int32 {
	if x != nil {
		return x.SkipCount
	}
	return 0
}

func (x *UserWork) GetTotalFinishCount() int32 {
	if x != nil {
		return x.TotalFinishCount
	}
	return 0
}

func (x *UserWork) GetFixedIsExcellent() bool {
	if x != nil {
		return x.FixedIsExcellent
	}
	return false
}

type UserWorkCharacter struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CharacterId      string                 `protobuf:"bytes,2,opt,name=characterId,proto3" json:"characterId,omitempty"`
	IsFine           bool                   `protobuf:"varint,4,opt,name=isFine,proto3" json:"isFine,omitempty"`
	TotalFinishCount int32                  `protobuf:"varint,9,opt,name=totalFinishCount,proto3" json:"totalFinishCount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserWorkCharacter) Reset() {
	*x = UserWorkCharacter{}
	mi := &file_ptransaction_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserWorkCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWorkCharacter) ProtoMessage() {}

func (x *UserWorkCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWorkCharacter.ProtoReflect.Descriptor instead.
func (*UserWorkCharacter) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{74}
}

func (x *UserWorkCharacter) GetCharacterId() string {
	if x != nil {
		return x.CharacterId
	}
	return ""
}

func (x *UserWorkCharacter) GetIsFine() bool {
	if x != nil {
		return x.IsFine
	}
	return false
}

func (x *UserWorkCharacter) GetTotalFinishCount() int32 {
	if x != nil {
		return x.TotalFinishCount
	}
	return 0
}

type UserMemory_MemoryAbility struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level         int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMemory_MemoryAbility) Reset() {
	*x = UserMemory_MemoryAbility{}
	mi := &file_ptransaction_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemory_MemoryAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemory_MemoryAbility) ProtoMessage() {}

func (x *UserMemory_MemoryAbility) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemory_MemoryAbility.ProtoReflect.Descriptor instead.
func (*UserMemory_MemoryAbility) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{23, 0}
}

func (x *UserMemory_MemoryAbility) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserMemory_MemoryAbility) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type UserProduceProgress_ExamStatusEnchant struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	OriginType    penum.ProduceTriggerOriginType `protobuf:"varint,1,opt,name=originType,proto3,enum=penum.ProduceTriggerOriginType" json:"originType,omitempty"`
	OriginOwnerId string                         `protobuf:"bytes,2,opt,name=originOwnerId,proto3" json:"originOwnerId,omitempty"`
	OriginId      string                         `protobuf:"bytes,3,opt,name=originId,proto3" json:"originId,omitempty"`
	OriginLevel   int32                          `protobuf:"varint,4,opt,name=originLevel,proto3" json:"originLevel,omitempty"`
	Id            string                         `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgress_ExamStatusEnchant) Reset() {
	*x = UserProduceProgress_ExamStatusEnchant{}
	mi := &file_ptransaction_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgress_ExamStatusEnchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgress_ExamStatusEnchant) ProtoMessage() {}

func (x *UserProduceProgress_ExamStatusEnchant) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgress_ExamStatusEnchant.ProtoReflect.Descriptor instead.
func (*UserProduceProgress_ExamStatusEnchant) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{49, 0}
}

func (x *UserProduceProgress_ExamStatusEnchant) GetOriginType() penum.ProduceTriggerOriginType {
	if x != nil {
		return x.OriginType
	}
	return penum.ProduceTriggerOriginType(0)
}

func (x *UserProduceProgress_ExamStatusEnchant) GetOriginOwnerId() string {
	if x != nil {
		return x.OriginOwnerId
	}
	return ""
}

func (x *UserProduceProgress_ExamStatusEnchant) GetOriginId() string {
	if x != nil {
		return x.OriginId
	}
	return ""
}

func (x *UserProduceProgress_ExamStatusEnchant) GetOriginLevel() int32 {
	if x != nil {
		return x.OriginLevel
	}
	return 0
}

func (x *UserProduceProgress_ExamStatusEnchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserProduceProgress_ProduceItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProduceItemId string                 `protobuf:"bytes,1,opt,name=produceItemId,proto3" json:"produceItemId,omitempty"`
	FireCount     int32                  `protobuf:"varint,2,opt,name=fireCount,proto3" json:"fireCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgress_ProduceItem) Reset() {
	*x = UserProduceProgress_ProduceItem{}
	mi := &file_ptransaction_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgress_ProduceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgress_ProduceItem) ProtoMessage() {}

func (x *UserProduceProgress_ProduceItem) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgress_ProduceItem.ProtoReflect.Descriptor instead.
func (*UserProduceProgress_ProduceItem) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{49, 1}
}

func (x *UserProduceProgress_ProduceItem) GetProduceItemId() string {
	if x != nil {
		return x.ProduceItemId
	}
	return ""
}

func (x *UserProduceProgress_ProduceItem) GetFireCount() int32 {
	if x != nil {
		return x.FireCount
	}
	return 0
}

type UserProduceProgress_ProduceSkill struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level         int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TriggerCount  int32                  `protobuf:"varint,3,opt,name=triggerCount,proto3" json:"triggerCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgress_ProduceSkill) Reset() {
	*x = UserProduceProgress_ProduceSkill{}
	mi := &file_ptransaction_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgress_ProduceSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgress_ProduceSkill) ProtoMessage() {}

func (x *UserProduceProgress_ProduceSkill) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgress_ProduceSkill.ProtoReflect.Descriptor instead.
func (*UserProduceProgress_ProduceSkill) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{49, 2}
}

func (x *UserProduceProgress_ProduceSkill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProduceProgress_ProduceSkill) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserProduceProgress_ProduceSkill) GetTriggerCount() int32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

type UserProduceProgress_SelfLessonTypeStaminaPermil struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	LessonType    penum.ProduceStepLessonType `protobuf:"varint,1,opt,name=lessonType,proto3,enum=penum.ProduceStepLessonType" json:"lessonType,omitempty"`
	Permil        int32                       `protobuf:"varint,2,opt,name=permil,proto3" json:"permil,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgress_SelfLessonTypeStaminaPermil) Reset() {
	*x = UserProduceProgress_SelfLessonTypeStaminaPermil{}
	mi := &file_ptransaction_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgress_SelfLessonTypeStaminaPermil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgress_SelfLessonTypeStaminaPermil) ProtoMessage() {}

func (x *UserProduceProgress_SelfLessonTypeStaminaPermil) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgress_SelfLessonTypeStaminaPermil.ProtoReflect.Descriptor instead.
func (*UserProduceProgress_SelfLessonTypeStaminaPermil) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{49, 3}
}

func (x *UserProduceProgress_SelfLessonTypeStaminaPermil) GetLessonType() penum.ProduceStepLessonType {
	if x != nil {
		return x.LessonType
	}
	return penum.ProduceStepLessonType(0)
}

func (x *UserProduceProgress_SelfLessonTypeStaminaPermil) GetPermil() int32 {
	if x != nil {
		return x.Permil
	}
	return 0
}

type UserProduceProgress_ShopProduceCardDiscount struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ProduceCardSearchId string                 `protobuf:"bytes,1,opt,name=produceCardSearchId,proto3" json:"produceCardSearchId,omitempty"`
	Permils             []int32                `protobuf:"varint,2,rep,packed,name=permils,proto3" json:"permils,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UserProduceProgress_ShopProduceCardDiscount) Reset() {
	*x = UserProduceProgress_ShopProduceCardDiscount{}
	mi := &file_ptransaction_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgress_ShopProduceCardDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgress_ShopProduceCardDiscount) ProtoMessage() {}

func (x *UserProduceProgress_ShopProduceCardDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgress_ShopProduceCardDiscount.ProtoReflect.Descriptor instead.
func (*UserProduceProgress_ShopProduceCardDiscount) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{49, 4}
}

func (x *UserProduceProgress_ShopProduceCardDiscount) GetProduceCardSearchId() string {
	if x != nil {
		return x.ProduceCardSearchId
	}
	return ""
}

func (x *UserProduceProgress_ShopProduceCardDiscount) GetPermils() []int32 {
	if x != nil {
		return x.Permils
	}
	return nil
}

type UserProduceProgressEffect_Reward struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	ResourceType  penum.ProduceResourceType `protobuf:"varint,1,opt,name=resourceType,proto3,enum=penum.ProduceResourceType" json:"resourceType,omitempty"`
	ResourceId    string                    `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	ResourceLevel int32                     `protobuf:"varint,3,opt,name=resourceLevel,proto3" json:"resourceLevel,omitempty"`
	Quantity      int32                     `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgressEffect_Reward) Reset() {
	*x = UserProduceProgressEffect_Reward{}
	mi := &file_ptransaction_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressEffect_Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressEffect_Reward) ProtoMessage() {}

func (x *UserProduceProgressEffect_Reward) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressEffect_Reward.ProtoReflect.Descriptor instead.
func (*UserProduceProgressEffect_Reward) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{52, 0}
}

func (x *UserProduceProgressEffect_Reward) GetResourceType() penum.ProduceResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ProduceResourceType(0)
}

func (x *UserProduceProgressEffect_Reward) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *UserProduceProgressEffect_Reward) GetResourceLevel() int32 {
	if x != nil {
		return x.ResourceLevel
	}
	return 0
}

func (x *UserProduceProgressEffect_Reward) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type UserProduceProgressMemory_MemoryAbility struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level         int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TriggerCount  int32                  `protobuf:"varint,3,opt,name=triggerCount,proto3" json:"triggerCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgressMemory_MemoryAbility) Reset() {
	*x = UserProduceProgressMemory_MemoryAbility{}
	mi := &file_ptransaction_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressMemory_MemoryAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressMemory_MemoryAbility) ProtoMessage() {}

func (x *UserProduceProgressMemory_MemoryAbility) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressMemory_MemoryAbility.ProtoReflect.Descriptor instead.
func (*UserProduceProgressMemory_MemoryAbility) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{54, 0}
}

func (x *UserProduceProgressMemory_MemoryAbility) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProduceProgressMemory_MemoryAbility) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserProduceProgressMemory_MemoryAbility) GetTriggerCount() int32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

type UserProduceProgressPresent_Reward struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	ResourceType  penum.ProduceResourceType `protobuf:"varint,1,opt,name=resourceType,proto3,enum=penum.ProduceResourceType" json:"resourceType,omitempty"`
	ResourceId    string                    `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	ResourceLevel int32                     `protobuf:"varint,3,opt,name=resourceLevel,proto3" json:"resourceLevel,omitempty"`
	Quantity      int32                     `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgressPresent_Reward) Reset() {
	*x = UserProduceProgressPresent_Reward{}
	mi := &file_ptransaction_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressPresent_Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressPresent_Reward) ProtoMessage() {}

func (x *UserProduceProgressPresent_Reward) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressPresent_Reward.ProtoReflect.Descriptor instead.
func (*UserProduceProgressPresent_Reward) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{55, 0}
}

func (x *UserProduceProgressPresent_Reward) GetResourceType() penum.ProduceResourceType {
	if x != nil {
		return x.ResourceType
	}
	return penum.ProduceResourceType(0)
}

func (x *UserProduceProgressPresent_Reward) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *UserProduceProgressPresent_Reward) GetResourceLevel() int32 {
	if x != nil {
		return x.ResourceLevel
	}
	return 0
}

func (x *UserProduceProgressPresent_Reward) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type UserProduceProgressSupportCard_ProduceSkill struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level         int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TriggerCount  int32                  `protobuf:"varint,3,opt,name=triggerCount,proto3" json:"triggerCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProduceProgressSupportCard_ProduceSkill) Reset() {
	*x = UserProduceProgressSupportCard_ProduceSkill{}
	mi := &file_ptransaction_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProduceProgressSupportCard_ProduceSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProduceProgressSupportCard_ProduceSkill) ProtoMessage() {}

func (x *UserProduceProgressSupportCard_ProduceSkill) ProtoReflect() protoreflect.Message {
	mi := &file_ptransaction_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProduceProgressSupportCard_ProduceSkill.ProtoReflect.Descriptor instead.
func (*UserProduceProgressSupportCard_ProduceSkill) Descriptor() ([]byte, []int) {
	return file_ptransaction_proto_rawDescGZIP(), []int{59, 0}
}

func (x *UserProduceProgressSupportCard_ProduceSkill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserProduceProgressSupportCard_ProduceSkill) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserProduceProgressSupportCard_ProduceSkill) GetTriggerCount() int32 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

var File_ptransaction_proto protoreflect.FileDescriptor

var file_ptransaction_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0b, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8,
	0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6d, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6d, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x10,
	0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x51, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x93,
	0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x13, 0x74, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x13, 0x74, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x65, 0x62, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x45, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x64, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4e, 0x0a,
	0x22, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x73, 0x61, 0x74, 0x69, 0x73,
	0x66, 0x79, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61,
	0x64, 0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x73, 0x68, 0x61, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x73, 0x68, 0x61, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x61, 0x73, 0x68, 0x61, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x72, 0x61,
	0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x6a, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x48, 0x6f, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x84, 0x02,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0d, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0xee, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x26, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x26, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x5e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x8a, 0x03, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62, 0x61,
	0x73, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x22, 0x43,
	0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x42, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x69, 0x73, 0x68,
	0x69, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c, 0x75,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x49, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x22, 0xfe, 0x0b, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x69,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x16, 0x69, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x15, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x4c, 0x0a, 0x16,
	0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x16, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x78,
	0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x65, 0x78,
	0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x75, 0x73, 0x68, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x48, 0x69, 0x67,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x73, 0x68, 0x1a, 0x35, 0x0a, 0x0d, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x16, 0x65,
	0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x16, 0x65, 0x78, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x38, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x1c, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22,
	0xb1, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x50, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x17, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x21, 0x75, 0x6e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x69, 0x73,
	0x68, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x25, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x22,
	0xb9, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x22, 0x31, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73,
	0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x64, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x19, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x19, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x6a, 0x0a, 0x20, 0x76, 0x69, 0x65, 0x77, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x20, 0x76, 0x69, 0x65, 0x77,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0x77, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x33, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x64,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x16, 0x69, 0x64, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x15,
	0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x74, 0x72, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61, 0x73,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49,
	0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68,
	0x61, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x49, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x5b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x73,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x18, 0x70, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x25,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x7b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x7d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x15, 0x0a,
	0x05, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x18, 0xca,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x35, 0x0a,
	0x15, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x76,
	0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x15, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xcc, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x16, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x76, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x14, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xce, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x35,
	0x0a, 0x15, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x12, 0x1f, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0xdd,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x12, 0x45, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x73, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1c, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x3d, 0x0a,
	0x19, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xe6, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x23, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x12, 0x4d, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x18, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x75, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x47, 0x6f, 0x6c, 0x64, 0x18, 0xec, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x69, 0x67,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x67, 0x0a, 0x16, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0xfd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x16, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x1a, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x65, 0x0a, 0x15, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x91, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x15, 0x69, 0x64, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x22, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x17,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73,
	0x18, 0xb9, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x45,
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xba, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x18, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0xe1, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x75, 0x72, 0x6e, 0x18, 0xe2, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x44, 0x72, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x90, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x73,
	0x12, 0x3f, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x91,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72,
	0x69, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x12, 0x4f, 0x0a, 0x22, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x18, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x70,
	0x63, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xf9,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x70, 0x63, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12,
	0x3b, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xa6, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x49, 0x0a, 0x1f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18,
	0xa7, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x1c, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xa8, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d,
	0x65, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xd8, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x69, 0x6d, 0x6d, 0x69, 0x63,
	0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x64,
	0x0a, 0x12, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0xdf, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x12, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x1d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x56, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xe0, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x56, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x1d, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0xe1, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x12, 0x47, 0x0a, 0x1e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x53, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x53, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x0e, 0x65,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe8, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0xea, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x12, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x45,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0xec, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d,
	0x65, 0x78, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a,
	0x12, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0xee, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x75, 0x72, 0x6e, 0x18,
	0xf1, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x18, 0xf3, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x52, 0x1c, 0x73, 0x65,
	0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8a, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x65, 0x0a, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x23, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf8, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x18, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x73, 0x18, 0xf9, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x73, 0x68,
	0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1a, 0x73, 0x68, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xa1, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a,
	0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x73, 0x68,
	0x6f, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c,
	0x73, 0x18, 0xa2, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x70, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x12, 0x55, 0x0a,
	0x25, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x18, 0xa3, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x25, 0x73,
	0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x24, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x18, 0xa4, 0x06, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x24, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x18, 0x73, 0x68, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0xa7, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x49, 0x0a, 0x1f, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x44, 0x72, 0x69, 0x6e, 0x6b, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x73, 0x18, 0xa8, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1f, 0x73, 0x68, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x15,
	0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xab, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x68,
	0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x68, 0x6f,
	0x70, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0xac, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c,
	0x12, 0x43, 0x0a, 0x1c, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x18, 0xd4, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x51, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x72, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x58, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x73, 0x0a,
	0x1b, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x0a,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x6c, 0x1a, 0x65, 0x0a, 0x17, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x22, 0x8f, 0x04, 0x0a, 0x1b, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x6f,
	0x74, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x73,
	0x18, 0x68, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44,
	0x72, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x69, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x6a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x6b, 0x69,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78,
	0x61, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad, 0x03, 0x0a, 0x1b,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x21, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x90, 0x07, 0x0a, 0x19,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x48, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x69, 0x63,
	0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x50, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70,
	0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xb2,
	0x01, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0x59, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9d, 0x04, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x56, 0x6f, 0x74, 0x65,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0xbf, 0x02, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x22, 0x83, 0x07, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x53, 0x74, 0x65, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x76, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e,
	0x76, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65,
	0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x1d, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x53, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c,
	0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x53, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6d,
	0x61, 0x78, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf9, 0x03, 0x0a, 0x17, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x34,
	0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f,
	0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xd1, 0x07, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x0e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3c, 0x0a,
	0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x1b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x56,
	0x0a, 0x26, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x50, 0x0a, 0x23, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x23, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x50, 0x65,
	0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x1a, 0x58, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x17, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0x5f, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x72, 0x65, 0x61, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd1,
	0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x69, 0x73, 0x68, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x22, 0xc0, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x76, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x62, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x76, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x76, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50,
	0x65, 0x72, 0x6d, 0x79, 0x72, 0x69, 0x61, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d,
	0x79, 0x72, 0x69, 0x61, 0x64, 0x22, 0x64, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x76, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x76, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x59, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x48, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x57,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4f,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x22, 0x8b, 0x03, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49,
	0x73, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x73, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x6e, 0x74, 0x22, 0x79, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x24, 0x5a,
	0x22, 0x76, 0x65, 0x72, 0x74, 0x65, 0x73, 0x61, 0x6e, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x75, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ptransaction_proto_rawDescOnce sync.Once
	file_ptransaction_proto_rawDescData []byte
)

func file_ptransaction_proto_rawDescGZIP() []byte {
	file_ptransaction_proto_rawDescOnce.Do(func() {
		file_ptransaction_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ptransaction_proto_rawDesc), len(file_ptransaction_proto_rawDesc)))
	})
	return file_ptransaction_proto_rawDescData
}

var file_ptransaction_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_ptransaction_proto_goTypes = []any{
	(*User)(nil),                                            // 0: ptransaction.User
	(*UserActionPoint)(nil),                                 // 1: ptransaction.UserActionPoint
	(*UserAuthProvider)(nil),                                // 2: ptransaction.UserAuthProvider
	(*UserBalance)(nil),                                     // 3: ptransaction.UserBalance
	(*UserBanWarning)(nil),                                  // 4: ptransaction.UserBanWarning
	(*UserCharacter)(nil),                                   // 5: ptransaction.UserCharacter
	(*UserCharacterCostume)(nil),                            // 6: ptransaction.UserCharacterCostume
	(*UserCharacterRoster)(nil),                             // 7: ptransaction.UserCharacterRoster
	(*UserComeback)(nil),                                    // 8: ptransaction.UserComeback
	(*UserCostume)(nil),                                     // 9: ptransaction.UserCostume
	(*UserCostumeHead)(nil),                                 // 10: ptransaction.UserCostumeHead
	(*UserCount)(nil),                                       // 11: ptransaction.UserCount
	(*UserDearnessStory)(nil),                               // 12: ptransaction.UserDearnessStory
	(*UserGashaButton)(nil),                                 // 13: ptransaction.UserGashaButton
	(*UserGuild)(nil),                                       // 14: ptransaction.UserGuild
	(*UserHomeCharacter)(nil),                               // 15: ptransaction.UserHomeCharacter
	(*UserIdolCard)(nil),                                    // 16: ptransaction.UserIdolCard
	(*UserIdolCardSkin)(nil),                                // 17: ptransaction.UserIdolCardSkin
	(*UserInvitation)(nil),                                  // 18: ptransaction.UserInvitation
	(*UserItem)(nil),                                        // 19: ptransaction.UserItem
	(*UserMeishi)(nil),                                      // 20: ptransaction.UserMeishi
	(*UserMeishiBaseAsset)(nil),                             // 21: ptransaction.UserMeishiBaseAsset
	(*UserMeishiIllustrationAsset)(nil),                     // 22: ptransaction.UserMeishiIllustrationAsset
	(*UserMemory)(nil),                                      // 23: ptransaction.UserMemory
	(*UserMemoryInherit)(nil),                               // 24: ptransaction.UserMemoryInherit
	(*UserMission)(nil),                                     // 25: ptransaction.UserMission
	(*UserMissionDailyReleaseGroup)(nil),                    // 26: ptransaction.UserMissionDailyReleaseGroup
	(*UserMissionGroup)(nil),                                // 27: ptransaction.UserMissionGroup
	(*UserMissionPass)(nil),                                 // 28: ptransaction.UserMissionPass
	(*UserMissionPassPoint)(nil),                            // 29: ptransaction.UserMissionPassPoint
	(*UserMissionPoint)(nil),                                // 30: ptransaction.UserMissionPoint
	(*UserMoney)(nil),                                       // 31: ptransaction.UserMoney
	(*UserMovie)(nil),                                       // 32: ptransaction.UserMovie
	(*UserMusic)(nil),                                       // 33: ptransaction.UserMusic
	(*UserPhoto)(nil),                                       // 34: ptransaction.UserPhoto
	(*UserPhotoBackground)(nil),                             // 35: ptransaction.UserPhotoBackground
	(*UserPhotoPose)(nil),                                   // 36: ptransaction.UserPhotoPose
	(*UserPreference)(nil),                                  // 37: ptransaction.UserPreference
	(*UserProduce)(nil),                                     // 38: ptransaction.UserProduce
	(*UserProduceAdv)(nil),                                  // 39: ptransaction.UserProduceAdv
	(*UserProduceCard)(nil),                                 // 40: ptransaction.UserProduceCard
	(*UserProduceCardReward)(nil),                           // 41: ptransaction.UserProduceCardReward
	(*UserProduceCharacter)(nil),                            // 42: ptransaction.UserProduceCharacter
	(*UserProduceDrink)(nil),                                // 43: ptransaction.UserProduceDrink
	(*UserProduceGroupCharacter)(nil),                       // 44: ptransaction.UserProduceGroupCharacter
	(*UserProduceIdolCard)(nil),                             // 45: ptransaction.UserProduceIdolCard
	(*UserProduceItem)(nil),                                 // 46: ptransaction.UserProduceItem
	(*UserProduceLive)(nil),                                 // 47: ptransaction.UserProduceLive
	(*UserProduceMemoryDeck)(nil),                           // 48: ptransaction.UserProduceMemoryDeck
	(*UserProduceProgress)(nil),                             // 49: ptransaction.UserProduceProgress
	(*UserProduceProgressAudition)(nil),                     // 50: ptransaction.UserProduceProgressAudition
	(*UserProduceProgressBusiness)(nil),                     // 51: ptransaction.UserProduceProgressBusiness
	(*UserProduceProgressEffect)(nil),                       // 52: ptransaction.UserProduceProgressEffect
	(*UserProduceProgressEvent)(nil),                        // 53: ptransaction.UserProduceProgressEvent
	(*UserProduceProgressMemory)(nil),                       // 54: ptransaction.UserProduceProgressMemory
	(*UserProduceProgressPresent)(nil),                      // 55: ptransaction.UserProduceProgressPresent
	(*UserProduceProgressProduceCard)(nil),                  // 56: ptransaction.UserProduceProgressProduceCard
	(*UserProduceProgressSchedule)(nil),                     // 57: ptransaction.UserProduceProgressSchedule
	(*UserProduceProgressShop)(nil),                         // 58: ptransaction.UserProduceProgressShop
	(*UserProduceProgressSupportCard)(nil),                  // 59: ptransaction.UserProduceProgressSupportCard
	(*UserProduceRerollMemory)(nil),                         // 60: ptransaction.UserProduceRerollMemory
	(*UserProduceStartAchievement)(nil),                     // 61: ptransaction.UserProduceStartAchievement
	(*UserProduceStory)(nil),                                // 62: ptransaction.UserProduceStory
	(*UserProduceSupportCardDeck)(nil),                      // 63: ptransaction.UserProduceSupportCardDeck
	(*UserProfile)(nil),                                     // 64: ptransaction.UserProfile
	(*UserPvpRate)(nil),                                     // 65: ptransaction.UserPvpRate
	(*UserPvpRateUnit)(nil),                                 // 66: ptransaction.UserPvpRateUnit
	(*UserShopItem)(nil),                                    // 67: ptransaction.UserShopItem
	(*UserStory)(nil),                                       // 68: ptransaction.UserStory
	(*UserSupportCard)(nil),                                 // 69: ptransaction.UserSupportCard
	(*UserTime)(nil),                                        // 70: ptransaction.UserTime
	(*UserTower)(nil),                                       // 71: ptransaction.UserTower
	(*UserTutorial)(nil),                                    // 72: ptransaction.UserTutorial
	(*UserWork)(nil),                                        // 73: ptransaction.UserWork
	(*UserWorkCharacter)(nil),                               // 74: ptransaction.UserWorkCharacter
	(*UserMemory_MemoryAbility)(nil),                        // 75: ptransaction.UserMemory.MemoryAbility
	(*UserProduceProgress_ExamStatusEnchant)(nil),           // 76: ptransaction.UserProduceProgress.ExamStatusEnchant
	(*UserProduceProgress_ProduceItem)(nil),                 // 77: ptransaction.UserProduceProgress.ProduceItem
	(*UserProduceProgress_ProduceSkill)(nil),                // 78: ptransaction.UserProduceProgress.ProduceSkill
	(*UserProduceProgress_SelfLessonTypeStaminaPermil)(nil), // 79: ptransaction.UserProduceProgress.SelfLessonTypeStaminaPermil
	(*UserProduceProgress_ShopProduceCardDiscount)(nil),     // 80: ptransaction.UserProduceProgress.ShopProduceCardDiscount
	(*UserProduceProgressEffect_Reward)(nil),                // 81: ptransaction.UserProduceProgressEffect.Reward
	(*UserProduceProgressMemory_MemoryAbility)(nil),         // 82: ptransaction.UserProduceProgressMemory.MemoryAbility
	(*UserProduceProgressPresent_Reward)(nil),               // 83: ptransaction.UserProduceProgressPresent.Reward
	(*UserProduceProgressSupportCard_ProduceSkill)(nil),     // 84: ptransaction.UserProduceProgressSupportCard.ProduceSkill
	(penum.AuthProviderType)(0),                             // 85: penum.AuthProviderType
	(penum.ProduceType)(0),                                  // 86: penum.ProduceType
	(penum.CostumeSetType)(0),                               // 87: penum.CostumeSetType
	(penum.CountType)(0),                                    // 88: penum.CountType
	(penum.GuildJoinType)(0),                                // 89: penum.GuildJoinType
	(penum.HomeType)(0),                                     // 90: penum.HomeType
	(penum.IdolCardLevelLimitRank)(0),                       // 91: penum.IdolCardLevelLimitRank
	(penum.IdolCardPotentialRank)(0),                        // 92: penum.IdolCardPotentialRank
	(penum.ResultGrade)(0),                                  // 93: penum.ResultGrade
	(penum.ProducePlanType)(0),                              // 94: penum.ProducePlanType
	(*pcommon.ProduceCard)(nil),                             // 95: pcommon.ProduceCard
	(penum.ProduceMemoryProduceCardPhaseType)(0),            // 96: penum.ProduceMemoryProduceCardPhaseType
	(penum.ProduceLiveType)(0),                              // 97: penum.ProduceLiveType
	(penum.PhotoButtonExecuteType)(0),                       // 98: penum.PhotoButtonExecuteType
	(penum.ProduceStepAuditionType)(0),                      // 99: penum.ProduceStepAuditionType
	(*pcommon.ProduceCampaign)(nil),                         // 100: pcommon.ProduceCampaign
	(penum.ProduceProgressStatus)(0),                        // 101: penum.ProduceProgressStatus
	(penum.ProduceStepType)(0),                              // 102: penum.ProduceStepType
	(*pcommon.Memory)(nil),                                  // 103: pcommon.Memory
	(penum.ProduceExamResultType)(0),                        // 104: penum.ProduceExamResultType
	(*pcommon.ProduceLessonGrowthResult)(nil),               // 105: pcommon.ProduceLessonGrowthResult
	(*pcommon.ProduceExamEndResult)(nil),                    // 106: pcommon.ProduceExamEndResult
	(penum.ProduceProgressAuditionStatusType)(0),            // 107: penum.ProduceProgressAuditionStatusType
	(penum.ProduceStepBusinessType)(0),                      // 108: penum.ProduceStepBusinessType
	(penum.ProduceEffectType)(0),                            // 109: penum.ProduceEffectType
	(penum.ProducePickRangeType)(0),                         // 110: penum.ProducePickRangeType
	(penum.ProduceTriggerOriginType)(0),                     // 111: penum.ProduceTriggerOriginType
	(penum.ProduceDisplayType)(0),                           // 112: penum.ProduceDisplayType
	(penum.ProduceResourceOriginType)(0),                    // 113: penum.ProduceResourceOriginType
	(*pcommon.ProduceCardCustomize)(nil),                    // 114: pcommon.ProduceCardCustomize
	(penum.ProduceResourceType)(0),                          // 115: penum.ProduceResourceType
	(penum.SupportCardLevelLimitRank)(0),                    // 116: penum.SupportCardLevelLimitRank
	(penum.PvpRateGrade)(0),                                 // 117: penum.PvpRateGrade
	(penum.PvpRatePhaseType)(0),                             // 118: penum.PvpRatePhaseType
	(*pcommon.PvpRateSetupUnitStageFormation)(nil),          // 119: pcommon.PvpRateSetupUnitStageFormation
	(penum.TimeType)(0),                                     // 120: penum.TimeType
	(penum.TutorialType)(0),                                 // 121: penum.TutorialType
	(penum.WorkType)(0),                                     // 122: penum.WorkType
	(penum.ProduceStepLessonType)(0),                        // 123: penum.ProduceStepLessonType
}
var file_ptransaction_proto_depIdxs = []int32{
	85,  // 0: ptransaction.UserAuthProvider.authProviderType:type_name -> penum.AuthProviderType
	86,  // 1: ptransaction.UserCharacter.trueEndProduceTypes:type_name -> penum.ProduceType
	87,  // 2: ptransaction.UserCharacterCostume.setType:type_name -> penum.CostumeSetType
	88,  // 3: ptransaction.UserCount.type:type_name -> penum.CountType
	89,  // 4: ptransaction.UserGuild.joinType:type_name -> penum.GuildJoinType
	90,  // 5: ptransaction.UserHomeCharacter.homeType:type_name -> penum.HomeType
	91,  // 6: ptransaction.UserIdolCard.levelLimitRank:type_name -> penum.IdolCardLevelLimitRank
	92,  // 7: ptransaction.UserIdolCard.potentialRank:type_name -> penum.IdolCardPotentialRank
	93,  // 8: ptransaction.UserMemory.grade:type_name -> penum.ResultGrade
	94,  // 9: ptransaction.UserMemory.planType:type_name -> penum.ProducePlanType
	91,  // 10: ptransaction.UserMemory.idolCardLevelLimitRank:type_name -> penum.IdolCardLevelLimitRank
	92,  // 11: ptransaction.UserMemory.idolCardPotentialRank:type_name -> penum.IdolCardPotentialRank
	95,  // 12: ptransaction.UserMemory.produceCard:type_name -> pcommon.ProduceCard
	96,  // 13: ptransaction.UserMemory.produceCardPhaseType:type_name -> penum.ProduceMemoryProduceCardPhaseType
	75,  // 14: ptransaction.UserMemory.abilities:type_name -> ptransaction.UserMemory.MemoryAbility
	95,  // 15: ptransaction.UserMemory.examBattleProduceCards:type_name -> pcommon.ProduceCard
	97,  // 16: ptransaction.UserMemory.endingLiveType:type_name -> penum.ProduceLiveType
	97,  // 17: ptransaction.UserMemory.produceLiveType:type_name -> penum.ProduceLiveType
	95,  // 18: ptransaction.UserMemoryInherit.examBattleProduceCards:type_name -> pcommon.ProduceCard
	98,  // 19: ptransaction.UserPreference.photoButtonExecuteType:type_name -> penum.PhotoButtonExecuteType
	99,  // 20: ptransaction.UserProduceGroupCharacter.viewUnlockAnimationAuditionTypes:type_name -> penum.ProduceStepAuditionType
	97,  // 21: ptransaction.UserProduceGroupCharacter.endingLiveType:type_name -> penum.ProduceLiveType
	97,  // 22: ptransaction.UserProduceIdolCard.liveType:type_name -> penum.ProduceLiveType
	97,  // 23: ptransaction.UserProduceLive.liveType:type_name -> penum.ProduceLiveType
	86,  // 24: ptransaction.UserProduceMemoryDeck.produceType:type_name -> penum.ProduceType
	91,  // 25: ptransaction.UserProduceProgress.idolCardLevelLimitRank:type_name -> penum.IdolCardLevelLimitRank
	92,  // 26: ptransaction.UserProduceProgress.idolCardPotentialRank:type_name -> penum.IdolCardPotentialRank
	86,  // 27: ptransaction.UserProduceProgress.trueEndProduceTypes:type_name -> penum.ProduceType
	100, // 28: ptransaction.UserProduceProgress.produceCampaigns:type_name -> pcommon.ProduceCampaign
	101, // 29: ptransaction.UserProduceProgress.status:type_name -> penum.ProduceProgressStatus
	102, // 30: ptransaction.UserProduceProgress.stepType:type_name -> penum.ProduceStepType
	102, // 31: ptransaction.UserProduceProgress.effectStepType:type_name -> penum.ProduceStepType
	102, // 32: ptransaction.UserProduceProgress.originStepType:type_name -> penum.ProduceStepType
	103, // 33: ptransaction.UserProduceProgress.resultMemory:type_name -> pcommon.Memory
	78,  // 34: ptransaction.UserProduceProgress.characterProduceSkills:type_name -> ptransaction.UserProduceProgress.ProduceSkill
	78,  // 35: ptransaction.UserProduceProgress.idolCardProduceSkills:type_name -> ptransaction.UserProduceProgress.ProduceSkill
	77,  // 36: ptransaction.UserProduceProgress.produceItems:type_name -> ptransaction.UserProduceProgress.ProduceItem
	76,  // 37: ptransaction.UserProduceProgress.examStatusEnchants:type_name -> ptransaction.UserProduceProgress.ExamStatusEnchant
	104, // 38: ptransaction.UserProduceProgress.examResultType:type_name -> penum.ProduceExamResultType
	105, // 39: ptransaction.UserProduceProgress.lessonGrowthResult:type_name -> pcommon.ProduceLessonGrowthResult
	106, // 40: ptransaction.UserProduceProgress.examEndResult:type_name -> pcommon.ProduceExamEndResult
	79,  // 41: ptransaction.UserProduceProgress.selfLessonTypeStaminaPermils:type_name -> ptransaction.UserProduceProgress.SelfLessonTypeStaminaPermil
	97,  // 42: ptransaction.UserProduceProgress.liveType:type_name -> penum.ProduceLiveType
	80,  // 43: ptransaction.UserProduceProgress.shopProduceCardDiscounts:type_name -> ptransaction.UserProduceProgress.ShopProduceCardDiscount
	107, // 44: ptransaction.UserProduceProgressAudition.status:type_name -> penum.ProduceProgressAuditionStatusType
	108, // 45: ptransaction.UserProduceProgressBusiness.businessType:type_name -> penum.ProduceStepBusinessType
	109, // 46: ptransaction.UserProduceProgressEffect.type:type_name -> penum.ProduceEffectType
	81,  // 47: ptransaction.UserProduceProgressEffect.rewards:type_name -> ptransaction.UserProduceProgressEffect.Reward
	110, // 48: ptransaction.UserProduceProgressEffect.pickRangeType:type_name -> penum.ProducePickRangeType
	111, // 49: ptransaction.UserProduceProgressEffect.originType:type_name -> penum.ProduceTriggerOriginType
	82,  // 50: ptransaction.UserProduceProgressMemory.abilities:type_name -> ptransaction.UserProduceProgressMemory.MemoryAbility
	103, // 51: ptransaction.UserProduceProgressMemory.memory:type_name -> pcommon.Memory
	112, // 52: ptransaction.UserProduceProgressPresent.displayType:type_name -> penum.ProduceDisplayType
	83,  // 53: ptransaction.UserProduceProgressPresent.rewards:type_name -> ptransaction.UserProduceProgressPresent.Reward
	113, // 54: ptransaction.UserProduceProgressProduceCard.originType:type_name -> penum.ProduceResourceOriginType
	114, // 55: ptransaction.UserProduceProgressProduceCard.customizes:type_name -> pcommon.ProduceCardCustomize
	102, // 56: ptransaction.UserProduceProgressSchedule.stepTypes:type_name -> penum.ProduceStepType
	102, // 57: ptransaction.UserProduceProgressSchedule.selectedStepType:type_name -> penum.ProduceStepType
	104, // 58: ptransaction.UserProduceProgressSchedule.examResultType:type_name -> penum.ProduceExamResultType
	115, // 59: ptransaction.UserProduceProgressShop.resourceType:type_name -> penum.ProduceResourceType
	116, // 60: ptransaction.UserProduceProgressSupportCard.levelLimitRank:type_name -> penum.SupportCardLevelLimitRank
	84,  // 61: ptransaction.UserProduceProgressSupportCard.produceSkills:type_name -> ptransaction.UserProduceProgressSupportCard.ProduceSkill
	103, // 62: ptransaction.UserProduceRerollMemory.resultMemory:type_name -> pcommon.Memory
	86,  // 63: ptransaction.UserProduceSupportCardDeck.produceType:type_name -> penum.ProduceType
	117, // 64: ptransaction.UserPvpRate.grade:type_name -> penum.PvpRateGrade
	117, // 65: ptransaction.UserPvpRate.bestGrade:type_name -> penum.PvpRateGrade
	118, // 66: ptransaction.UserPvpRate.phaseType:type_name -> penum.PvpRatePhaseType
	119, // 67: ptransaction.UserPvpRateUnit.stageFormations:type_name -> pcommon.PvpRateSetupUnitStageFormation
	116, // 68: ptransaction.UserSupportCard.levelLimitRank:type_name -> penum.SupportCardLevelLimitRank
	120, // 69: ptransaction.UserTime.timeType:type_name -> penum.TimeType
	121, // 70: ptransaction.UserTutorial.type:type_name -> penum.TutorialType
	122, // 71: ptransaction.UserWork.type:type_name -> penum.WorkType
	111, // 72: ptransaction.UserProduceProgress.ExamStatusEnchant.originType:type_name -> penum.ProduceTriggerOriginType
	123, // 73: ptransaction.UserProduceProgress.SelfLessonTypeStaminaPermil.lessonType:type_name -> penum.ProduceStepLessonType
	115, // 74: ptransaction.UserProduceProgressEffect.Reward.resourceType:type_name -> penum.ProduceResourceType
	115, // 75: ptransaction.UserProduceProgressPresent.Reward.resourceType:type_name -> penum.ProduceResourceType
	76,  // [76:76] is the sub-list for method output_type
	76,  // [76:76] is the sub-list for method input_type
	76,  // [76:76] is the sub-list for extension type_name
	76,  // [76:76] is the sub-list for extension extendee
	0,   // [0:76] is the sub-list for field type_name
}

func init() { file_ptransaction_proto_init() }
func file_ptransaction_proto_init() {
	if File_ptransaction_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ptransaction_proto_rawDesc), len(file_ptransaction_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ptransaction_proto_goTypes,
		DependencyIndexes: file_ptransaction_proto_depIdxs,
		MessageInfos:      file_ptransaction_proto_msgTypes,
	}.Build()
	File_ptransaction_proto = out.File
	file_ptransaction_proto_goTypes = nil
	file_ptransaction_proto_depIdxs = nil
}
